2024-12-12 16:50:51,137:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-12 16:50:51,137:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-12 16:50:51,137:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-12 16:50:51,137:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-12 17:36:03,392:INFO:PyCaret RegressionExperiment
2024-12-12 17:36:03,392:INFO:Logging name: reg-default-name
2024-12-12 17:36:03,392:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-12 17:36:03,392:INFO:version 3.3.2
2024-12-12 17:36:03,392:INFO:Initializing setup()
2024-12-12 17:36:03,392:INFO:self.USI: fa80
2024-12-12 17:36:03,392:INFO:self._variable_keys: {'X_train', 'gpu_param', 'seed', 'y_train', 'n_jobs_param', 'X_test', 'html_param', 'X', 'pipeline', 'fold_shuffle_param', 'fold_generator', 'fold_groups_param', 'exp_id', 'log_plots_param', 'target_param', 'idx', 'USI', 'y_test', 'memory', 'exp_name_log', 'gpu_n_jobs_param', '_ml_usecase', 'transform_target_param', 'logging_param', 'y', 'data', '_available_plots'}
2024-12-12 17:36:03,392:INFO:Checking environment
2024-12-12 17:36:03,392:INFO:python_version: 3.10.15
2024-12-12 17:36:03,392:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-12 17:36:03,392:INFO:machine: AMD64
2024-12-12 17:36:03,392:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-12 17:36:03,411:INFO:Memory: svmem(total=4207841280, available=442638336, percent=89.5, used=3765202944, free=442638336)
2024-12-12 17:36:03,411:INFO:Physical Core: 2
2024-12-12 17:36:03,413:INFO:Logical Core: 4
2024-12-12 17:36:03,413:INFO:Checking libraries
2024-12-12 17:36:03,413:INFO:System:
2024-12-12 17:36:03,414:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-12 17:36:03,414:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-12 17:36:03,414:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-12 17:36:03,414:INFO:PyCaret required dependencies:
2024-12-12 17:36:04,350:INFO:                 pip: 24.2
2024-12-12 17:36:04,351:INFO:          setuptools: 75.1.0
2024-12-12 17:36:04,351:INFO:             pycaret: 3.3.2
2024-12-12 17:36:04,351:INFO:             IPython: 8.29.0
2024-12-12 17:36:04,351:INFO:          ipywidgets: 8.1.5
2024-12-12 17:36:04,351:INFO:                tqdm: 4.67.0
2024-12-12 17:36:04,353:INFO:               numpy: 1.26.4
2024-12-12 17:36:04,353:INFO:              pandas: 2.1.4
2024-12-12 17:36:04,353:INFO:              jinja2: 3.1.4
2024-12-12 17:36:04,353:INFO:               scipy: 1.11.4
2024-12-12 17:36:04,353:INFO:              joblib: 1.3.2
2024-12-12 17:36:04,354:INFO:             sklearn: 1.4.2
2024-12-12 17:36:04,354:INFO:                pyod: 2.0.2
2024-12-12 17:36:04,354:INFO:            imblearn: 0.12.4
2024-12-12 17:36:04,354:INFO:   category_encoders: 2.6.4
2024-12-12 17:36:04,354:INFO:            lightgbm: 4.5.0
2024-12-12 17:36:04,354:INFO:               numba: 0.60.0
2024-12-12 17:36:04,354:INFO:            requests: 2.32.3
2024-12-12 17:36:04,357:INFO:          matplotlib: 3.7.5
2024-12-12 17:36:04,358:INFO:          scikitplot: 0.3.7
2024-12-12 17:36:04,358:INFO:         yellowbrick: 1.5
2024-12-12 17:36:04,358:INFO:              plotly: 5.24.1
2024-12-12 17:36:04,358:INFO:    plotly-resampler: Not installed
2024-12-12 17:36:04,359:INFO:             kaleido: 0.2.1
2024-12-12 17:36:04,359:INFO:           schemdraw: 0.15
2024-12-12 17:36:04,359:INFO:         statsmodels: 0.14.4
2024-12-12 17:36:04,359:INFO:              sktime: 0.26.0
2024-12-12 17:36:04,359:INFO:               tbats: 1.1.3
2024-12-12 17:36:04,359:INFO:            pmdarima: 2.0.4
2024-12-12 17:36:04,359:INFO:              psutil: 6.1.0
2024-12-12 17:36:04,359:INFO:          markupsafe: 3.0.2
2024-12-12 17:36:04,359:INFO:             pickle5: Not installed
2024-12-12 17:36:04,359:INFO:         cloudpickle: 3.1.0
2024-12-12 17:36:04,359:INFO:         deprecation: 2.1.0
2024-12-12 17:36:04,359:INFO:              xxhash: 3.5.0
2024-12-12 17:36:04,359:INFO:           wurlitzer: Not installed
2024-12-12 17:36:04,359:INFO:PyCaret optional dependencies:
2024-12-12 17:36:04,410:INFO:                shap: Not installed
2024-12-12 17:36:04,410:INFO:           interpret: Not installed
2024-12-12 17:36:04,410:INFO:                umap: Not installed
2024-12-12 17:36:04,410:INFO:     ydata_profiling: Not installed
2024-12-12 17:36:04,410:INFO:  explainerdashboard: Not installed
2024-12-12 17:36:04,410:INFO:             autoviz: Not installed
2024-12-12 17:36:04,410:INFO:           fairlearn: Not installed
2024-12-12 17:36:04,410:INFO:          deepchecks: Not installed
2024-12-12 17:36:04,410:INFO:             xgboost: Not installed
2024-12-12 17:36:04,410:INFO:            catboost: Not installed
2024-12-12 17:36:04,410:INFO:              kmodes: Not installed
2024-12-12 17:36:04,410:INFO:             mlxtend: Not installed
2024-12-12 17:36:04,410:INFO:       statsforecast: Not installed
2024-12-12 17:36:04,425:INFO:        tune_sklearn: Not installed
2024-12-12 17:36:04,426:INFO:                 ray: Not installed
2024-12-12 17:36:04,426:INFO:            hyperopt: Not installed
2024-12-12 17:36:04,426:INFO:              optuna: Not installed
2024-12-12 17:36:04,426:INFO:               skopt: Not installed
2024-12-12 17:36:04,426:INFO:              mlflow: Not installed
2024-12-12 17:36:04,426:INFO:              gradio: Not installed
2024-12-12 17:36:04,426:INFO:             fastapi: Not installed
2024-12-12 17:36:04,426:INFO:             uvicorn: Not installed
2024-12-12 17:36:04,428:INFO:              m2cgen: Not installed
2024-12-12 17:36:04,428:INFO:           evidently: Not installed
2024-12-12 17:36:04,428:INFO:               fugue: Not installed
2024-12-12 17:36:04,428:INFO:           streamlit: 1.40.1
2024-12-12 17:36:04,428:INFO:             prophet: Not installed
2024-12-12 17:36:04,428:INFO:None
2024-12-12 17:36:04,429:INFO:Set up data.
2024-12-12 17:36:04,713:INFO:Set up folding strategy.
2024-12-12 17:36:04,713:INFO:Set up train/test split.
2024-12-12 17:36:04,864:INFO:Set up index.
2024-12-12 17:36:04,899:INFO:Assigning column types.
2024-12-12 17:36:04,945:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-12 17:36:04,945:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,012:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,028:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,216:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,292:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,292:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,306:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,309:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,313:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,327:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,443:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,528:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,528:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,528:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,528:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-12 17:36:05,543:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,543:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,675:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,761:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,761:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,761:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,775:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,775:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,895:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,993:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:05,993:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,993:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:05,993:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-12 17:36:06,012:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,125:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,229:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,229:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,229:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,242:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,364:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,444:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,444:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,444:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,444:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-12 17:36:06,591:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,692:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,692:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,842:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,959:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-12 17:36:06,961:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,961:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:06,961:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-12 17:36:07,114:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:07,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:07,214:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:07,411:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-12 17:36:07,530:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:07,530:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:07,530:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-12 17:36:07,777:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:07,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:08,139:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:08,144:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:08,158:INFO:Preparing preprocessing pipeline...
2024-12-12 17:36:08,158:INFO:Set up simple imputation.
2024-12-12 17:36:08,186:INFO:Set up encoding of categorical features.
2024-12-12 17:36:08,189:INFO:Set up column name cleaning.
2024-12-12 17:36:10,209:INFO:Finished creating preprocessing pipeline.
2024-12-12 17:36:10,211:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Size (sqm)', 'Bedrooms',
                                             'Bathrooms',
                                             'Electricity (hours/day)'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=OneHotEncoder(cols=['Location',
                                                                    'Property '
                                                                    'Type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-12 17:36:10,211:INFO:Creating final display dataframe.
2024-12-12 17:36:10,695:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Price (₦)
2                   Target type        Regression
3           Original data shape           (84, 7)
4        Transformed data shape          (84, 15)
5   Transformed train set shape          (58, 15)
6    Transformed test set shape          (26, 15)
7              Numeric features                 4
8          Categorical features                 2
9      Rows with missing values              8.3%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              fa80
2024-12-12 17:36:10,977:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:10,977:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:11,395:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:11,395:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-12 17:36:11,395:INFO:setup() successfully completed in 8.75s...............
2024-12-12 17:37:41,661:INFO:Initializing compare_models()
2024-12-12 17:37:41,662:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, 'include': None, 'exclude': 'ransac', 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=ransac)
2024-12-12 17:37:41,663:INFO:Checking exceptions
2024-12-12 17:37:41,668:INFO:Preparing display monitor
2024-12-12 17:37:41,768:INFO:Initializing Linear Regression
2024-12-12 17:37:41,768:INFO:Total runtime is 1.4917055765787761e-05 minutes
2024-12-12 17:37:41,776:INFO:SubProcess create_model() called ==================================
2024-12-12 17:37:41,776:INFO:Initializing create_model()
2024-12-12 17:37:41,777:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:37:41,777:INFO:Checking exceptions
2024-12-12 17:37:41,777:INFO:Importing libraries
2024-12-12 17:37:41,777:INFO:Copying training dataset
2024-12-12 17:37:41,784:INFO:Defining folds
2024-12-12 17:37:41,785:INFO:Declaring metric variables
2024-12-12 17:37:41,796:INFO:Importing untrained model
2024-12-12 17:37:41,843:INFO:Linear Regression Imported successfully
2024-12-12 17:37:41,872:INFO:Starting cross validation
2024-12-12 17:37:42,274:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:35,809:INFO:Calculating mean and std
2024-12-12 17:38:35,812:INFO:Creating metrics dataframe
2024-12-12 17:38:35,837:INFO:Uploading results into container
2024-12-12 17:38:35,838:INFO:Uploading model into container now
2024-12-12 17:38:35,841:INFO:_master_model_container: 1
2024-12-12 17:38:35,841:INFO:_display_container: 2
2024-12-12 17:38:35,842:INFO:LinearRegression(n_jobs=-1)
2024-12-12 17:38:35,842:INFO:create_model() successfully completed......................................
2024-12-12 17:38:36,028:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:36,028:INFO:Creating metrics dataframe
2024-12-12 17:38:36,103:INFO:Initializing Lasso Regression
2024-12-12 17:38:36,104:INFO:Total runtime is 0.9056035637855531 minutes
2024-12-12 17:38:36,147:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:36,150:INFO:Initializing create_model()
2024-12-12 17:38:36,151:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:36,151:INFO:Checking exceptions
2024-12-12 17:38:36,151:INFO:Importing libraries
2024-12-12 17:38:36,151:INFO:Copying training dataset
2024-12-12 17:38:36,176:INFO:Defining folds
2024-12-12 17:38:36,177:INFO:Declaring metric variables
2024-12-12 17:38:36,211:INFO:Importing untrained model
2024-12-12 17:38:36,248:INFO:Lasso Regression Imported successfully
2024-12-12 17:38:36,279:INFO:Starting cross validation
2024-12-12 17:38:36,281:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:36,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.070e+14, tolerance: 6.272e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:36,648:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.152e+14, tolerance: 6.605e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:36,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.381e+14, tolerance: 6.650e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:36,941:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.625e+13, tolerance: 6.745e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:36,944:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.795e+14, tolerance: 6.151e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:36,960:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.624e+14, tolerance: 7.080e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:37,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.509e+14, tolerance: 6.523e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:37,175:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.593e+14, tolerance: 6.609e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-12 17:38:37,258:INFO:Calculating mean and std
2024-12-12 17:38:37,260:INFO:Creating metrics dataframe
2024-12-12 17:38:37,268:INFO:Uploading results into container
2024-12-12 17:38:37,269:INFO:Uploading model into container now
2024-12-12 17:38:37,269:INFO:_master_model_container: 2
2024-12-12 17:38:37,269:INFO:_display_container: 2
2024-12-12 17:38:37,270:INFO:Lasso(random_state=123)
2024-12-12 17:38:37,270:INFO:create_model() successfully completed......................................
2024-12-12 17:38:37,433:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:37,433:INFO:Creating metrics dataframe
2024-12-12 17:38:38,102:INFO:Initializing Ridge Regression
2024-12-12 17:38:38,102:INFO:Total runtime is 0.9389116128285727 minutes
2024-12-12 17:38:38,111:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:38,113:INFO:Initializing create_model()
2024-12-12 17:38:38,114:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:38,115:INFO:Checking exceptions
2024-12-12 17:38:38,115:INFO:Importing libraries
2024-12-12 17:38:38,115:INFO:Copying training dataset
2024-12-12 17:38:38,125:INFO:Defining folds
2024-12-12 17:38:38,125:INFO:Declaring metric variables
2024-12-12 17:38:38,135:INFO:Importing untrained model
2024-12-12 17:38:38,149:INFO:Ridge Regression Imported successfully
2024-12-12 17:38:38,192:INFO:Starting cross validation
2024-12-12 17:38:38,202:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:40,274:INFO:Calculating mean and std
2024-12-12 17:38:40,277:INFO:Creating metrics dataframe
2024-12-12 17:38:40,280:INFO:Uploading results into container
2024-12-12 17:38:40,281:INFO:Uploading model into container now
2024-12-12 17:38:40,281:INFO:_master_model_container: 3
2024-12-12 17:38:40,281:INFO:_display_container: 2
2024-12-12 17:38:40,282:INFO:Ridge(random_state=123)
2024-12-12 17:38:40,282:INFO:create_model() successfully completed......................................
2024-12-12 17:38:40,443:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:40,443:INFO:Creating metrics dataframe
2024-12-12 17:38:40,468:INFO:Initializing Elastic Net
2024-12-12 17:38:40,476:INFO:Total runtime is 0.9784751534461976 minutes
2024-12-12 17:38:40,484:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:40,485:INFO:Initializing create_model()
2024-12-12 17:38:40,485:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:40,486:INFO:Checking exceptions
2024-12-12 17:38:40,486:INFO:Importing libraries
2024-12-12 17:38:40,486:INFO:Copying training dataset
2024-12-12 17:38:40,501:INFO:Defining folds
2024-12-12 17:38:40,502:INFO:Declaring metric variables
2024-12-12 17:38:40,519:INFO:Importing untrained model
2024-12-12 17:38:40,544:INFO:Elastic Net Imported successfully
2024-12-12 17:38:40,581:INFO:Starting cross validation
2024-12-12 17:38:40,587:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:41,392:INFO:Calculating mean and std
2024-12-12 17:38:41,394:INFO:Creating metrics dataframe
2024-12-12 17:38:41,398:INFO:Uploading results into container
2024-12-12 17:38:41,399:INFO:Uploading model into container now
2024-12-12 17:38:41,399:INFO:_master_model_container: 4
2024-12-12 17:38:41,399:INFO:_display_container: 2
2024-12-12 17:38:41,400:INFO:ElasticNet(random_state=123)
2024-12-12 17:38:41,400:INFO:create_model() successfully completed......................................
2024-12-12 17:38:41,566:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:41,566:INFO:Creating metrics dataframe
2024-12-12 17:38:41,596:INFO:Initializing Least Angle Regression
2024-12-12 17:38:41,597:INFO:Total runtime is 0.9971648931503297 minutes
2024-12-12 17:38:41,610:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:41,611:INFO:Initializing create_model()
2024-12-12 17:38:41,612:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:41,612:INFO:Checking exceptions
2024-12-12 17:38:41,612:INFO:Importing libraries
2024-12-12 17:38:41,613:INFO:Copying training dataset
2024-12-12 17:38:41,636:INFO:Defining folds
2024-12-12 17:38:41,637:INFO:Declaring metric variables
2024-12-12 17:38:41,664:INFO:Importing untrained model
2024-12-12 17:38:41,679:INFO:Least Angle Regression Imported successfully
2024-12-12 17:38:41,707:INFO:Starting cross validation
2024-12-12 17:38:41,714:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:42,616:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-12 17:38:42,616:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 13 iterations, i.e. alpha=1.778e+05, with an active set of 12 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-12 17:38:42,675:INFO:Calculating mean and std
2024-12-12 17:38:42,677:INFO:Creating metrics dataframe
2024-12-12 17:38:42,680:INFO:Uploading results into container
2024-12-12 17:38:42,681:INFO:Uploading model into container now
2024-12-12 17:38:42,681:INFO:_master_model_container: 5
2024-12-12 17:38:42,681:INFO:_display_container: 2
2024-12-12 17:38:42,683:INFO:Lars(random_state=123)
2024-12-12 17:38:42,683:INFO:create_model() successfully completed......................................
2024-12-12 17:38:42,848:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:42,849:INFO:Creating metrics dataframe
2024-12-12 17:38:42,870:INFO:Initializing Lasso Least Angle Regression
2024-12-12 17:38:42,871:INFO:Total runtime is 1.0183960914611818 minutes
2024-12-12 17:38:42,884:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:42,885:INFO:Initializing create_model()
2024-12-12 17:38:42,885:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:42,885:INFO:Checking exceptions
2024-12-12 17:38:42,885:INFO:Importing libraries
2024-12-12 17:38:42,885:INFO:Copying training dataset
2024-12-12 17:38:42,902:INFO:Defining folds
2024-12-12 17:38:42,903:INFO:Declaring metric variables
2024-12-12 17:38:42,923:INFO:Importing untrained model
2024-12-12 17:38:42,944:INFO:Lasso Least Angle Regression Imported successfully
2024-12-12 17:38:42,974:INFO:Starting cross validation
2024-12-12 17:38:42,980:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:44,037:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-12 17:38:44,041:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 12 iterations, alpha=2.141e+05, previous alpha=1.778e+05, with an active set of 11 regressors.
  warnings.warn(

2024-12-12 17:38:44,142:INFO:Calculating mean and std
2024-12-12 17:38:44,145:INFO:Creating metrics dataframe
2024-12-12 17:38:44,150:INFO:Uploading results into container
2024-12-12 17:38:44,151:INFO:Uploading model into container now
2024-12-12 17:38:44,151:INFO:_master_model_container: 6
2024-12-12 17:38:44,151:INFO:_display_container: 2
2024-12-12 17:38:44,152:INFO:LassoLars(random_state=123)
2024-12-12 17:38:44,152:INFO:create_model() successfully completed......................................
2024-12-12 17:38:44,325:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:44,325:INFO:Creating metrics dataframe
2024-12-12 17:38:44,350:INFO:Initializing Orthogonal Matching Pursuit
2024-12-12 17:38:44,351:INFO:Total runtime is 1.043052101135254 minutes
2024-12-12 17:38:44,367:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:44,367:INFO:Initializing create_model()
2024-12-12 17:38:44,367:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:44,368:INFO:Checking exceptions
2024-12-12 17:38:44,368:INFO:Importing libraries
2024-12-12 17:38:44,368:INFO:Copying training dataset
2024-12-12 17:38:44,381:INFO:Defining folds
2024-12-12 17:38:44,382:INFO:Declaring metric variables
2024-12-12 17:38:44,396:INFO:Importing untrained model
2024-12-12 17:38:44,430:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-12 17:38:44,462:INFO:Starting cross validation
2024-12-12 17:38:44,465:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:45,309:INFO:Calculating mean and std
2024-12-12 17:38:45,312:INFO:Creating metrics dataframe
2024-12-12 17:38:45,314:INFO:Uploading results into container
2024-12-12 17:38:45,316:INFO:Uploading model into container now
2024-12-12 17:38:45,316:INFO:_master_model_container: 7
2024-12-12 17:38:45,316:INFO:_display_container: 2
2024-12-12 17:38:45,317:INFO:OrthogonalMatchingPursuit()
2024-12-12 17:38:45,317:INFO:create_model() successfully completed......................................
2024-12-12 17:38:45,493:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:45,495:INFO:Creating metrics dataframe
2024-12-12 17:38:45,528:INFO:Initializing Bayesian Ridge
2024-12-12 17:38:45,528:INFO:Total runtime is 1.0626689910888674 minutes
2024-12-12 17:38:45,534:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:45,537:INFO:Initializing create_model()
2024-12-12 17:38:45,538:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:45,538:INFO:Checking exceptions
2024-12-12 17:38:45,539:INFO:Importing libraries
2024-12-12 17:38:45,540:INFO:Copying training dataset
2024-12-12 17:38:45,550:INFO:Defining folds
2024-12-12 17:38:45,550:INFO:Declaring metric variables
2024-12-12 17:38:45,561:INFO:Importing untrained model
2024-12-12 17:38:45,577:INFO:Bayesian Ridge Imported successfully
2024-12-12 17:38:45,633:INFO:Starting cross validation
2024-12-12 17:38:45,635:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:46,525:INFO:Calculating mean and std
2024-12-12 17:38:46,527:INFO:Creating metrics dataframe
2024-12-12 17:38:46,533:INFO:Uploading results into container
2024-12-12 17:38:46,544:INFO:Uploading model into container now
2024-12-12 17:38:46,547:INFO:_master_model_container: 8
2024-12-12 17:38:46,547:INFO:_display_container: 2
2024-12-12 17:38:46,548:INFO:BayesianRidge()
2024-12-12 17:38:46,548:INFO:create_model() successfully completed......................................
2024-12-12 17:38:46,714:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:46,714:INFO:Creating metrics dataframe
2024-12-12 17:38:46,735:INFO:Initializing Passive Aggressive Regressor
2024-12-12 17:38:46,735:INFO:Total runtime is 1.082797666390737 minutes
2024-12-12 17:38:46,745:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:46,747:INFO:Initializing create_model()
2024-12-12 17:38:46,747:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:46,748:INFO:Checking exceptions
2024-12-12 17:38:46,748:INFO:Importing libraries
2024-12-12 17:38:46,748:INFO:Copying training dataset
2024-12-12 17:38:46,761:INFO:Defining folds
2024-12-12 17:38:46,948:INFO:Declaring metric variables
2024-12-12 17:38:46,978:INFO:Importing untrained model
2024-12-12 17:38:47,000:INFO:Passive Aggressive Regressor Imported successfully
2024-12-12 17:38:47,048:INFO:Starting cross validation
2024-12-12 17:38:47,054:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:48,307:INFO:Calculating mean and std
2024-12-12 17:38:48,310:INFO:Creating metrics dataframe
2024-12-12 17:38:48,313:INFO:Uploading results into container
2024-12-12 17:38:48,314:INFO:Uploading model into container now
2024-12-12 17:38:48,315:INFO:_master_model_container: 9
2024-12-12 17:38:48,315:INFO:_display_container: 2
2024-12-12 17:38:48,319:INFO:PassiveAggressiveRegressor(random_state=123)
2024-12-12 17:38:48,321:INFO:create_model() successfully completed......................................
2024-12-12 17:38:48,477:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:48,477:INFO:Creating metrics dataframe
2024-12-12 17:38:48,512:INFO:Initializing Huber Regressor
2024-12-12 17:38:48,512:INFO:Total runtime is 1.1124144911766054 minutes
2024-12-12 17:38:48,520:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:48,521:INFO:Initializing create_model()
2024-12-12 17:38:48,522:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:48,522:INFO:Checking exceptions
2024-12-12 17:38:48,522:INFO:Importing libraries
2024-12-12 17:38:48,525:INFO:Copying training dataset
2024-12-12 17:38:48,534:INFO:Defining folds
2024-12-12 17:38:48,535:INFO:Declaring metric variables
2024-12-12 17:38:48,549:INFO:Importing untrained model
2024-12-12 17:38:48,572:INFO:Huber Regressor Imported successfully
2024-12-12 17:38:48,614:INFO:Starting cross validation
2024-12-12 17:38:48,623:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:50,104:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-12 17:38:50,564:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-12 17:38:50,818:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-12 17:38:50,892:INFO:Calculating mean and std
2024-12-12 17:38:50,895:INFO:Creating metrics dataframe
2024-12-12 17:38:50,903:INFO:Uploading results into container
2024-12-12 17:38:50,909:INFO:Uploading model into container now
2024-12-12 17:38:50,914:INFO:_master_model_container: 10
2024-12-12 17:38:50,916:INFO:_display_container: 2
2024-12-12 17:38:50,917:INFO:HuberRegressor()
2024-12-12 17:38:50,918:INFO:create_model() successfully completed......................................
2024-12-12 17:38:51,092:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:51,092:INFO:Creating metrics dataframe
2024-12-12 17:38:51,117:INFO:Initializing K Neighbors Regressor
2024-12-12 17:38:51,117:INFO:Total runtime is 1.155819602807363 minutes
2024-12-12 17:38:51,128:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:51,129:INFO:Initializing create_model()
2024-12-12 17:38:51,129:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:51,130:INFO:Checking exceptions
2024-12-12 17:38:51,130:INFO:Importing libraries
2024-12-12 17:38:51,130:INFO:Copying training dataset
2024-12-12 17:38:51,141:INFO:Defining folds
2024-12-12 17:38:51,143:INFO:Declaring metric variables
2024-12-12 17:38:51,164:INFO:Importing untrained model
2024-12-12 17:38:51,177:INFO:K Neighbors Regressor Imported successfully
2024-12-12 17:38:51,221:INFO:Starting cross validation
2024-12-12 17:38:51,229:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:52,341:INFO:Calculating mean and std
2024-12-12 17:38:52,343:INFO:Creating metrics dataframe
2024-12-12 17:38:52,352:INFO:Uploading results into container
2024-12-12 17:38:52,353:INFO:Uploading model into container now
2024-12-12 17:38:52,354:INFO:_master_model_container: 11
2024-12-12 17:38:52,354:INFO:_display_container: 2
2024-12-12 17:38:52,354:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-12 17:38:52,354:INFO:create_model() successfully completed......................................
2024-12-12 17:38:52,511:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:52,511:INFO:Creating metrics dataframe
2024-12-12 17:38:52,547:INFO:Initializing Decision Tree Regressor
2024-12-12 17:38:52,548:INFO:Total runtime is 1.1796708742777509 minutes
2024-12-12 17:38:52,558:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:52,558:INFO:Initializing create_model()
2024-12-12 17:38:52,560:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:52,560:INFO:Checking exceptions
2024-12-12 17:38:52,561:INFO:Importing libraries
2024-12-12 17:38:52,561:INFO:Copying training dataset
2024-12-12 17:38:52,577:INFO:Defining folds
2024-12-12 17:38:52,578:INFO:Declaring metric variables
2024-12-12 17:38:52,592:INFO:Importing untrained model
2024-12-12 17:38:52,607:INFO:Decision Tree Regressor Imported successfully
2024-12-12 17:38:52,650:INFO:Starting cross validation
2024-12-12 17:38:52,657:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:53,842:INFO:Calculating mean and std
2024-12-12 17:38:53,844:INFO:Creating metrics dataframe
2024-12-12 17:38:53,859:INFO:Uploading results into container
2024-12-12 17:38:53,861:INFO:Uploading model into container now
2024-12-12 17:38:53,861:INFO:_master_model_container: 12
2024-12-12 17:38:53,861:INFO:_display_container: 2
2024-12-12 17:38:53,862:INFO:DecisionTreeRegressor(random_state=123)
2024-12-12 17:38:53,862:INFO:create_model() successfully completed......................................
2024-12-12 17:38:54,025:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:54,025:INFO:Creating metrics dataframe
2024-12-12 17:38:54,047:INFO:Initializing Random Forest Regressor
2024-12-12 17:38:54,047:INFO:Total runtime is 1.204657848676046 minutes
2024-12-12 17:38:54,062:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:54,063:INFO:Initializing create_model()
2024-12-12 17:38:54,064:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:54,064:INFO:Checking exceptions
2024-12-12 17:38:54,064:INFO:Importing libraries
2024-12-12 17:38:54,065:INFO:Copying training dataset
2024-12-12 17:38:54,079:INFO:Defining folds
2024-12-12 17:38:54,080:INFO:Declaring metric variables
2024-12-12 17:38:54,095:INFO:Importing untrained model
2024-12-12 17:38:54,132:INFO:Random Forest Regressor Imported successfully
2024-12-12 17:38:54,154:INFO:Starting cross validation
2024-12-12 17:38:54,163:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:56,658:INFO:Calculating mean and std
2024-12-12 17:38:56,677:INFO:Creating metrics dataframe
2024-12-12 17:38:56,681:INFO:Uploading results into container
2024-12-12 17:38:56,684:INFO:Uploading model into container now
2024-12-12 17:38:56,685:INFO:_master_model_container: 13
2024-12-12 17:38:56,686:INFO:_display_container: 2
2024-12-12 17:38:56,686:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2024-12-12 17:38:56,686:INFO:create_model() successfully completed......................................
2024-12-12 17:38:56,893:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:56,893:INFO:Creating metrics dataframe
2024-12-12 17:38:56,916:INFO:Initializing Extra Trees Regressor
2024-12-12 17:38:56,916:INFO:Total runtime is 1.2524721225102744 minutes
2024-12-12 17:38:56,923:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:56,923:INFO:Initializing create_model()
2024-12-12 17:38:56,926:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:56,926:INFO:Checking exceptions
2024-12-12 17:38:56,927:INFO:Importing libraries
2024-12-12 17:38:56,927:INFO:Copying training dataset
2024-12-12 17:38:56,929:INFO:Defining folds
2024-12-12 17:38:56,929:INFO:Declaring metric variables
2024-12-12 17:38:56,945:INFO:Importing untrained model
2024-12-12 17:38:56,961:INFO:Extra Trees Regressor Imported successfully
2024-12-12 17:38:57,069:INFO:Starting cross validation
2024-12-12 17:38:57,079:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:38:59,341:INFO:Calculating mean and std
2024-12-12 17:38:59,342:INFO:Creating metrics dataframe
2024-12-12 17:38:59,342:INFO:Uploading results into container
2024-12-12 17:38:59,342:INFO:Uploading model into container now
2024-12-12 17:38:59,342:INFO:_master_model_container: 14
2024-12-12 17:38:59,342:INFO:_display_container: 2
2024-12-12 17:38:59,342:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2024-12-12 17:38:59,342:INFO:create_model() successfully completed......................................
2024-12-12 17:38:59,509:INFO:SubProcess create_model() end ==================================
2024-12-12 17:38:59,509:INFO:Creating metrics dataframe
2024-12-12 17:38:59,538:INFO:Initializing AdaBoost Regressor
2024-12-12 17:38:59,538:INFO:Total runtime is 1.296171307563782 minutes
2024-12-12 17:38:59,547:INFO:SubProcess create_model() called ==================================
2024-12-12 17:38:59,547:INFO:Initializing create_model()
2024-12-12 17:38:59,548:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:38:59,548:INFO:Checking exceptions
2024-12-12 17:38:59,548:INFO:Importing libraries
2024-12-12 17:38:59,550:INFO:Copying training dataset
2024-12-12 17:38:59,561:INFO:Defining folds
2024-12-12 17:38:59,561:INFO:Declaring metric variables
2024-12-12 17:38:59,567:INFO:Importing untrained model
2024-12-12 17:38:59,585:INFO:AdaBoost Regressor Imported successfully
2024-12-12 17:38:59,612:INFO:Starting cross validation
2024-12-12 17:38:59,616:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:39:01,191:INFO:Calculating mean and std
2024-12-12 17:39:01,192:INFO:Creating metrics dataframe
2024-12-12 17:39:01,195:INFO:Uploading results into container
2024-12-12 17:39:01,195:INFO:Uploading model into container now
2024-12-12 17:39:01,195:INFO:_master_model_container: 15
2024-12-12 17:39:01,195:INFO:_display_container: 2
2024-12-12 17:39:01,195:INFO:AdaBoostRegressor(random_state=123)
2024-12-12 17:39:01,195:INFO:create_model() successfully completed......................................
2024-12-12 17:39:01,358:INFO:SubProcess create_model() end ==================================
2024-12-12 17:39:01,358:INFO:Creating metrics dataframe
2024-12-12 17:39:01,382:INFO:Initializing Gradient Boosting Regressor
2024-12-12 17:39:01,384:INFO:Total runtime is 1.3269315322240196 minutes
2024-12-12 17:39:01,391:INFO:SubProcess create_model() called ==================================
2024-12-12 17:39:01,392:INFO:Initializing create_model()
2024-12-12 17:39:01,394:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:39:01,394:INFO:Checking exceptions
2024-12-12 17:39:01,395:INFO:Importing libraries
2024-12-12 17:39:01,395:INFO:Copying training dataset
2024-12-12 17:39:01,399:INFO:Defining folds
2024-12-12 17:39:01,399:INFO:Declaring metric variables
2024-12-12 17:39:01,413:INFO:Importing untrained model
2024-12-12 17:39:01,424:INFO:Gradient Boosting Regressor Imported successfully
2024-12-12 17:39:01,454:INFO:Starting cross validation
2024-12-12 17:39:01,460:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:39:03,258:INFO:Calculating mean and std
2024-12-12 17:39:03,259:INFO:Creating metrics dataframe
2024-12-12 17:39:03,263:INFO:Uploading results into container
2024-12-12 17:39:03,263:INFO:Uploading model into container now
2024-12-12 17:39:03,263:INFO:_master_model_container: 16
2024-12-12 17:39:03,263:INFO:_display_container: 2
2024-12-12 17:39:03,263:INFO:GradientBoostingRegressor(random_state=123)
2024-12-12 17:39:03,263:INFO:create_model() successfully completed......................................
2024-12-12 17:39:03,410:INFO:SubProcess create_model() end ==================================
2024-12-12 17:39:03,410:INFO:Creating metrics dataframe
2024-12-12 17:39:03,443:INFO:Initializing Light Gradient Boosting Machine
2024-12-12 17:39:03,443:INFO:Total runtime is 1.3612587690353395 minutes
2024-12-12 17:39:03,451:INFO:SubProcess create_model() called ==================================
2024-12-12 17:39:03,451:INFO:Initializing create_model()
2024-12-12 17:39:03,452:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:39:03,452:INFO:Checking exceptions
2024-12-12 17:39:03,452:INFO:Importing libraries
2024-12-12 17:39:03,452:INFO:Copying training dataset
2024-12-12 17:39:03,465:INFO:Defining folds
2024-12-12 17:39:03,465:INFO:Declaring metric variables
2024-12-12 17:39:03,469:INFO:Importing untrained model
2024-12-12 17:39:03,484:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-12 17:39:03,514:INFO:Starting cross validation
2024-12-12 17:39:03,519:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:39:05,971:INFO:Calculating mean and std
2024-12-12 17:39:05,971:INFO:Creating metrics dataframe
2024-12-12 17:39:05,971:INFO:Uploading results into container
2024-12-12 17:39:05,971:INFO:Uploading model into container now
2024-12-12 17:39:05,971:INFO:_master_model_container: 17
2024-12-12 17:39:05,971:INFO:_display_container: 2
2024-12-12 17:39:05,971:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2024-12-12 17:39:05,971:INFO:create_model() successfully completed......................................
2024-12-12 17:39:06,162:INFO:SubProcess create_model() end ==================================
2024-12-12 17:39:06,162:INFO:Creating metrics dataframe
2024-12-12 17:39:06,198:INFO:Initializing Dummy Regressor
2024-12-12 17:39:06,198:INFO:Total runtime is 1.4071816245714825 minutes
2024-12-12 17:39:06,207:INFO:SubProcess create_model() called ==================================
2024-12-12 17:39:06,209:INFO:Initializing create_model()
2024-12-12 17:39:06,209:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022890DB1C00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:39:06,209:INFO:Checking exceptions
2024-12-12 17:39:06,209:INFO:Importing libraries
2024-12-12 17:39:06,210:INFO:Copying training dataset
2024-12-12 17:39:06,219:INFO:Defining folds
2024-12-12 17:39:06,219:INFO:Declaring metric variables
2024-12-12 17:39:06,233:INFO:Importing untrained model
2024-12-12 17:39:06,244:INFO:Dummy Regressor Imported successfully
2024-12-12 17:39:06,271:INFO:Starting cross validation
2024-12-12 17:39:06,280:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 17:39:07,142:INFO:Calculating mean and std
2024-12-12 17:39:07,143:INFO:Creating metrics dataframe
2024-12-12 17:39:07,144:INFO:Uploading results into container
2024-12-12 17:39:07,144:INFO:Uploading model into container now
2024-12-12 17:39:07,144:INFO:_master_model_container: 18
2024-12-12 17:39:07,144:INFO:_display_container: 2
2024-12-12 17:39:07,144:INFO:DummyRegressor()
2024-12-12 17:39:07,144:INFO:create_model() successfully completed......................................
2024-12-12 17:39:07,293:INFO:SubProcess create_model() end ==================================
2024-12-12 17:39:07,293:INFO:Creating metrics dataframe
2024-12-12 17:39:08,220:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-12 17:39:08,270:INFO:Initializing create_model()
2024-12-12 17:39:08,272:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 17:39:08,272:INFO:Checking exceptions
2024-12-12 17:39:08,281:INFO:Importing libraries
2024-12-12 17:39:08,281:INFO:Copying training dataset
2024-12-12 17:39:08,332:INFO:Defining folds
2024-12-12 17:39:08,333:INFO:Declaring metric variables
2024-12-12 17:39:08,333:INFO:Importing untrained model
2024-12-12 17:39:08,333:INFO:Declaring custom model
2024-12-12 17:39:08,337:INFO:Bayesian Ridge Imported successfully
2024-12-12 17:39:08,345:INFO:Cross validation set to False
2024-12-12 17:39:08,346:INFO:Fitting Model
2024-12-12 17:39:08,648:INFO:BayesianRidge()
2024-12-12 17:39:08,648:INFO:create_model() successfully completed......................................
2024-12-12 17:39:09,163:INFO:_master_model_container: 18
2024-12-12 17:39:09,163:INFO:_display_container: 2
2024-12-12 17:39:09,163:INFO:BayesianRidge()
2024-12-12 17:39:09,163:INFO:compare_models() successfully completed......................................
2024-12-12 18:02:23,419:INFO:Initializing tune_model()
2024-12-12 18:02:23,419:INFO:tune_model(estimator=best, fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>)
2024-12-12 18:02:23,419:INFO:Checking exceptions
2024-12-12 18:02:33,822:INFO:Initializing tune_model()
2024-12-12 18:02:33,822:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>)
2024-12-12 18:02:33,822:INFO:Checking exceptions
2024-12-12 18:02:33,913:INFO:Copying training dataset
2024-12-12 18:02:33,924:INFO:Checking base model
2024-12-12 18:02:33,924:INFO:Base model : Bayesian Ridge
2024-12-12 18:02:33,943:INFO:Declaring metric variables
2024-12-12 18:02:33,963:INFO:Defining Hyperparameters
2024-12-12 18:02:34,385:INFO:Tuning with n_jobs=-1
2024-12-12 18:02:34,386:INFO:Initializing RandomizedSearchCV
2024-12-12 18:03:35,867:INFO:best_params: {'actual_estimator__lambda_2': 1e-07, 'actual_estimator__lambda_1': 0.0005, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 0.2, 'actual_estimator__alpha_1': 0.1}
2024-12-12 18:03:35,871:INFO:Hyperparameter search completed
2024-12-12 18:03:35,876:INFO:SubProcess create_model() called ==================================
2024-12-12 18:03:35,885:INFO:Initializing create_model()
2024-12-12 18:03:35,886:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022899166DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 1e-07, 'lambda_1': 0.0005, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 0.2, 'alpha_1': 0.1})
2024-12-12 18:03:35,886:INFO:Checking exceptions
2024-12-12 18:03:35,890:INFO:Importing libraries
2024-12-12 18:03:35,893:INFO:Copying training dataset
2024-12-12 18:03:35,929:INFO:Defining folds
2024-12-12 18:03:35,929:INFO:Declaring metric variables
2024-12-12 18:03:35,945:INFO:Importing untrained model
2024-12-12 18:03:35,946:INFO:Declaring custom model
2024-12-12 18:03:35,960:INFO:Bayesian Ridge Imported successfully
2024-12-12 18:03:35,993:INFO:Starting cross validation
2024-12-12 18:03:35,999:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 18:03:38,942:INFO:Calculating mean and std
2024-12-12 18:03:38,945:INFO:Creating metrics dataframe
2024-12-12 18:03:38,965:INFO:Finalizing model
2024-12-12 18:03:39,710:INFO:Uploading results into container
2024-12-12 18:03:39,716:INFO:Uploading model into container now
2024-12-12 18:03:39,717:INFO:_master_model_container: 19
2024-12-12 18:03:39,718:INFO:_display_container: 3
2024-12-12 18:03:39,719:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07)
2024-12-12 18:03:39,720:INFO:create_model() successfully completed......................................
2024-12-12 18:03:39,943:INFO:SubProcess create_model() end ==================================
2024-12-12 18:03:39,943:INFO:choose_better activated
2024-12-12 18:03:39,950:INFO:SubProcess create_model() called ==================================
2024-12-12 18:03:39,951:INFO:Initializing create_model()
2024-12-12 18:03:39,951:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000228941E3880>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-12 18:03:39,952:INFO:Checking exceptions
2024-12-12 18:03:39,959:INFO:Importing libraries
2024-12-12 18:03:39,960:INFO:Copying training dataset
2024-12-12 18:03:39,960:INFO:Defining folds
2024-12-12 18:03:39,960:INFO:Declaring metric variables
2024-12-12 18:03:39,960:INFO:Importing untrained model
2024-12-12 18:03:39,960:INFO:Declaring custom model
2024-12-12 18:03:39,960:INFO:Bayesian Ridge Imported successfully
2024-12-12 18:03:39,960:INFO:Starting cross validation
2024-12-12 18:03:39,960:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-12 18:03:40,775:INFO:Calculating mean and std
2024-12-12 18:03:40,776:INFO:Creating metrics dataframe
2024-12-12 18:03:40,781:INFO:Finalizing model
2024-12-12 18:03:40,878:INFO:Uploading results into container
2024-12-12 18:03:40,878:INFO:Uploading model into container now
2024-12-12 18:03:40,878:INFO:_master_model_container: 20
2024-12-12 18:03:40,878:INFO:_display_container: 4
2024-12-12 18:03:40,878:INFO:BayesianRidge()
2024-12-12 18:03:40,878:INFO:create_model() successfully completed......................................
2024-12-12 18:03:41,061:INFO:SubProcess create_model() end ==================================
2024-12-12 18:03:41,061:INFO:BayesianRidge() result for R2 is -0.2391
2024-12-12 18:03:41,061:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07) result for R2 is -0.2391
2024-12-12 18:03:41,061:INFO:BayesianRidge() is best model
2024-12-12 18:03:41,061:INFO:choose_better completed
2024-12-12 18:03:41,061:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-12-12 18:03:41,086:INFO:_master_model_container: 20
2024-12-12 18:03:41,086:INFO:_display_container: 3
2024-12-12 18:03:41,086:INFO:BayesianRidge()
2024-12-12 18:03:41,086:INFO:tune_model() successfully completed......................................
2024-12-14 19:00:17,143:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-14 19:00:17,232:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-14 19:00:17,233:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-14 19:00:17,233:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-14 19:00:23,732:INFO:PyCaret RegressionExperiment
2024-12-14 19:00:23,735:INFO:Logging name: reg-default-name
2024-12-14 19:00:23,735:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-14 19:00:23,736:INFO:version 3.3.2
2024-12-14 19:00:23,736:INFO:Initializing setup()
2024-12-14 19:00:23,737:INFO:self.USI: d28e
2024-12-14 19:00:23,738:INFO:self._variable_keys: {'exp_id', 'USI', 'y_test', 'X_train', 'y_train', 'seed', 'logging_param', 'idx', 'X_test', 'fold_generator', 'fold_groups_param', 'target_param', 'pipeline', 'data', 'gpu_param', 'fold_shuffle_param', 'exp_name_log', '_available_plots', '_ml_usecase', 'X', 'log_plots_param', 'n_jobs_param', 'gpu_n_jobs_param', 'html_param', 'memory', 'transform_target_param', 'y'}
2024-12-14 19:00:23,738:INFO:Checking environment
2024-12-14 19:00:23,738:INFO:python_version: 3.10.15
2024-12-14 19:00:23,738:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-14 19:00:23,738:INFO:machine: AMD64
2024-12-14 19:00:23,738:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-14 19:00:23,747:INFO:Memory: svmem(total=4207841280, available=639668224, percent=84.8, used=3568173056, free=639668224)
2024-12-14 19:00:23,747:INFO:Physical Core: 2
2024-12-14 19:00:23,748:INFO:Logical Core: 4
2024-12-14 19:00:23,748:INFO:Checking libraries
2024-12-14 19:00:23,748:INFO:System:
2024-12-14 19:00:23,748:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-14 19:00:23,749:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-14 19:00:23,749:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-14 19:00:23,749:INFO:PyCaret required dependencies:
2024-12-14 19:00:24,934:INFO:                 pip: 24.2
2024-12-14 19:00:24,934:INFO:          setuptools: 75.1.0
2024-12-14 19:00:24,934:INFO:             pycaret: 3.3.2
2024-12-14 19:00:24,934:INFO:             IPython: 8.29.0
2024-12-14 19:00:24,934:INFO:          ipywidgets: 8.1.5
2024-12-14 19:00:24,934:INFO:                tqdm: 4.67.0
2024-12-14 19:00:24,934:INFO:               numpy: 1.26.4
2024-12-14 19:00:24,934:INFO:              pandas: 2.1.4
2024-12-14 19:00:24,934:INFO:              jinja2: 3.1.4
2024-12-14 19:00:24,934:INFO:               scipy: 1.11.4
2024-12-14 19:00:24,934:INFO:              joblib: 1.3.2
2024-12-14 19:00:24,934:INFO:             sklearn: 1.4.2
2024-12-14 19:00:24,934:INFO:                pyod: 2.0.2
2024-12-14 19:00:24,934:INFO:            imblearn: 0.12.4
2024-12-14 19:00:24,934:INFO:   category_encoders: 2.6.4
2024-12-14 19:00:24,934:INFO:            lightgbm: 4.5.0
2024-12-14 19:00:24,934:INFO:               numba: 0.60.0
2024-12-14 19:00:24,934:INFO:            requests: 2.32.3
2024-12-14 19:00:24,934:INFO:          matplotlib: 3.7.5
2024-12-14 19:00:24,934:INFO:          scikitplot: 0.3.7
2024-12-14 19:00:24,934:INFO:         yellowbrick: 1.5
2024-12-14 19:00:24,934:INFO:              plotly: 5.24.1
2024-12-14 19:00:24,934:INFO:    plotly-resampler: Not installed
2024-12-14 19:00:24,934:INFO:             kaleido: 0.2.1
2024-12-14 19:00:24,934:INFO:           schemdraw: 0.15
2024-12-14 19:00:24,934:INFO:         statsmodels: 0.14.4
2024-12-14 19:00:24,934:INFO:              sktime: 0.26.0
2024-12-14 19:00:24,934:INFO:               tbats: 1.1.3
2024-12-14 19:00:24,934:INFO:            pmdarima: 2.0.4
2024-12-14 19:00:24,934:INFO:              psutil: 6.1.0
2024-12-14 19:00:24,934:INFO:          markupsafe: 3.0.2
2024-12-14 19:00:24,934:INFO:             pickle5: Not installed
2024-12-14 19:00:24,934:INFO:         cloudpickle: 3.1.0
2024-12-14 19:00:24,934:INFO:         deprecation: 2.1.0
2024-12-14 19:00:24,934:INFO:              xxhash: 3.5.0
2024-12-14 19:00:24,934:INFO:           wurlitzer: Not installed
2024-12-14 19:00:24,942:INFO:PyCaret optional dependencies:
2024-12-14 19:00:24,982:INFO:                shap: Not installed
2024-12-14 19:00:24,983:INFO:           interpret: Not installed
2024-12-14 19:00:24,983:INFO:                umap: Not installed
2024-12-14 19:00:24,983:INFO:     ydata_profiling: Not installed
2024-12-14 19:00:24,983:INFO:  explainerdashboard: Not installed
2024-12-14 19:00:24,983:INFO:             autoviz: Not installed
2024-12-14 19:00:24,983:INFO:           fairlearn: Not installed
2024-12-14 19:00:24,983:INFO:          deepchecks: Not installed
2024-12-14 19:00:24,983:INFO:             xgboost: Not installed
2024-12-14 19:00:24,983:INFO:            catboost: Not installed
2024-12-14 19:00:24,983:INFO:              kmodes: Not installed
2024-12-14 19:00:24,984:INFO:             mlxtend: Not installed
2024-12-14 19:00:24,984:INFO:       statsforecast: Not installed
2024-12-14 19:00:24,984:INFO:        tune_sklearn: Not installed
2024-12-14 19:00:24,984:INFO:                 ray: Not installed
2024-12-14 19:00:24,984:INFO:            hyperopt: Not installed
2024-12-14 19:00:24,984:INFO:              optuna: Not installed
2024-12-14 19:00:24,984:INFO:               skopt: Not installed
2024-12-14 19:00:24,984:INFO:              mlflow: Not installed
2024-12-14 19:00:24,984:INFO:              gradio: Not installed
2024-12-14 19:00:24,984:INFO:             fastapi: Not installed
2024-12-14 19:00:24,984:INFO:             uvicorn: Not installed
2024-12-14 19:00:24,984:INFO:              m2cgen: Not installed
2024-12-14 19:00:24,984:INFO:           evidently: Not installed
2024-12-14 19:00:24,984:INFO:               fugue: Not installed
2024-12-14 19:00:24,984:INFO:           streamlit: 1.40.1
2024-12-14 19:00:24,984:INFO:             prophet: Not installed
2024-12-14 19:00:24,984:INFO:None
2024-12-14 19:00:24,984:INFO:Set up data.
2024-12-14 19:00:25,562:INFO:Set up folding strategy.
2024-12-14 19:00:25,562:INFO:Set up train/test split.
2024-12-14 19:00:25,691:INFO:Set up index.
2024-12-14 19:00:25,718:INFO:Assigning column types.
2024-12-14 19:00:25,739:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-14 19:00:25,739:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-14 19:00:25,783:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:00:25,799:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,228:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,401:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,409:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,411:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,416:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,432:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,550:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,649:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,649:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-14 19:00:26,665:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,666:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,785:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,883:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:26,892:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:00:26,899:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,017:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,109:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,115:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,116:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-14 19:00:27,133:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,251:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,341:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,341:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,341:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,364:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,480:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,567:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,567:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,567:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,567:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-14 19:00:27,705:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,798:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:27,798:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,798:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:27,934:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:28,018:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:00:28,026:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,027:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,028:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-14 19:00:28,168:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:28,265:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,267:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,400:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:00:28,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,493:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,493:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-14 19:00:28,726:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,728:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,958:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,959:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:28,981:INFO:Preparing preprocessing pipeline...
2024-12-14 19:00:28,981:INFO:Set up simple imputation.
2024-12-14 19:00:29,141:INFO:Set up encoding of categorical features.
2024-12-14 19:00:29,141:INFO:Set up column name cleaning.
2024-12-14 19:00:30,554:INFO:Finished creating preprocessing pipeline.
2024-12-14 19:00:30,584:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Size (sqm)', 'Bedrooms',
                                             'Bathrooms',
                                             'Electricity (hours/day)'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=OneHotEncoder(cols=['Location',
                                                                    'Property '
                                                                    'Type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-14 19:00:30,585:INFO:Creating final display dataframe.
2024-12-14 19:00:31,313:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Price (₦)
2                   Target type        Regression
3           Original data shape           (84, 7)
4        Transformed data shape          (84, 15)
5   Transformed train set shape          (58, 15)
6    Transformed test set shape          (26, 15)
7              Numeric features                 4
8          Categorical features                 2
9      Rows with missing values              8.3%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              d28e
2024-12-14 19:00:31,666:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:31,666:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:31,936:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:31,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:00:31,936:INFO:setup() successfully completed in 9.43s...............
2024-12-14 19:00:31,967:INFO:Initializing compare_models()
2024-12-14 19:00:31,967:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, 'include': None, 'exclude': 'ransac', 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=ransac)
2024-12-14 19:00:31,967:INFO:Checking exceptions
2024-12-14 19:00:31,977:INFO:Preparing display monitor
2024-12-14 19:00:33,778:INFO:Initializing Linear Regression
2024-12-14 19:00:33,778:INFO:Total runtime is 0.0 minutes
2024-12-14 19:00:33,787:INFO:SubProcess create_model() called ==================================
2024-12-14 19:00:33,788:INFO:Initializing create_model()
2024-12-14 19:00:33,789:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:00:33,789:INFO:Checking exceptions
2024-12-14 19:00:33,791:INFO:Importing libraries
2024-12-14 19:00:33,792:INFO:Copying training dataset
2024-12-14 19:00:33,822:INFO:Defining folds
2024-12-14 19:00:33,822:INFO:Declaring metric variables
2024-12-14 19:00:33,836:INFO:Importing untrained model
2024-12-14 19:00:33,850:INFO:Linear Regression Imported successfully
2024-12-14 19:00:33,884:INFO:Starting cross validation
2024-12-14 19:00:33,984:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:12,326:INFO:Calculating mean and std
2024-12-14 19:01:12,330:INFO:Creating metrics dataframe
2024-12-14 19:01:12,352:INFO:Uploading results into container
2024-12-14 19:01:12,353:INFO:Uploading model into container now
2024-12-14 19:01:12,354:INFO:_master_model_container: 1
2024-12-14 19:01:12,354:INFO:_display_container: 2
2024-12-14 19:01:12,354:INFO:LinearRegression(n_jobs=-1)
2024-12-14 19:01:12,354:INFO:create_model() successfully completed......................................
2024-12-14 19:01:12,470:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:12,470:INFO:Creating metrics dataframe
2024-12-14 19:01:12,503:INFO:Initializing Lasso Regression
2024-12-14 19:01:12,504:INFO:Total runtime is 0.6454269488652548 minutes
2024-12-14 19:01:12,512:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:12,512:INFO:Initializing create_model()
2024-12-14 19:01:12,512:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:12,512:INFO:Checking exceptions
2024-12-14 19:01:12,512:INFO:Importing libraries
2024-12-14 19:01:12,512:INFO:Copying training dataset
2024-12-14 19:01:12,536:INFO:Defining folds
2024-12-14 19:01:12,537:INFO:Declaring metric variables
2024-12-14 19:01:12,553:INFO:Importing untrained model
2024-12-14 19:01:12,562:INFO:Lasso Regression Imported successfully
2024-12-14 19:01:12,585:INFO:Starting cross validation
2024-12-14 19:01:12,588:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:13,006:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.916e+14, tolerance: 6.764e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,006:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.070e+14, tolerance: 6.272e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,006:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.152e+14, tolerance: 6.605e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,313:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.624e+14, tolerance: 7.080e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,321:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.625e+13, tolerance: 6.745e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,321:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.381e+14, tolerance: 6.650e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,355:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.795e+14, tolerance: 6.151e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,558:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.509e+14, tolerance: 6.523e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,560:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.593e+14, tolerance: 6.609e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-14 19:01:13,642:INFO:Calculating mean and std
2024-12-14 19:01:13,644:INFO:Creating metrics dataframe
2024-12-14 19:01:13,656:INFO:Uploading results into container
2024-12-14 19:01:13,657:INFO:Uploading model into container now
2024-12-14 19:01:13,657:INFO:_master_model_container: 2
2024-12-14 19:01:13,657:INFO:_display_container: 2
2024-12-14 19:01:13,657:INFO:Lasso(random_state=123)
2024-12-14 19:01:13,657:INFO:create_model() successfully completed......................................
2024-12-14 19:01:13,760:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:13,760:INFO:Creating metrics dataframe
2024-12-14 19:01:14,722:INFO:Initializing Ridge Regression
2024-12-14 19:01:14,723:INFO:Total runtime is 0.6824082930882772 minutes
2024-12-14 19:01:14,745:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:14,754:INFO:Initializing create_model()
2024-12-14 19:01:14,755:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:14,755:INFO:Checking exceptions
2024-12-14 19:01:14,756:INFO:Importing libraries
2024-12-14 19:01:14,756:INFO:Copying training dataset
2024-12-14 19:01:14,780:INFO:Defining folds
2024-12-14 19:01:14,780:INFO:Declaring metric variables
2024-12-14 19:01:14,795:INFO:Importing untrained model
2024-12-14 19:01:14,815:INFO:Ridge Regression Imported successfully
2024-12-14 19:01:14,836:INFO:Starting cross validation
2024-12-14 19:01:14,841:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:15,658:INFO:Calculating mean and std
2024-12-14 19:01:15,660:INFO:Creating metrics dataframe
2024-12-14 19:01:15,666:INFO:Uploading results into container
2024-12-14 19:01:15,668:INFO:Uploading model into container now
2024-12-14 19:01:15,669:INFO:_master_model_container: 3
2024-12-14 19:01:15,673:INFO:_display_container: 2
2024-12-14 19:01:15,674:INFO:Ridge(random_state=123)
2024-12-14 19:01:15,674:INFO:create_model() successfully completed......................................
2024-12-14 19:01:15,783:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:15,783:INFO:Creating metrics dataframe
2024-12-14 19:01:15,800:INFO:Initializing Elastic Net
2024-12-14 19:01:15,800:INFO:Total runtime is 0.7003778020540874 minutes
2024-12-14 19:01:15,810:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:15,810:INFO:Initializing create_model()
2024-12-14 19:01:15,810:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:15,810:INFO:Checking exceptions
2024-12-14 19:01:15,811:INFO:Importing libraries
2024-12-14 19:01:15,811:INFO:Copying training dataset
2024-12-14 19:01:15,824:INFO:Defining folds
2024-12-14 19:01:15,824:INFO:Declaring metric variables
2024-12-14 19:01:15,836:INFO:Importing untrained model
2024-12-14 19:01:15,851:INFO:Elastic Net Imported successfully
2024-12-14 19:01:15,871:INFO:Starting cross validation
2024-12-14 19:01:15,876:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:16,702:INFO:Calculating mean and std
2024-12-14 19:01:16,704:INFO:Creating metrics dataframe
2024-12-14 19:01:16,707:INFO:Uploading results into container
2024-12-14 19:01:16,708:INFO:Uploading model into container now
2024-12-14 19:01:16,708:INFO:_master_model_container: 4
2024-12-14 19:01:16,708:INFO:_display_container: 2
2024-12-14 19:01:16,709:INFO:ElasticNet(random_state=123)
2024-12-14 19:01:16,709:INFO:create_model() successfully completed......................................
2024-12-14 19:01:16,819:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:16,821:INFO:Creating metrics dataframe
2024-12-14 19:01:16,845:INFO:Initializing Least Angle Regression
2024-12-14 19:01:16,846:INFO:Total runtime is 0.7178048928578695 minutes
2024-12-14 19:01:16,855:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:16,856:INFO:Initializing create_model()
2024-12-14 19:01:16,856:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:16,856:INFO:Checking exceptions
2024-12-14 19:01:16,856:INFO:Importing libraries
2024-12-14 19:01:16,856:INFO:Copying training dataset
2024-12-14 19:01:16,872:INFO:Defining folds
2024-12-14 19:01:16,872:INFO:Declaring metric variables
2024-12-14 19:01:16,883:INFO:Importing untrained model
2024-12-14 19:01:16,898:INFO:Least Angle Regression Imported successfully
2024-12-14 19:01:16,919:INFO:Starting cross validation
2024-12-14 19:01:16,925:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:19,760:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-14 19:01:19,766:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 13 iterations, i.e. alpha=1.778e+05, with an active set of 12 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-14 19:01:19,908:INFO:Calculating mean and std
2024-12-14 19:01:19,919:INFO:Creating metrics dataframe
2024-12-14 19:01:19,934:INFO:Uploading results into container
2024-12-14 19:01:19,935:INFO:Uploading model into container now
2024-12-14 19:01:19,935:INFO:_master_model_container: 5
2024-12-14 19:01:19,935:INFO:_display_container: 2
2024-12-14 19:01:19,935:INFO:Lars(random_state=123)
2024-12-14 19:01:19,935:INFO:create_model() successfully completed......................................
2024-12-14 19:01:20,052:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:20,052:INFO:Creating metrics dataframe
2024-12-14 19:01:20,072:INFO:Initializing Lasso Least Angle Regression
2024-12-14 19:01:20,072:INFO:Total runtime is 0.7715755303700765 minutes
2024-12-14 19:01:20,084:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:20,085:INFO:Initializing create_model()
2024-12-14 19:01:20,086:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:20,086:INFO:Checking exceptions
2024-12-14 19:01:20,086:INFO:Importing libraries
2024-12-14 19:01:20,086:INFO:Copying training dataset
2024-12-14 19:01:20,098:INFO:Defining folds
2024-12-14 19:01:20,098:INFO:Declaring metric variables
2024-12-14 19:01:20,115:INFO:Importing untrained model
2024-12-14 19:01:20,126:INFO:Lasso Least Angle Regression Imported successfully
2024-12-14 19:01:20,149:INFO:Starting cross validation
2024-12-14 19:01:20,152:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:20,921:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-14 19:01:20,922:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 12 iterations, alpha=2.141e+05, previous alpha=1.778e+05, with an active set of 11 regressors.
  warnings.warn(

2024-12-14 19:01:21,015:INFO:Calculating mean and std
2024-12-14 19:01:21,017:INFO:Creating metrics dataframe
2024-12-14 19:01:21,027:INFO:Uploading results into container
2024-12-14 19:01:21,030:INFO:Uploading model into container now
2024-12-14 19:01:21,032:INFO:_master_model_container: 6
2024-12-14 19:01:21,033:INFO:_display_container: 2
2024-12-14 19:01:21,033:INFO:LassoLars(random_state=123)
2024-12-14 19:01:21,033:INFO:create_model() successfully completed......................................
2024-12-14 19:01:21,135:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:21,135:INFO:Creating metrics dataframe
2024-12-14 19:01:21,158:INFO:Initializing Orthogonal Matching Pursuit
2024-12-14 19:01:21,158:INFO:Total runtime is 0.7896638830502828 minutes
2024-12-14 19:01:21,216:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:21,216:INFO:Initializing create_model()
2024-12-14 19:01:21,224:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:21,224:INFO:Checking exceptions
2024-12-14 19:01:21,224:INFO:Importing libraries
2024-12-14 19:01:21,224:INFO:Copying training dataset
2024-12-14 19:01:21,241:INFO:Defining folds
2024-12-14 19:01:21,241:INFO:Declaring metric variables
2024-12-14 19:01:21,291:INFO:Importing untrained model
2024-12-14 19:01:21,317:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-14 19:01:21,372:INFO:Starting cross validation
2024-12-14 19:01:21,380:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:22,196:INFO:Calculating mean and std
2024-12-14 19:01:22,198:INFO:Creating metrics dataframe
2024-12-14 19:01:22,201:INFO:Uploading results into container
2024-12-14 19:01:22,203:INFO:Uploading model into container now
2024-12-14 19:01:22,203:INFO:_master_model_container: 7
2024-12-14 19:01:22,203:INFO:_display_container: 2
2024-12-14 19:01:22,204:INFO:OrthogonalMatchingPursuit()
2024-12-14 19:01:22,204:INFO:create_model() successfully completed......................................
2024-12-14 19:01:22,307:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:22,307:INFO:Creating metrics dataframe
2024-12-14 19:01:22,326:INFO:Initializing Bayesian Ridge
2024-12-14 19:01:22,327:INFO:Total runtime is 0.8091601332028707 minutes
2024-12-14 19:01:22,341:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:22,341:INFO:Initializing create_model()
2024-12-14 19:01:22,341:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:22,341:INFO:Checking exceptions
2024-12-14 19:01:22,341:INFO:Importing libraries
2024-12-14 19:01:22,341:INFO:Copying training dataset
2024-12-14 19:01:22,356:INFO:Defining folds
2024-12-14 19:01:22,356:INFO:Declaring metric variables
2024-12-14 19:01:22,367:INFO:Importing untrained model
2024-12-14 19:01:22,379:INFO:Bayesian Ridge Imported successfully
2024-12-14 19:01:22,401:INFO:Starting cross validation
2024-12-14 19:01:22,405:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:24,013:INFO:Calculating mean and std
2024-12-14 19:01:24,016:INFO:Creating metrics dataframe
2024-12-14 19:01:24,019:INFO:Uploading results into container
2024-12-14 19:01:24,020:INFO:Uploading model into container now
2024-12-14 19:01:24,021:INFO:_master_model_container: 8
2024-12-14 19:01:24,021:INFO:_display_container: 2
2024-12-14 19:01:24,021:INFO:BayesianRidge()
2024-12-14 19:01:24,021:INFO:create_model() successfully completed......................................
2024-12-14 19:01:24,127:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:24,127:INFO:Creating metrics dataframe
2024-12-14 19:01:24,156:INFO:Initializing Passive Aggressive Regressor
2024-12-14 19:01:24,156:INFO:Total runtime is 0.8396425604820252 minutes
2024-12-14 19:01:24,167:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:24,169:INFO:Initializing create_model()
2024-12-14 19:01:24,169:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:24,170:INFO:Checking exceptions
2024-12-14 19:01:24,170:INFO:Importing libraries
2024-12-14 19:01:24,170:INFO:Copying training dataset
2024-12-14 19:01:24,182:INFO:Defining folds
2024-12-14 19:01:24,184:INFO:Declaring metric variables
2024-12-14 19:01:24,201:INFO:Importing untrained model
2024-12-14 19:01:24,209:INFO:Passive Aggressive Regressor Imported successfully
2024-12-14 19:01:24,234:INFO:Starting cross validation
2024-12-14 19:01:24,239:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:25,906:INFO:Calculating mean and std
2024-12-14 19:01:25,908:INFO:Creating metrics dataframe
2024-12-14 19:01:25,914:INFO:Uploading results into container
2024-12-14 19:01:25,914:INFO:Uploading model into container now
2024-12-14 19:01:25,921:INFO:_master_model_container: 9
2024-12-14 19:01:25,921:INFO:_display_container: 2
2024-12-14 19:01:25,921:INFO:PassiveAggressiveRegressor(random_state=123)
2024-12-14 19:01:25,921:INFO:create_model() successfully completed......................................
2024-12-14 19:01:26,015:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:26,015:INFO:Creating metrics dataframe
2024-12-14 19:01:26,042:INFO:Initializing Huber Regressor
2024-12-14 19:01:26,042:INFO:Total runtime is 0.8710758487383525 minutes
2024-12-14 19:01:26,052:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:26,053:INFO:Initializing create_model()
2024-12-14 19:01:26,053:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:26,054:INFO:Checking exceptions
2024-12-14 19:01:26,054:INFO:Importing libraries
2024-12-14 19:01:26,055:INFO:Copying training dataset
2024-12-14 19:01:26,069:INFO:Defining folds
2024-12-14 19:01:26,069:INFO:Declaring metric variables
2024-12-14 19:01:26,076:INFO:Importing untrained model
2024-12-14 19:01:26,091:INFO:Huber Regressor Imported successfully
2024-12-14 19:01:26,108:INFO:Starting cross validation
2024-12-14 19:01:26,111:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:27,859:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-14 19:01:28,253:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-14 19:01:28,470:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-14 19:01:28,546:INFO:Calculating mean and std
2024-12-14 19:01:28,550:INFO:Creating metrics dataframe
2024-12-14 19:01:28,553:INFO:Uploading results into container
2024-12-14 19:01:28,553:INFO:Uploading model into container now
2024-12-14 19:01:28,554:INFO:_master_model_container: 10
2024-12-14 19:01:28,554:INFO:_display_container: 2
2024-12-14 19:01:28,554:INFO:HuberRegressor()
2024-12-14 19:01:28,554:INFO:create_model() successfully completed......................................
2024-12-14 19:01:28,663:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:28,664:INFO:Creating metrics dataframe
2024-12-14 19:01:28,690:INFO:Initializing K Neighbors Regressor
2024-12-14 19:01:28,690:INFO:Total runtime is 0.9151974201202393 minutes
2024-12-14 19:01:28,709:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:28,709:INFO:Initializing create_model()
2024-12-14 19:01:28,709:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:28,709:INFO:Checking exceptions
2024-12-14 19:01:28,709:INFO:Importing libraries
2024-12-14 19:01:28,709:INFO:Copying training dataset
2024-12-14 19:01:28,724:INFO:Defining folds
2024-12-14 19:01:28,724:INFO:Declaring metric variables
2024-12-14 19:01:28,735:INFO:Importing untrained model
2024-12-14 19:01:28,751:INFO:K Neighbors Regressor Imported successfully
2024-12-14 19:01:28,770:INFO:Starting cross validation
2024-12-14 19:01:28,775:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:30,273:INFO:Calculating mean and std
2024-12-14 19:01:30,275:INFO:Creating metrics dataframe
2024-12-14 19:01:30,283:INFO:Uploading results into container
2024-12-14 19:01:30,287:INFO:Uploading model into container now
2024-12-14 19:01:30,288:INFO:_master_model_container: 11
2024-12-14 19:01:30,288:INFO:_display_container: 2
2024-12-14 19:01:30,288:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-14 19:01:30,288:INFO:create_model() successfully completed......................................
2024-12-14 19:01:30,384:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:30,384:INFO:Creating metrics dataframe
2024-12-14 19:01:30,414:INFO:Initializing Decision Tree Regressor
2024-12-14 19:01:30,414:INFO:Total runtime is 0.9439331809679667 minutes
2024-12-14 19:01:30,421:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:30,422:INFO:Initializing create_model()
2024-12-14 19:01:30,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:30,423:INFO:Checking exceptions
2024-12-14 19:01:30,424:INFO:Importing libraries
2024-12-14 19:01:30,425:INFO:Copying training dataset
2024-12-14 19:01:30,435:INFO:Defining folds
2024-12-14 19:01:30,435:INFO:Declaring metric variables
2024-12-14 19:01:30,441:INFO:Importing untrained model
2024-12-14 19:01:30,458:INFO:Decision Tree Regressor Imported successfully
2024-12-14 19:01:30,482:INFO:Starting cross validation
2024-12-14 19:01:30,487:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:32,143:INFO:Calculating mean and std
2024-12-14 19:01:32,148:INFO:Creating metrics dataframe
2024-12-14 19:01:32,157:INFO:Uploading results into container
2024-12-14 19:01:32,157:INFO:Uploading model into container now
2024-12-14 19:01:32,157:INFO:_master_model_container: 12
2024-12-14 19:01:32,157:INFO:_display_container: 2
2024-12-14 19:01:32,157:INFO:DecisionTreeRegressor(random_state=123)
2024-12-14 19:01:32,157:INFO:create_model() successfully completed......................................
2024-12-14 19:01:32,267:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:32,267:INFO:Creating metrics dataframe
2024-12-14 19:01:32,289:INFO:Initializing Random Forest Regressor
2024-12-14 19:01:32,289:INFO:Total runtime is 0.9751925826072693 minutes
2024-12-14 19:01:32,295:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:32,301:INFO:Initializing create_model()
2024-12-14 19:01:32,302:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:32,302:INFO:Checking exceptions
2024-12-14 19:01:32,302:INFO:Importing libraries
2024-12-14 19:01:32,303:INFO:Copying training dataset
2024-12-14 19:01:32,316:INFO:Defining folds
2024-12-14 19:01:32,316:INFO:Declaring metric variables
2024-12-14 19:01:32,329:INFO:Importing untrained model
2024-12-14 19:01:32,341:INFO:Random Forest Regressor Imported successfully
2024-12-14 19:01:32,363:INFO:Starting cross validation
2024-12-14 19:01:32,370:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:34,865:INFO:Calculating mean and std
2024-12-14 19:01:34,880:INFO:Creating metrics dataframe
2024-12-14 19:01:34,885:INFO:Uploading results into container
2024-12-14 19:01:34,885:INFO:Uploading model into container now
2024-12-14 19:01:34,885:INFO:_master_model_container: 13
2024-12-14 19:01:34,885:INFO:_display_container: 2
2024-12-14 19:01:34,885:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2024-12-14 19:01:34,885:INFO:create_model() successfully completed......................................
2024-12-14 19:01:34,982:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:34,982:INFO:Creating metrics dataframe
2024-12-14 19:01:35,009:INFO:Initializing Extra Trees Regressor
2024-12-14 19:01:35,009:INFO:Total runtime is 1.0205156207084656 minutes
2024-12-14 19:01:35,019:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:35,020:INFO:Initializing create_model()
2024-12-14 19:01:35,020:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:35,021:INFO:Checking exceptions
2024-12-14 19:01:35,021:INFO:Importing libraries
2024-12-14 19:01:35,021:INFO:Copying training dataset
2024-12-14 19:01:35,032:INFO:Defining folds
2024-12-14 19:01:35,032:INFO:Declaring metric variables
2024-12-14 19:01:35,038:INFO:Importing untrained model
2024-12-14 19:01:35,051:INFO:Extra Trees Regressor Imported successfully
2024-12-14 19:01:35,086:INFO:Starting cross validation
2024-12-14 19:01:35,092:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:37,057:INFO:Calculating mean and std
2024-12-14 19:01:37,058:INFO:Creating metrics dataframe
2024-12-14 19:01:37,058:INFO:Uploading results into container
2024-12-14 19:01:37,064:INFO:Uploading model into container now
2024-12-14 19:01:37,065:INFO:_master_model_container: 14
2024-12-14 19:01:37,065:INFO:_display_container: 2
2024-12-14 19:01:37,066:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2024-12-14 19:01:37,066:INFO:create_model() successfully completed......................................
2024-12-14 19:01:37,165:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:37,165:INFO:Creating metrics dataframe
2024-12-14 19:01:37,200:INFO:Initializing AdaBoost Regressor
2024-12-14 19:01:37,200:INFO:Total runtime is 1.0570353984832763 minutes
2024-12-14 19:01:37,206:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:37,207:INFO:Initializing create_model()
2024-12-14 19:01:37,208:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:37,208:INFO:Checking exceptions
2024-12-14 19:01:37,209:INFO:Importing libraries
2024-12-14 19:01:37,209:INFO:Copying training dataset
2024-12-14 19:01:37,216:INFO:Defining folds
2024-12-14 19:01:37,216:INFO:Declaring metric variables
2024-12-14 19:01:37,232:INFO:Importing untrained model
2024-12-14 19:01:37,239:INFO:AdaBoost Regressor Imported successfully
2024-12-14 19:01:37,260:INFO:Starting cross validation
2024-12-14 19:01:37,270:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:39,822:INFO:Calculating mean and std
2024-12-14 19:01:39,822:INFO:Creating metrics dataframe
2024-12-14 19:01:39,822:INFO:Uploading results into container
2024-12-14 19:01:39,822:INFO:Uploading model into container now
2024-12-14 19:01:39,822:INFO:_master_model_container: 15
2024-12-14 19:01:39,822:INFO:_display_container: 2
2024-12-14 19:01:39,822:INFO:AdaBoostRegressor(random_state=123)
2024-12-14 19:01:39,822:INFO:create_model() successfully completed......................................
2024-12-14 19:01:39,934:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:39,934:INFO:Creating metrics dataframe
2024-12-14 19:01:39,956:INFO:Initializing Gradient Boosting Regressor
2024-12-14 19:01:39,956:INFO:Total runtime is 1.1029669404029845 minutes
2024-12-14 19:01:39,966:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:39,969:INFO:Initializing create_model()
2024-12-14 19:01:39,969:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:39,969:INFO:Checking exceptions
2024-12-14 19:01:39,970:INFO:Importing libraries
2024-12-14 19:01:39,970:INFO:Copying training dataset
2024-12-14 19:01:39,973:INFO:Defining folds
2024-12-14 19:01:39,973:INFO:Declaring metric variables
2024-12-14 19:01:39,987:INFO:Importing untrained model
2024-12-14 19:01:39,997:INFO:Gradient Boosting Regressor Imported successfully
2024-12-14 19:01:40,018:INFO:Starting cross validation
2024-12-14 19:01:40,022:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:42,808:INFO:Calculating mean and std
2024-12-14 19:01:42,809:INFO:Creating metrics dataframe
2024-12-14 19:01:42,814:INFO:Uploading results into container
2024-12-14 19:01:42,815:INFO:Uploading model into container now
2024-12-14 19:01:42,816:INFO:_master_model_container: 16
2024-12-14 19:01:42,816:INFO:_display_container: 2
2024-12-14 19:01:42,817:INFO:GradientBoostingRegressor(random_state=123)
2024-12-14 19:01:42,817:INFO:create_model() successfully completed......................................
2024-12-14 19:01:42,916:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:42,916:INFO:Creating metrics dataframe
2024-12-14 19:01:42,943:INFO:Initializing Light Gradient Boosting Machine
2024-12-14 19:01:42,943:INFO:Total runtime is 1.1527512907981872 minutes
2024-12-14 19:01:42,954:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:42,954:INFO:Initializing create_model()
2024-12-14 19:01:42,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:42,954:INFO:Checking exceptions
2024-12-14 19:01:42,955:INFO:Importing libraries
2024-12-14 19:01:42,955:INFO:Copying training dataset
2024-12-14 19:01:42,968:INFO:Defining folds
2024-12-14 19:01:42,968:INFO:Declaring metric variables
2024-12-14 19:01:42,973:INFO:Importing untrained model
2024-12-14 19:01:42,984:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-14 19:01:43,003:INFO:Starting cross validation
2024-12-14 19:01:43,009:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:45,644:INFO:Calculating mean and std
2024-12-14 19:01:45,646:INFO:Creating metrics dataframe
2024-12-14 19:01:45,646:INFO:Uploading results into container
2024-12-14 19:01:45,655:INFO:Uploading model into container now
2024-12-14 19:01:45,656:INFO:_master_model_container: 17
2024-12-14 19:01:45,656:INFO:_display_container: 2
2024-12-14 19:01:45,656:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2024-12-14 19:01:45,656:INFO:create_model() successfully completed......................................
2024-12-14 19:01:45,782:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:45,782:INFO:Creating metrics dataframe
2024-12-14 19:01:45,804:INFO:Initializing Dummy Regressor
2024-12-14 19:01:45,804:INFO:Total runtime is 1.2004376371701557 minutes
2024-12-14 19:01:45,811:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:45,815:INFO:Initializing create_model()
2024-12-14 19:01:45,815:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024877D7B550>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:45,815:INFO:Checking exceptions
2024-12-14 19:01:45,815:INFO:Importing libraries
2024-12-14 19:01:45,816:INFO:Copying training dataset
2024-12-14 19:01:45,822:INFO:Defining folds
2024-12-14 19:01:45,822:INFO:Declaring metric variables
2024-12-14 19:01:45,834:INFO:Importing untrained model
2024-12-14 19:01:45,842:INFO:Dummy Regressor Imported successfully
2024-12-14 19:01:45,861:INFO:Starting cross validation
2024-12-14 19:01:45,868:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:46,596:INFO:Calculating mean and std
2024-12-14 19:01:47,501:INFO:Creating metrics dataframe
2024-12-14 19:01:47,511:INFO:Uploading results into container
2024-12-14 19:01:47,517:INFO:Uploading model into container now
2024-12-14 19:01:47,518:INFO:_master_model_container: 18
2024-12-14 19:01:47,518:INFO:_display_container: 2
2024-12-14 19:01:47,519:INFO:DummyRegressor()
2024-12-14 19:01:47,519:INFO:create_model() successfully completed......................................
2024-12-14 19:01:47,666:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:47,666:INFO:Creating metrics dataframe
2024-12-14 19:01:47,890:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-14 19:01:47,953:INFO:Initializing create_model()
2024-12-14 19:01:47,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:47,955:INFO:Checking exceptions
2024-12-14 19:01:47,960:INFO:Importing libraries
2024-12-14 19:01:47,964:INFO:Copying training dataset
2024-12-14 19:01:47,969:INFO:Defining folds
2024-12-14 19:01:47,969:INFO:Declaring metric variables
2024-12-14 19:01:47,969:INFO:Importing untrained model
2024-12-14 19:01:47,969:INFO:Declaring custom model
2024-12-14 19:01:47,984:INFO:Bayesian Ridge Imported successfully
2024-12-14 19:01:47,985:INFO:Cross validation set to False
2024-12-14 19:01:47,985:INFO:Fitting Model
2024-12-14 19:01:48,169:INFO:BayesianRidge()
2024-12-14 19:01:48,169:INFO:create_model() successfully completed......................................
2024-12-14 19:01:48,366:INFO:_master_model_container: 18
2024-12-14 19:01:48,366:INFO:_display_container: 2
2024-12-14 19:01:48,367:INFO:BayesianRidge()
2024-12-14 19:01:48,367:INFO:compare_models() successfully completed......................................
2024-12-14 19:01:48,590:INFO:Initializing tune_model()
2024-12-14 19:01:48,590:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>)
2024-12-14 19:01:48,592:INFO:Checking exceptions
2024-12-14 19:01:48,674:INFO:Copying training dataset
2024-12-14 19:01:48,687:INFO:Checking base model
2024-12-14 19:01:48,687:INFO:Base model : Bayesian Ridge
2024-12-14 19:01:48,715:INFO:Declaring metric variables
2024-12-14 19:01:48,725:INFO:Defining Hyperparameters
2024-12-14 19:01:48,851:INFO:Tuning with n_jobs=-1
2024-12-14 19:01:48,851:INFO:Initializing RandomizedSearchCV
2024-12-14 19:01:56,214:INFO:best_params: {'actual_estimator__lambda_2': 1e-07, 'actual_estimator__lambda_1': 0.0005, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 0.2, 'actual_estimator__alpha_1': 0.1}
2024-12-14 19:01:56,219:INFO:Hyperparameter search completed
2024-12-14 19:01:56,220:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:56,221:INFO:Initializing create_model()
2024-12-14 19:01:56,221:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002480C516620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 1e-07, 'lambda_1': 0.0005, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 0.2, 'alpha_1': 0.1})
2024-12-14 19:01:56,222:INFO:Checking exceptions
2024-12-14 19:01:56,224:INFO:Importing libraries
2024-12-14 19:01:56,225:INFO:Copying training dataset
2024-12-14 19:01:56,233:INFO:Defining folds
2024-12-14 19:01:56,233:INFO:Declaring metric variables
2024-12-14 19:01:56,242:INFO:Importing untrained model
2024-12-14 19:01:56,242:INFO:Declaring custom model
2024-12-14 19:01:56,255:INFO:Bayesian Ridge Imported successfully
2024-12-14 19:01:56,274:INFO:Starting cross validation
2024-12-14 19:01:56,284:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:57,073:INFO:Calculating mean and std
2024-12-14 19:01:57,076:INFO:Creating metrics dataframe
2024-12-14 19:01:57,091:INFO:Finalizing model
2024-12-14 19:01:57,205:INFO:Uploading results into container
2024-12-14 19:01:57,208:INFO:Uploading model into container now
2024-12-14 19:01:57,209:INFO:_master_model_container: 19
2024-12-14 19:01:57,209:INFO:_display_container: 3
2024-12-14 19:01:57,211:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07)
2024-12-14 19:01:57,211:INFO:create_model() successfully completed......................................
2024-12-14 19:01:57,315:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:57,315:INFO:choose_better activated
2024-12-14 19:01:57,323:INFO:SubProcess create_model() called ==================================
2024-12-14 19:01:57,324:INFO:Initializing create_model()
2024-12-14 19:01:57,325:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:57,326:INFO:Checking exceptions
2024-12-14 19:01:57,331:INFO:Importing libraries
2024-12-14 19:01:57,332:INFO:Copying training dataset
2024-12-14 19:01:57,333:INFO:Defining folds
2024-12-14 19:01:57,333:INFO:Declaring metric variables
2024-12-14 19:01:57,333:INFO:Importing untrained model
2024-12-14 19:01:57,333:INFO:Declaring custom model
2024-12-14 19:01:57,333:INFO:Bayesian Ridge Imported successfully
2024-12-14 19:01:57,333:INFO:Starting cross validation
2024-12-14 19:01:57,343:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:01:58,099:INFO:Calculating mean and std
2024-12-14 19:01:58,100:INFO:Creating metrics dataframe
2024-12-14 19:01:58,101:INFO:Finalizing model
2024-12-14 19:01:58,200:INFO:Uploading results into container
2024-12-14 19:01:58,200:INFO:Uploading model into container now
2024-12-14 19:01:58,200:INFO:_master_model_container: 20
2024-12-14 19:01:58,200:INFO:_display_container: 4
2024-12-14 19:01:58,200:INFO:BayesianRidge()
2024-12-14 19:01:58,200:INFO:create_model() successfully completed......................................
2024-12-14 19:01:58,299:INFO:SubProcess create_model() end ==================================
2024-12-14 19:01:58,299:INFO:BayesianRidge() result for R2 is -0.2391
2024-12-14 19:01:58,299:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07) result for R2 is -0.2391
2024-12-14 19:01:58,299:INFO:BayesianRidge() is best model
2024-12-14 19:01:58,299:INFO:choose_better completed
2024-12-14 19:01:58,299:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-12-14 19:01:58,333:INFO:_master_model_container: 20
2024-12-14 19:01:58,333:INFO:_display_container: 3
2024-12-14 19:01:58,334:INFO:BayesianRidge()
2024-12-14 19:01:58,334:INFO:tune_model() successfully completed......................................
2024-12-14 19:01:59,390:INFO:Initializing create_model()
2024-12-14 19:01:59,390:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024877D79C00>, estimator=dummy, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-14 19:01:59,390:INFO:Checking exceptions
2024-12-14 19:01:59,508:INFO:Importing libraries
2024-12-14 19:01:59,508:INFO:Copying training dataset
2024-12-14 19:01:59,539:INFO:Defining folds
2024-12-14 19:01:59,540:INFO:Declaring metric variables
2024-12-14 19:01:59,575:INFO:Importing untrained model
2024-12-14 19:01:59,602:INFO:Dummy Regressor Imported successfully
2024-12-14 19:01:59,637:INFO:Starting cross validation
2024-12-14 19:01:59,644:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-14 19:02:00,482:INFO:Calculating mean and std
2024-12-14 19:02:00,485:INFO:Creating metrics dataframe
2024-12-14 19:02:00,495:INFO:Finalizing model
2024-12-14 19:02:00,634:INFO:Uploading results into container
2024-12-14 19:02:00,644:INFO:Uploading model into container now
2024-12-14 19:02:00,715:INFO:_master_model_container: 21
2024-12-14 19:02:00,715:INFO:_display_container: 4
2024-12-14 19:02:00,724:INFO:DummyRegressor()
2024-12-14 19:02:00,724:INFO:create_model() successfully completed......................................
2024-12-14 19:02:01,862:INFO:PyCaret RegressionExperiment
2024-12-14 19:02:01,862:INFO:Logging name: reg-default-name
2024-12-14 19:02:01,862:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-14 19:02:01,862:INFO:version 3.3.2
2024-12-14 19:02:01,862:INFO:Initializing setup()
2024-12-14 19:02:01,862:INFO:self.USI: 715e
2024-12-14 19:02:01,862:INFO:self._variable_keys: {'exp_id', 'USI', 'y_test', 'X_train', 'y_train', 'seed', 'logging_param', 'idx', 'X_test', 'fold_generator', 'fold_groups_param', 'target_param', 'pipeline', 'data', 'gpu_param', 'fold_shuffle_param', 'exp_name_log', '_available_plots', '_ml_usecase', 'X', 'log_plots_param', 'n_jobs_param', 'gpu_n_jobs_param', 'html_param', 'memory', 'transform_target_param', 'y'}
2024-12-14 19:02:01,862:INFO:Checking environment
2024-12-14 19:02:01,862:INFO:python_version: 3.10.15
2024-12-14 19:02:01,862:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-14 19:02:01,862:INFO:machine: AMD64
2024-12-14 19:02:01,862:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-14 19:02:01,871:INFO:Memory: svmem(total=4207841280, available=236134400, percent=94.4, used=3971706880, free=236134400)
2024-12-14 19:02:01,871:INFO:Physical Core: 2
2024-12-14 19:02:01,871:INFO:Logical Core: 4
2024-12-14 19:02:01,871:INFO:Checking libraries
2024-12-14 19:02:01,871:INFO:System:
2024-12-14 19:02:01,871:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-14 19:02:01,871:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-14 19:02:01,871:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-14 19:02:01,871:INFO:PyCaret required dependencies:
2024-12-14 19:02:01,871:INFO:                 pip: 24.2
2024-12-14 19:02:01,871:INFO:          setuptools: 75.1.0
2024-12-14 19:02:01,871:INFO:             pycaret: 3.3.2
2024-12-14 19:02:01,871:INFO:             IPython: 8.29.0
2024-12-14 19:02:01,871:INFO:          ipywidgets: 8.1.5
2024-12-14 19:02:01,871:INFO:                tqdm: 4.67.0
2024-12-14 19:02:01,871:INFO:               numpy: 1.26.4
2024-12-14 19:02:01,871:INFO:              pandas: 2.1.4
2024-12-14 19:02:01,871:INFO:              jinja2: 3.1.4
2024-12-14 19:02:01,871:INFO:               scipy: 1.11.4
2024-12-14 19:02:01,871:INFO:              joblib: 1.3.2
2024-12-14 19:02:01,871:INFO:             sklearn: 1.4.2
2024-12-14 19:02:01,871:INFO:                pyod: 2.0.2
2024-12-14 19:02:01,871:INFO:            imblearn: 0.12.4
2024-12-14 19:02:01,871:INFO:   category_encoders: 2.6.4
2024-12-14 19:02:01,871:INFO:            lightgbm: 4.5.0
2024-12-14 19:02:01,871:INFO:               numba: 0.60.0
2024-12-14 19:02:01,871:INFO:            requests: 2.32.3
2024-12-14 19:02:01,871:INFO:          matplotlib: 3.7.5
2024-12-14 19:02:01,871:INFO:          scikitplot: 0.3.7
2024-12-14 19:02:01,871:INFO:         yellowbrick: 1.5
2024-12-14 19:02:01,879:INFO:              plotly: 5.24.1
2024-12-14 19:02:01,879:INFO:    plotly-resampler: Not installed
2024-12-14 19:02:01,879:INFO:             kaleido: 0.2.1
2024-12-14 19:02:01,879:INFO:           schemdraw: 0.15
2024-12-14 19:02:01,879:INFO:         statsmodels: 0.14.4
2024-12-14 19:02:01,879:INFO:              sktime: 0.26.0
2024-12-14 19:02:01,879:INFO:               tbats: 1.1.3
2024-12-14 19:02:01,879:INFO:            pmdarima: 2.0.4
2024-12-14 19:02:01,879:INFO:              psutil: 6.1.0
2024-12-14 19:02:01,879:INFO:          markupsafe: 3.0.2
2024-12-14 19:02:01,879:INFO:             pickle5: Not installed
2024-12-14 19:02:01,879:INFO:         cloudpickle: 3.1.0
2024-12-14 19:02:01,879:INFO:         deprecation: 2.1.0
2024-12-14 19:02:01,879:INFO:              xxhash: 3.5.0
2024-12-14 19:02:01,879:INFO:           wurlitzer: Not installed
2024-12-14 19:02:01,879:INFO:PyCaret optional dependencies:
2024-12-14 19:02:01,879:INFO:                shap: Not installed
2024-12-14 19:02:01,879:INFO:           interpret: Not installed
2024-12-14 19:02:01,879:INFO:                umap: Not installed
2024-12-14 19:02:01,879:INFO:     ydata_profiling: Not installed
2024-12-14 19:02:01,879:INFO:  explainerdashboard: Not installed
2024-12-14 19:02:01,879:INFO:             autoviz: Not installed
2024-12-14 19:02:01,879:INFO:           fairlearn: Not installed
2024-12-14 19:02:01,879:INFO:          deepchecks: Not installed
2024-12-14 19:02:01,879:INFO:             xgboost: Not installed
2024-12-14 19:02:01,879:INFO:            catboost: Not installed
2024-12-14 19:02:01,879:INFO:              kmodes: Not installed
2024-12-14 19:02:01,879:INFO:             mlxtend: Not installed
2024-12-14 19:02:01,879:INFO:       statsforecast: Not installed
2024-12-14 19:02:01,879:INFO:        tune_sklearn: Not installed
2024-12-14 19:02:01,879:INFO:                 ray: Not installed
2024-12-14 19:02:01,879:INFO:            hyperopt: Not installed
2024-12-14 19:02:01,879:INFO:              optuna: Not installed
2024-12-14 19:02:01,879:INFO:               skopt: Not installed
2024-12-14 19:02:01,879:INFO:              mlflow: Not installed
2024-12-14 19:02:01,879:INFO:              gradio: Not installed
2024-12-14 19:02:01,879:INFO:             fastapi: Not installed
2024-12-14 19:02:01,879:INFO:             uvicorn: Not installed
2024-12-14 19:02:01,879:INFO:              m2cgen: Not installed
2024-12-14 19:02:01,879:INFO:           evidently: Not installed
2024-12-14 19:02:01,879:INFO:               fugue: Not installed
2024-12-14 19:02:01,879:INFO:           streamlit: 1.40.1
2024-12-14 19:02:01,896:INFO:             prophet: Not installed
2024-12-14 19:02:01,896:INFO:None
2024-12-14 19:02:01,896:INFO:Set up data.
2024-12-14 19:02:01,919:INFO:Set up folding strategy.
2024-12-14 19:02:01,919:INFO:Set up train/test split.
2024-12-14 19:02:01,927:INFO:Set up index.
2024-12-14 19:02:01,927:INFO:Assigning column types.
2024-12-14 19:02:01,960:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-14 19:02:01,961:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,004:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,015:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,131:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,215:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,224:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,224:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,235:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,250:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,365:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,448:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,448:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-14 19:02:02,465:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,465:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,585:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,682:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,682:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,682:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,698:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,699:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,826:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,916:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:02,916:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,916:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:02,916:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-14 19:02:02,931:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,046:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,133:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,133:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,150:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,274:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,363:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,366:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-14 19:02:03,494:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,582:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,582:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,724:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,810:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-14 19:02:03,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,816:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:03,817:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-14 19:02:03,947:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:04,032:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,174:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-14 19:02:04,257:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,257:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,257:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-14 19:02:04,481:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:04,715:INFO:Preparing preprocessing pipeline...
2024-12-14 19:02:04,715:INFO:Set up simple imputation.
2024-12-14 19:02:04,715:INFO:Set up encoding of categorical features.
2024-12-14 19:02:04,715:INFO:Set up column name cleaning.
2024-12-14 19:02:07,351:INFO:Finished creating preprocessing pipeline.
2024-12-14 19:02:07,365:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Size (sqm)', 'Bedrooms',
                                             'Bathrooms',
                                             'Electricity (hours/day)'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=OneHotEncoder(cols=['Location',
                                                                    'Property '
                                                                    'Type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-14 19:02:07,365:INFO:Creating final display dataframe.
2024-12-14 19:02:07,685:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Price (₦)
2                   Target type        Regression
3           Original data shape           (84, 7)
4        Transformed data shape          (84, 15)
5   Transformed train set shape          (58, 15)
6    Transformed test set shape          (26, 15)
7              Numeric features                 4
8          Categorical features                 2
9      Rows with missing values              8.3%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              715e
2024-12-14 19:02:07,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:07,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:08,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:08,199:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-14 19:02:08,199:INFO:setup() successfully completed in 6.41s...............
2024-12-15 11:14:21,392:INFO:PyCaret RegressionExperiment
2024-12-15 11:14:21,421:INFO:Logging name: reg-default-name
2024-12-15 11:14:21,422:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-15 11:14:21,422:INFO:version 3.3.2
2024-12-15 11:14:21,422:INFO:Initializing setup()
2024-12-15 11:14:21,423:INFO:self.USI: 169d
2024-12-15 11:14:21,423:INFO:self._variable_keys: {'exp_id', 'USI', 'y_test', 'X_train', 'y_train', 'seed', 'logging_param', 'idx', 'X_test', 'fold_generator', 'fold_groups_param', 'target_param', 'pipeline', 'data', 'gpu_param', 'fold_shuffle_param', 'exp_name_log', '_available_plots', '_ml_usecase', 'X', 'log_plots_param', 'n_jobs_param', 'gpu_n_jobs_param', 'html_param', 'memory', 'transform_target_param', 'y'}
2024-12-15 11:14:21,442:INFO:Checking environment
2024-12-15 11:14:21,443:INFO:python_version: 3.10.15
2024-12-15 11:14:21,443:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-15 11:14:21,444:INFO:machine: AMD64
2024-12-15 11:14:21,445:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-15 11:14:21,566:INFO:Memory: svmem(total=4207841280, available=275070976, percent=93.5, used=3932770304, free=275070976)
2024-12-15 11:14:21,567:INFO:Physical Core: 2
2024-12-15 11:14:21,567:INFO:Logical Core: 4
2024-12-15 11:14:21,644:INFO:Checking libraries
2024-12-15 11:14:21,647:INFO:System:
2024-12-15 11:14:21,648:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-15 11:14:21,648:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-15 11:14:21,649:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-15 11:14:21,649:INFO:PyCaret required dependencies:
2024-12-15 11:14:21,759:INFO:                 pip: 24.2
2024-12-15 11:14:21,759:INFO:          setuptools: 75.1.0
2024-12-15 11:14:21,760:INFO:             pycaret: 3.3.2
2024-12-15 11:14:21,760:INFO:             IPython: 8.29.0
2024-12-15 11:14:21,760:INFO:          ipywidgets: 8.1.5
2024-12-15 11:14:21,760:INFO:                tqdm: 4.67.0
2024-12-15 11:14:21,760:INFO:               numpy: 1.26.4
2024-12-15 11:14:21,760:INFO:              pandas: 2.1.4
2024-12-15 11:14:21,760:INFO:              jinja2: 3.1.4
2024-12-15 11:14:21,760:INFO:               scipy: 1.11.4
2024-12-15 11:14:21,760:INFO:              joblib: 1.3.2
2024-12-15 11:14:21,760:INFO:             sklearn: 1.4.2
2024-12-15 11:14:21,760:INFO:                pyod: 2.0.2
2024-12-15 11:14:21,760:INFO:            imblearn: 0.12.4
2024-12-15 11:14:21,760:INFO:   category_encoders: 2.6.4
2024-12-15 11:14:21,760:INFO:            lightgbm: 4.5.0
2024-12-15 11:14:21,760:INFO:               numba: 0.60.0
2024-12-15 11:14:21,760:INFO:            requests: 2.32.3
2024-12-15 11:14:21,760:INFO:          matplotlib: 3.7.5
2024-12-15 11:14:21,760:INFO:          scikitplot: 0.3.7
2024-12-15 11:14:21,760:INFO:         yellowbrick: 1.5
2024-12-15 11:14:21,760:INFO:              plotly: 5.24.1
2024-12-15 11:14:21,760:INFO:    plotly-resampler: Not installed
2024-12-15 11:14:21,760:INFO:             kaleido: 0.2.1
2024-12-15 11:14:21,760:INFO:           schemdraw: 0.15
2024-12-15 11:14:21,760:INFO:         statsmodels: 0.14.4
2024-12-15 11:14:21,760:INFO:              sktime: 0.26.0
2024-12-15 11:14:21,760:INFO:               tbats: 1.1.3
2024-12-15 11:14:21,760:INFO:            pmdarima: 2.0.4
2024-12-15 11:14:21,760:INFO:              psutil: 6.1.0
2024-12-15 11:14:21,760:INFO:          markupsafe: 3.0.2
2024-12-15 11:14:21,760:INFO:             pickle5: Not installed
2024-12-15 11:14:21,760:INFO:         cloudpickle: 3.1.0
2024-12-15 11:14:21,760:INFO:         deprecation: 2.1.0
2024-12-15 11:14:21,760:INFO:              xxhash: 3.5.0
2024-12-15 11:14:21,760:INFO:           wurlitzer: Not installed
2024-12-15 11:14:21,760:INFO:PyCaret optional dependencies:
2024-12-15 11:14:21,770:INFO:                shap: Not installed
2024-12-15 11:14:21,770:INFO:           interpret: Not installed
2024-12-15 11:14:21,773:INFO:                umap: Not installed
2024-12-15 11:14:21,773:INFO:     ydata_profiling: Not installed
2024-12-15 11:14:21,773:INFO:  explainerdashboard: Not installed
2024-12-15 11:14:21,774:INFO:             autoviz: Not installed
2024-12-15 11:14:21,774:INFO:           fairlearn: Not installed
2024-12-15 11:14:21,774:INFO:          deepchecks: Not installed
2024-12-15 11:14:21,775:INFO:             xgboost: Not installed
2024-12-15 11:14:21,775:INFO:            catboost: Not installed
2024-12-15 11:14:21,775:INFO:              kmodes: Not installed
2024-12-15 11:14:21,775:INFO:             mlxtend: Not installed
2024-12-15 11:14:21,776:INFO:       statsforecast: Not installed
2024-12-15 11:14:21,776:INFO:        tune_sklearn: Not installed
2024-12-15 11:14:21,776:INFO:                 ray: Not installed
2024-12-15 11:14:21,776:INFO:            hyperopt: Not installed
2024-12-15 11:14:21,776:INFO:              optuna: Not installed
2024-12-15 11:14:21,776:INFO:               skopt: Not installed
2024-12-15 11:14:21,776:INFO:              mlflow: Not installed
2024-12-15 11:14:21,776:INFO:              gradio: Not installed
2024-12-15 11:14:21,776:INFO:             fastapi: Not installed
2024-12-15 11:14:21,776:INFO:             uvicorn: Not installed
2024-12-15 11:14:21,776:INFO:              m2cgen: Not installed
2024-12-15 11:14:21,776:INFO:           evidently: Not installed
2024-12-15 11:14:21,776:INFO:               fugue: Not installed
2024-12-15 11:14:21,776:INFO:           streamlit: 1.40.1
2024-12-15 11:14:21,776:INFO:             prophet: Not installed
2024-12-15 11:14:21,776:INFO:None
2024-12-15 11:14:21,879:INFO:Set up data.
2024-12-15 11:14:24,163:INFO:Set up folding strategy.
2024-12-15 11:14:24,239:INFO:Set up train/test split.
2024-12-15 11:14:25,332:INFO:Set up index.
2024-12-15 11:14:25,377:INFO:Assigning column types.
2024-12-15 11:14:25,540:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-15 11:14:25,780:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-15 11:14:26,108:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-15 11:14:26,270:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:27,273:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:27,442:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,056:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,088:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,107:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,143:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,183:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,506:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,627:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,627:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,627:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,627:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-15 11:14:28,642:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,655:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,790:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,890:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,906:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:28,908:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-15 11:14:28,922:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,144:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,339:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,339:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:29,339:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:29,339:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-15 11:14:29,356:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,509:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,845:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:29,847:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:29,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:29,886:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-15 11:14:30,040:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:30,178:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:30,179:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:30,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:30,179:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-15 11:14:30,356:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:30,533:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:30,539:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:30,540:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:31,257:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:31,392:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:14:31,405:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:31,406:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:31,406:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-15 11:14:32,342:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:33,826:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:33,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:34,207:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-15 11:14:34,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:34,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:34,384:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-15 11:14:34,823:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:34,824:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:35,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:35,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:14:37,538:INFO:Preparing preprocessing pipeline...
2024-12-15 11:14:37,538:INFO:Set up simple imputation.
2024-12-15 11:38:11,880:INFO:PyCaret ClassificationExperiment
2024-12-15 11:38:11,880:INFO:Logging name: clf-default-name
2024-12-15 11:38:11,880:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-12-15 11:38:11,881:INFO:version 3.3.2
2024-12-15 11:38:11,881:INFO:Initializing setup()
2024-12-15 11:38:11,881:INFO:self.USI: 0c0d
2024-12-15 11:38:11,881:INFO:self._variable_keys: {'exp_id', 'USI', 'y_test', 'X_train', 'fix_imbalance', 'y_train', 'seed', 'is_multiclass', 'logging_param', 'idx', 'X_test', 'fold_generator', 'fold_groups_param', 'target_param', 'pipeline', 'data', 'gpu_param', 'fold_shuffle_param', 'exp_name_log', '_available_plots', '_ml_usecase', 'X', 'log_plots_param', 'n_jobs_param', 'gpu_n_jobs_param', 'html_param', 'memory', 'y'}
2024-12-15 11:38:11,881:INFO:Checking environment
2024-12-15 11:38:11,881:INFO:python_version: 3.10.15
2024-12-15 11:38:11,881:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-15 11:38:11,881:INFO:machine: AMD64
2024-12-15 11:38:11,881:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-15 11:38:11,898:INFO:Memory: svmem(total=4207841280, available=678117376, percent=83.9, used=3529723904, free=678117376)
2024-12-15 11:38:11,899:INFO:Physical Core: 2
2024-12-15 11:38:11,899:INFO:Logical Core: 4
2024-12-15 11:38:11,899:INFO:Checking libraries
2024-12-15 11:38:11,899:INFO:System:
2024-12-15 11:38:11,899:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-15 11:38:11,899:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-15 11:38:11,899:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-15 11:38:11,899:INFO:PyCaret required dependencies:
2024-12-15 11:38:11,899:INFO:                 pip: 24.2
2024-12-15 11:38:11,899:INFO:          setuptools: 75.1.0
2024-12-15 11:38:11,899:INFO:             pycaret: 3.3.2
2024-12-15 11:38:11,899:INFO:             IPython: 8.29.0
2024-12-15 11:38:11,899:INFO:          ipywidgets: 8.1.5
2024-12-15 11:38:11,899:INFO:                tqdm: 4.67.0
2024-12-15 11:38:11,899:INFO:               numpy: 1.26.4
2024-12-15 11:38:11,899:INFO:              pandas: 2.1.4
2024-12-15 11:38:11,899:INFO:              jinja2: 3.1.4
2024-12-15 11:38:11,899:INFO:               scipy: 1.11.4
2024-12-15 11:38:11,899:INFO:              joblib: 1.3.2
2024-12-15 11:38:11,899:INFO:             sklearn: 1.4.2
2024-12-15 11:38:11,899:INFO:                pyod: 2.0.2
2024-12-15 11:38:11,899:INFO:            imblearn: 0.12.4
2024-12-15 11:38:11,899:INFO:   category_encoders: 2.6.4
2024-12-15 11:38:11,899:INFO:            lightgbm: 4.5.0
2024-12-15 11:38:11,899:INFO:               numba: 0.60.0
2024-12-15 11:38:11,899:INFO:            requests: 2.32.3
2024-12-15 11:38:11,899:INFO:          matplotlib: 3.7.5
2024-12-15 11:38:11,899:INFO:          scikitplot: 0.3.7
2024-12-15 11:38:11,899:INFO:         yellowbrick: 1.5
2024-12-15 11:38:11,899:INFO:              plotly: 5.24.1
2024-12-15 11:38:11,899:INFO:    plotly-resampler: Not installed
2024-12-15 11:38:11,899:INFO:             kaleido: 0.2.1
2024-12-15 11:38:11,899:INFO:           schemdraw: 0.15
2024-12-15 11:38:11,899:INFO:         statsmodels: 0.14.4
2024-12-15 11:38:11,899:INFO:              sktime: 0.26.0
2024-12-15 11:38:11,899:INFO:               tbats: 1.1.3
2024-12-15 11:38:11,899:INFO:            pmdarima: 2.0.4
2024-12-15 11:38:11,899:INFO:              psutil: 6.1.0
2024-12-15 11:38:11,899:INFO:          markupsafe: 3.0.2
2024-12-15 11:38:11,899:INFO:             pickle5: Not installed
2024-12-15 11:38:11,899:INFO:         cloudpickle: 3.1.0
2024-12-15 11:38:11,899:INFO:         deprecation: 2.1.0
2024-12-15 11:38:11,899:INFO:              xxhash: 3.5.0
2024-12-15 11:38:11,899:INFO:           wurlitzer: Not installed
2024-12-15 11:38:11,899:INFO:PyCaret optional dependencies:
2024-12-15 11:38:11,899:INFO:                shap: Not installed
2024-12-15 11:38:11,899:INFO:           interpret: Not installed
2024-12-15 11:38:11,899:INFO:                umap: Not installed
2024-12-15 11:38:11,899:INFO:     ydata_profiling: Not installed
2024-12-15 11:38:11,899:INFO:  explainerdashboard: Not installed
2024-12-15 11:38:11,899:INFO:             autoviz: Not installed
2024-12-15 11:38:11,899:INFO:           fairlearn: Not installed
2024-12-15 11:38:11,899:INFO:          deepchecks: Not installed
2024-12-15 11:38:11,899:INFO:             xgboost: Not installed
2024-12-15 11:38:11,899:INFO:            catboost: Not installed
2024-12-15 11:38:11,899:INFO:              kmodes: Not installed
2024-12-15 11:38:11,899:INFO:             mlxtend: Not installed
2024-12-15 11:38:11,899:INFO:       statsforecast: Not installed
2024-12-15 11:38:11,899:INFO:        tune_sklearn: Not installed
2024-12-15 11:38:11,899:INFO:                 ray: Not installed
2024-12-15 11:38:11,899:INFO:            hyperopt: Not installed
2024-12-15 11:38:11,899:INFO:              optuna: Not installed
2024-12-15 11:38:11,899:INFO:               skopt: Not installed
2024-12-15 11:38:11,899:INFO:              mlflow: Not installed
2024-12-15 11:38:11,899:INFO:              gradio: Not installed
2024-12-15 11:38:11,899:INFO:             fastapi: Not installed
2024-12-15 11:38:11,899:INFO:             uvicorn: Not installed
2024-12-15 11:38:11,899:INFO:              m2cgen: Not installed
2024-12-15 11:38:11,899:INFO:           evidently: Not installed
2024-12-15 11:38:11,899:INFO:               fugue: Not installed
2024-12-15 11:38:11,899:INFO:           streamlit: 1.40.1
2024-12-15 11:38:11,899:INFO:             prophet: Not installed
2024-12-15 11:38:11,913:INFO:None
2024-12-15 11:38:11,913:INFO:Set up data.
2024-12-15 11:38:11,959:INFO:Set up folding strategy.
2024-12-15 11:38:11,959:INFO:Set up train/test split.
2024-12-15 11:38:12,160:INFO:Set up index.
2024-12-15 11:38:12,160:INFO:Assigning column types.
2024-12-15 11:38:12,198:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-15 11:38:12,396:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:38:12,560:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-15 11:38:12,864:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:12,864:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,126:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-15 11:38:13,126:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-15 11:38:13,206:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,207:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,207:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-15 11:38:13,292:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-15 11:38:13,342:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,342:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,443:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-15 11:38:13,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,489:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-12-15 11:38:13,643:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,793:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,793:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:13,805:INFO:Preparing preprocessing pipeline...
2024-12-15 11:38:13,839:INFO:Set up label encoding.
2024-12-15 11:38:13,840:INFO:Set up simple imputation.
2024-12-15 11:38:13,841:INFO:Set up encoding of categorical features.
2024-12-15 11:38:13,841:INFO:Set up column name cleaning.
2024-12-15 11:38:16,160:INFO:Finished creating preprocessing pipeline.
2024-12-15 11:38:16,225:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Price (₦)', 'Rental Yield (%)'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              k...
                 TransformerWrapper(exclude=None, include=['Property ID'],
                                    transformer=TargetEncoder(cols=['Property '
                                                                    'ID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-12-15 11:38:16,226:INFO:Creating final display dataframe.
2024-12-15 11:38:17,643:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         123
1                        Target           Suitability Score
2                   Target type                  Multiclass
3                Target mapping  High: 0, Low: 1, Medium: 2
4           Original data shape                     (80, 7)
5        Transformed data shape                    (80, 15)
6   Transformed train set shape                    (56, 15)
7    Transformed test set shape                    (24, 15)
8              Numeric features                           2
9          Categorical features                           4
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                       False
21              Experiment Name            clf-default-name
22                          USI                        0c0d
2024-12-15 11:38:17,976:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:17,977:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:18,126:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:18,126:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-15 11:38:18,126:INFO:setup() successfully completed in 6.31s...............
2024-12-15 11:38:18,227:INFO:Initializing compare_models()
2024-12-15 11:38:18,227:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-12-15 11:38:18,227:INFO:Checking exceptions
2024-12-15 11:38:18,245:INFO:Preparing display monitor
2024-12-15 11:38:18,401:INFO:Initializing Logistic Regression
2024-12-15 11:38:18,402:INFO:Total runtime is 1.6681353251139323e-05 minutes
2024-12-15 11:38:18,413:INFO:SubProcess create_model() called ==================================
2024-12-15 11:38:18,413:INFO:Initializing create_model()
2024-12-15 11:38:18,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:38:18,413:INFO:Checking exceptions
2024-12-15 11:38:18,414:INFO:Importing libraries
2024-12-15 11:38:18,414:INFO:Copying training dataset
2024-12-15 11:38:18,428:INFO:Defining folds
2024-12-15 11:38:18,428:INFO:Declaring metric variables
2024-12-15 11:38:18,441:INFO:Importing untrained model
2024-12-15 11:38:18,452:INFO:Logistic Regression Imported successfully
2024-12-15 11:38:18,478:INFO:Starting cross validation
2024-12-15 11:38:18,480:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:39:59,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:39:59,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:39:59,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:39:59,899:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:39:59,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:39:59,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:39:59,999:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:39:59,999:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,009:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,009:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,639:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:00,639:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,660:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,678:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,962:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,972:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,990:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:00,991:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:00,991:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:01,006:INFO:Calculating mean and std
2024-12-15 11:40:01,009:INFO:Creating metrics dataframe
2024-12-15 11:40:02,008:INFO:Uploading results into container
2024-12-15 11:40:02,018:INFO:Uploading model into container now
2024-12-15 11:40:02,024:INFO:_master_model_container: 1
2024-12-15 11:40:02,026:INFO:_display_container: 2
2024-12-15 11:40:02,037:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-15 11:40:02,037:INFO:create_model() successfully completed......................................
2024-12-15 11:40:06,051:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:06,051:INFO:Creating metrics dataframe
2024-12-15 11:40:06,151:INFO:Initializing K Neighbors Classifier
2024-12-15 11:40:06,151:INFO:Total runtime is 1.795842707157135 minutes
2024-12-15 11:40:06,168:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:06,174:INFO:Initializing create_model()
2024-12-15 11:40:06,175:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:06,175:INFO:Checking exceptions
2024-12-15 11:40:06,175:INFO:Importing libraries
2024-12-15 11:40:06,176:INFO:Copying training dataset
2024-12-15 11:40:06,191:INFO:Defining folds
2024-12-15 11:40:06,192:INFO:Declaring metric variables
2024-12-15 11:40:06,214:INFO:Importing untrained model
2024-12-15 11:40:06,235:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:40:06,265:INFO:Starting cross validation
2024-12-15 11:40:06,271:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:07,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,272:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,272:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,287:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,288:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,288:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,288:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:07,297:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,304:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,304:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,304:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,304:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:07,304:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,857:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,888:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,888:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,888:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,904:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,904:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,922:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,922:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,938:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:07,938:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:07,938:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,275:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,289:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,296:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:08,323:INFO:Calculating mean and std
2024-12-15 11:40:08,326:INFO:Creating metrics dataframe
2024-12-15 11:40:08,329:INFO:Uploading results into container
2024-12-15 11:40:08,330:INFO:Uploading model into container now
2024-12-15 11:40:08,330:INFO:_master_model_container: 2
2024-12-15 11:40:08,330:INFO:_display_container: 2
2024-12-15 11:40:08,331:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:40:08,331:INFO:create_model() successfully completed......................................
2024-12-15 11:40:08,465:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:08,466:INFO:Creating metrics dataframe
2024-12-15 11:40:08,495:INFO:Initializing Naive Bayes
2024-12-15 11:40:08,495:INFO:Total runtime is 1.834905497233073 minutes
2024-12-15 11:40:08,503:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:08,505:INFO:Initializing create_model()
2024-12-15 11:40:08,505:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:08,505:INFO:Checking exceptions
2024-12-15 11:40:08,505:INFO:Importing libraries
2024-12-15 11:40:08,505:INFO:Copying training dataset
2024-12-15 11:40:08,516:INFO:Defining folds
2024-12-15 11:40:08,516:INFO:Declaring metric variables
2024-12-15 11:40:08,529:INFO:Importing untrained model
2024-12-15 11:40:08,541:INFO:Naive Bayes Imported successfully
2024-12-15 11:40:08,557:INFO:Starting cross validation
2024-12-15 11:40:08,559:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:09,246:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,265:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,265:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,265:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,271:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,271:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,271:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,280:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,282:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,290:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,298:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,303:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,731:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,748:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,748:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,754:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,754:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,754:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,762:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,762:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,762:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,781:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,788:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,799:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:09,809:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:09,814:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,091:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,091:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,091:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,102:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:10,104:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,104:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,104:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:10,114:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:10,127:INFO:Calculating mean and std
2024-12-15 11:40:10,130:INFO:Creating metrics dataframe
2024-12-15 11:40:10,132:INFO:Uploading results into container
2024-12-15 11:40:10,134:INFO:Uploading model into container now
2024-12-15 11:40:10,135:INFO:_master_model_container: 3
2024-12-15 11:40:10,135:INFO:_display_container: 2
2024-12-15 11:40:10,136:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-12-15 11:40:10,137:INFO:create_model() successfully completed......................................
2024-12-15 11:40:10,286:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:10,287:INFO:Creating metrics dataframe
2024-12-15 11:40:10,304:INFO:Initializing Decision Tree Classifier
2024-12-15 11:40:10,304:INFO:Total runtime is 1.8650557398796082 minutes
2024-12-15 11:40:10,311:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:10,311:INFO:Initializing create_model()
2024-12-15 11:40:10,311:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:10,311:INFO:Checking exceptions
2024-12-15 11:40:10,312:INFO:Importing libraries
2024-12-15 11:40:10,312:INFO:Copying training dataset
2024-12-15 11:40:10,324:INFO:Defining folds
2024-12-15 11:40:10,324:INFO:Declaring metric variables
2024-12-15 11:40:10,331:INFO:Importing untrained model
2024-12-15 11:40:10,345:INFO:Decision Tree Classifier Imported successfully
2024-12-15 11:40:10,365:INFO:Starting cross validation
2024-12-15 11:40:10,369:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:11,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,124:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,834:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,850:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,852:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,870:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,870:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:11,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:11,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,175:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,175:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,175:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,175:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,188:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:12,190:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:12,193:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,195:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:12,205:INFO:Calculating mean and std
2024-12-15 11:40:12,209:INFO:Creating metrics dataframe
2024-12-15 11:40:12,212:INFO:Uploading results into container
2024-12-15 11:40:12,213:INFO:Uploading model into container now
2024-12-15 11:40:12,213:INFO:_master_model_container: 4
2024-12-15 11:40:12,213:INFO:_display_container: 2
2024-12-15 11:40:12,214:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-12-15 11:40:12,214:INFO:create_model() successfully completed......................................
2024-12-15 11:40:12,348:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:12,353:INFO:Creating metrics dataframe
2024-12-15 11:40:12,377:INFO:Initializing SVM - Linear Kernel
2024-12-15 11:40:12,377:INFO:Total runtime is 1.8996137181917827 minutes
2024-12-15 11:40:12,383:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:12,385:INFO:Initializing create_model()
2024-12-15 11:40:12,387:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:12,388:INFO:Checking exceptions
2024-12-15 11:40:12,389:INFO:Importing libraries
2024-12-15 11:40:12,389:INFO:Copying training dataset
2024-12-15 11:40:12,398:INFO:Defining folds
2024-12-15 11:40:12,399:INFO:Declaring metric variables
2024-12-15 11:40:12,409:INFO:Importing untrained model
2024-12-15 11:40:12,416:INFO:SVM - Linear Kernel Imported successfully
2024-12-15 11:40:12,433:INFO:Starting cross validation
2024-12-15 11:40:12,435:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:13,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,438:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,438:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,456:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,904:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,941:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,954:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,961:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,961:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,988:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,988:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:13,988:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,988:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:13,988:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:14,004:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,279:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:14,282:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,292:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,293:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:14,293:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,312:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:14,312:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,321:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,322:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:14,328:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:14,341:INFO:Calculating mean and std
2024-12-15 11:40:14,343:INFO:Creating metrics dataframe
2024-12-15 11:40:14,346:INFO:Uploading results into container
2024-12-15 11:40:14,347:INFO:Uploading model into container now
2024-12-15 11:40:14,347:INFO:_master_model_container: 5
2024-12-15 11:40:14,347:INFO:_display_container: 2
2024-12-15 11:40:14,348:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-12-15 11:40:14,348:INFO:create_model() successfully completed......................................
2024-12-15 11:40:14,495:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:14,495:INFO:Creating metrics dataframe
2024-12-15 11:40:14,543:INFO:Initializing Ridge Classifier
2024-12-15 11:40:14,543:INFO:Total runtime is 1.935709325472514 minutes
2024-12-15 11:40:14,551:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:14,554:INFO:Initializing create_model()
2024-12-15 11:40:14,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:14,556:INFO:Checking exceptions
2024-12-15 11:40:14,556:INFO:Importing libraries
2024-12-15 11:40:14,556:INFO:Copying training dataset
2024-12-15 11:40:14,563:INFO:Defining folds
2024-12-15 11:40:14,563:INFO:Declaring metric variables
2024-12-15 11:40:14,580:INFO:Importing untrained model
2024-12-15 11:40:14,590:INFO:Ridge Classifier Imported successfully
2024-12-15 11:40:14,609:INFO:Starting cross validation
2024-12-15 11:40:14,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:15,948:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.7267e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:15,948:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.53241e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:15,952:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.51353e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:15,952:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.99237e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,126:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,137:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,137:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,137:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,137:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,145:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,147:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,148:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,156:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,164:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,442:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.63923e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.618e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.61002e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,514:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.46256e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,588:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,604:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,604:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,604:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:16,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,658:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,665:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,680:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,690:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,874:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.62625e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.4243e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:40:16,960:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,974:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:16,975:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,979:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,979:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,989:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:16,990:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:17,031:INFO:Calculating mean and std
2024-12-15 11:40:17,034:INFO:Creating metrics dataframe
2024-12-15 11:40:17,038:INFO:Uploading results into container
2024-12-15 11:40:17,040:INFO:Uploading model into container now
2024-12-15 11:40:17,042:INFO:_master_model_container: 6
2024-12-15 11:40:17,042:INFO:_display_container: 2
2024-12-15 11:40:17,043:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-12-15 11:40:17,043:INFO:create_model() successfully completed......................................
2024-12-15 11:40:17,195:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:17,195:INFO:Creating metrics dataframe
2024-12-15 11:40:17,373:INFO:Initializing Random Forest Classifier
2024-12-15 11:40:17,381:INFO:Total runtime is 1.9830026268959047 minutes
2024-12-15 11:40:17,407:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:17,408:INFO:Initializing create_model()
2024-12-15 11:40:17,408:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:17,408:INFO:Checking exceptions
2024-12-15 11:40:17,409:INFO:Importing libraries
2024-12-15 11:40:17,409:INFO:Copying training dataset
2024-12-15 11:40:17,417:INFO:Defining folds
2024-12-15 11:40:17,418:INFO:Declaring metric variables
2024-12-15 11:40:17,428:INFO:Importing untrained model
2024-12-15 11:40:17,437:INFO:Random Forest Classifier Imported successfully
2024-12-15 11:40:17,455:INFO:Starting cross validation
2024-12-15 11:40:17,459:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:18,608:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,616:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,618:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,619:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:18,619:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,619:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,636:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:18,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,644:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,662:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,662:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:18,679:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,780:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,780:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:18,780:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:18,797:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,810:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,811:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,824:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,824:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:19,824:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,824:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,824:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:19,842:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,842:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,842:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:19,859:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:19,859:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,048:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:20,061:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,744:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,746:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,746:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,746:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,757:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:20,758:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:20,758:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,758:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:20,790:INFO:Calculating mean and std
2024-12-15 11:40:20,792:INFO:Creating metrics dataframe
2024-12-15 11:40:20,795:INFO:Uploading results into container
2024-12-15 11:40:20,796:INFO:Uploading model into container now
2024-12-15 11:40:20,796:INFO:_master_model_container: 7
2024-12-15 11:40:20,796:INFO:_display_container: 2
2024-12-15 11:40:20,797:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-12-15 11:40:20,797:INFO:create_model() successfully completed......................................
2024-12-15 11:40:20,932:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:20,933:INFO:Creating metrics dataframe
2024-12-15 11:40:20,967:INFO:Initializing Quadratic Discriminant Analysis
2024-12-15 11:40:20,967:INFO:Total runtime is 2.0427738785743714 minutes
2024-12-15 11:40:20,977:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:20,978:INFO:Initializing create_model()
2024-12-15 11:40:20,978:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:20,979:INFO:Checking exceptions
2024-12-15 11:40:20,980:INFO:Importing libraries
2024-12-15 11:40:20,980:INFO:Copying training dataset
2024-12-15 11:40:20,990:INFO:Defining folds
2024-12-15 11:40:20,990:INFO:Declaring metric variables
2024-12-15 11:40:20,999:INFO:Importing untrained model
2024-12-15 11:40:21,018:INFO:Quadratic Discriminant Analysis Imported successfully
2024-12-15 11:40:21,045:INFO:Starting cross validation
2024-12-15 11:40:21,053:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:22,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,194:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,195:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,345:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,360:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,361:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,363:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,379:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,379:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,379:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,408:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,410:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,413:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,423:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,724:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,747:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,776:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,877:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,878:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:40:22,897:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,897:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,897:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:22,904:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,904:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,912:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,912:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,912:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:22,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:22,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:22,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,141:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:23,141:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:40:23,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:23,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,244:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:23,244:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,244:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,244:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:23,256:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:23,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:23,288:INFO:Calculating mean and std
2024-12-15 11:40:23,293:INFO:Creating metrics dataframe
2024-12-15 11:40:23,307:INFO:Uploading results into container
2024-12-15 11:40:23,308:INFO:Uploading model into container now
2024-12-15 11:40:23,309:INFO:_master_model_container: 8
2024-12-15 11:40:23,309:INFO:_display_container: 2
2024-12-15 11:40:23,311:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-12-15 11:40:23,311:INFO:create_model() successfully completed......................................
2024-12-15 11:40:23,440:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:23,440:INFO:Creating metrics dataframe
2024-12-15 11:40:23,469:INFO:Initializing Ada Boost Classifier
2024-12-15 11:40:23,469:INFO:Total runtime is 2.084470236301422 minutes
2024-12-15 11:40:23,480:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:23,481:INFO:Initializing create_model()
2024-12-15 11:40:23,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:23,483:INFO:Checking exceptions
2024-12-15 11:40:23,484:INFO:Importing libraries
2024-12-15 11:40:23,484:INFO:Copying training dataset
2024-12-15 11:40:23,494:INFO:Defining folds
2024-12-15 11:40:23,494:INFO:Declaring metric variables
2024-12-15 11:40:23,514:INFO:Importing untrained model
2024-12-15 11:40:23,531:INFO:Ada Boost Classifier Imported successfully
2024-12-15 11:40:23,554:INFO:Starting cross validation
2024-12-15 11:40:23,564:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:24,464:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:24,464:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:24,464:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:24,464:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:25,063:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,063:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,079:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,080:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,096:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,099:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,099:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,099:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,099:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,108:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,115:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,115:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,123:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,123:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,379:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:25,398:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:25,398:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:25,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:25,863:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,863:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,880:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:25,897:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,898:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:25,915:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:25,915:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,109:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:26,109:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:40:26,441:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:26,441:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:26,461:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,461:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,462:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,462:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:26,475:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,476:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:26,506:INFO:Calculating mean and std
2024-12-15 11:40:26,508:INFO:Creating metrics dataframe
2024-12-15 11:40:26,511:INFO:Uploading results into container
2024-12-15 11:40:26,512:INFO:Uploading model into container now
2024-12-15 11:40:26,513:INFO:_master_model_container: 9
2024-12-15 11:40:26,513:INFO:_display_container: 2
2024-12-15 11:40:26,513:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-12-15 11:40:26,513:INFO:create_model() successfully completed......................................
2024-12-15 11:40:26,658:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:26,658:INFO:Creating metrics dataframe
2024-12-15 11:40:26,680:INFO:Initializing Gradient Boosting Classifier
2024-12-15 11:40:26,682:INFO:Total runtime is 2.138017149766286 minutes
2024-12-15 11:40:26,700:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:26,700:INFO:Initializing create_model()
2024-12-15 11:40:26,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:26,700:INFO:Checking exceptions
2024-12-15 11:40:26,701:INFO:Importing libraries
2024-12-15 11:40:26,701:INFO:Copying training dataset
2024-12-15 11:40:26,715:INFO:Defining folds
2024-12-15 11:40:26,715:INFO:Declaring metric variables
2024-12-15 11:40:26,727:INFO:Importing untrained model
2024-12-15 11:40:26,747:INFO:Gradient Boosting Classifier Imported successfully
2024-12-15 11:40:26,770:INFO:Starting cross validation
2024-12-15 11:40:26,781:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,743:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:29,761:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:29,772:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,960:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:30,960:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:30,960:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:30,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,977:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:30,995:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:30,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:30,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:30,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:30,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,016:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,016:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,026:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,026:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:31,040:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,854:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,856:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,877:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,877:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:31,877:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:31,905:INFO:Calculating mean and std
2024-12-15 11:40:31,908:INFO:Creating metrics dataframe
2024-12-15 11:40:31,924:INFO:Uploading results into container
2024-12-15 11:40:31,927:INFO:Uploading model into container now
2024-12-15 11:40:31,928:INFO:_master_model_container: 10
2024-12-15 11:40:31,928:INFO:_display_container: 2
2024-12-15 11:40:31,929:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-12-15 11:40:31,929:INFO:create_model() successfully completed......................................
2024-12-15 11:40:32,076:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:32,076:INFO:Creating metrics dataframe
2024-12-15 11:40:32,202:INFO:Initializing Linear Discriminant Analysis
2024-12-15 11:40:32,208:INFO:Total runtime is 2.2301254272460938 minutes
2024-12-15 11:40:32,231:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:32,232:INFO:Initializing create_model()
2024-12-15 11:40:32,232:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:32,234:INFO:Checking exceptions
2024-12-15 11:40:32,236:INFO:Importing libraries
2024-12-15 11:40:32,237:INFO:Copying training dataset
2024-12-15 11:40:32,265:INFO:Defining folds
2024-12-15 11:40:32,266:INFO:Declaring metric variables
2024-12-15 11:40:32,279:INFO:Importing untrained model
2024-12-15 11:40:32,291:INFO:Linear Discriminant Analysis Imported successfully
2024-12-15 11:40:32,317:INFO:Starting cross validation
2024-12-15 11:40:32,325:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:33,129:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,129:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,139:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,139:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,162:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,162:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,162:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,162:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,162:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,171:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,588:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,588:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:33,638:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,638:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,638:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,638:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,638:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,660:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,926:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:40:33,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,943:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,959:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:33,989:INFO:Calculating mean and std
2024-12-15 11:40:33,993:INFO:Creating metrics dataframe
2024-12-15 11:40:33,996:INFO:Uploading results into container
2024-12-15 11:40:33,997:INFO:Uploading model into container now
2024-12-15 11:40:33,997:INFO:_master_model_container: 11
2024-12-15 11:40:33,997:INFO:_display_container: 2
2024-12-15 11:40:33,998:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-12-15 11:40:33,998:INFO:create_model() successfully completed......................................
2024-12-15 11:40:34,139:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:34,140:INFO:Creating metrics dataframe
2024-12-15 11:40:34,196:INFO:Initializing Extra Trees Classifier
2024-12-15 11:40:34,196:INFO:Total runtime is 2.2632582982381186 minutes
2024-12-15 11:40:34,205:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:34,206:INFO:Initializing create_model()
2024-12-15 11:40:34,206:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:34,207:INFO:Checking exceptions
2024-12-15 11:40:34,207:INFO:Importing libraries
2024-12-15 11:40:34,207:INFO:Copying training dataset
2024-12-15 11:40:34,225:INFO:Defining folds
2024-12-15 11:40:34,225:INFO:Declaring metric variables
2024-12-15 11:40:34,234:INFO:Importing untrained model
2024-12-15 11:40:34,267:INFO:Extra Trees Classifier Imported successfully
2024-12-15 11:40:34,294:INFO:Starting cross validation
2024-12-15 11:40:34,298:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:35,389:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,389:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,402:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,402:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,409:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:35,410:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:35,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,415:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,415:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:35,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,471:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:35,471:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,427:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,443:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,443:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:36,456:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,472:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,488:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,488:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:36,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:36,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:36,523:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,160:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,160:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,173:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:37,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:37,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:37,205:INFO:Calculating mean and std
2024-12-15 11:40:37,208:INFO:Creating metrics dataframe
2024-12-15 11:40:37,211:INFO:Uploading results into container
2024-12-15 11:40:37,213:INFO:Uploading model into container now
2024-12-15 11:40:37,213:INFO:_master_model_container: 12
2024-12-15 11:40:37,214:INFO:_display_container: 2
2024-12-15 11:40:37,214:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-12-15 11:40:37,214:INFO:create_model() successfully completed......................................
2024-12-15 11:40:37,348:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:37,348:INFO:Creating metrics dataframe
2024-12-15 11:40:37,375:INFO:Initializing Light Gradient Boosting Machine
2024-12-15 11:40:37,375:INFO:Total runtime is 2.3162458817164104 minutes
2024-12-15 11:40:37,396:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:37,397:INFO:Initializing create_model()
2024-12-15 11:40:37,399:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:37,399:INFO:Checking exceptions
2024-12-15 11:40:37,400:INFO:Importing libraries
2024-12-15 11:40:37,400:INFO:Copying training dataset
2024-12-15 11:40:37,411:INFO:Defining folds
2024-12-15 11:40:37,411:INFO:Declaring metric variables
2024-12-15 11:40:37,429:INFO:Importing untrained model
2024-12-15 11:40:37,445:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-15 11:40:37,472:INFO:Starting cross validation
2024-12-15 11:40:37,476:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:39,422:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,438:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:39,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,454:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,472:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,472:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,488:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:39,488:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:39,505:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,404:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,421:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:40,421:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,421:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,440:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:40,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,456:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,460:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:40,460:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,545:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,555:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:40,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,890:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,905:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,905:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,923:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,938:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:40,938:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:40,973:INFO:Calculating mean and std
2024-12-15 11:40:40,974:INFO:Creating metrics dataframe
2024-12-15 11:40:40,977:INFO:Uploading results into container
2024-12-15 11:40:40,977:INFO:Uploading model into container now
2024-12-15 11:40:40,977:INFO:_master_model_container: 13
2024-12-15 11:40:40,977:INFO:_display_container: 2
2024-12-15 11:40:40,988:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-12-15 11:40:40,994:INFO:create_model() successfully completed......................................
2024-12-15 11:40:41,137:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:41,137:INFO:Creating metrics dataframe
2024-12-15 11:40:41,162:INFO:Initializing Dummy Classifier
2024-12-15 11:40:41,162:INFO:Total runtime is 2.3793575803438825 minutes
2024-12-15 11:40:41,168:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:41,170:INFO:Initializing create_model()
2024-12-15 11:40:41,171:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812C0B1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:41,173:INFO:Checking exceptions
2024-12-15 11:40:41,173:INFO:Importing libraries
2024-12-15 11:40:41,173:INFO:Copying training dataset
2024-12-15 11:40:41,184:INFO:Defining folds
2024-12-15 11:40:41,184:INFO:Declaring metric variables
2024-12-15 11:40:41,200:INFO:Importing untrained model
2024-12-15 11:40:41,217:INFO:Dummy Classifier Imported successfully
2024-12-15 11:40:41,246:INFO:Starting cross validation
2024-12-15 11:40:41,251:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:41,695:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,705:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,709:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,709:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:41,709:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,723:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,723:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:41,723:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,723:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,723:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,738:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:41,738:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,738:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,738:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:41,754:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:41,760:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,144:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,173:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,181:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,181:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,181:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,188:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,190:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,190:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,203:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,203:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,208:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,208:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,223:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,223:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,223:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,489:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,491:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:42,511:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:42,521:INFO:Calculating mean and std
2024-12-15 11:40:42,524:INFO:Creating metrics dataframe
2024-12-15 11:40:42,528:INFO:Uploading results into container
2024-12-15 11:40:42,528:INFO:Uploading model into container now
2024-12-15 11:40:42,529:INFO:_master_model_container: 14
2024-12-15 11:40:42,529:INFO:_display_container: 2
2024-12-15 11:40:42,529:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-12-15 11:40:42,529:INFO:create_model() successfully completed......................................
2024-12-15 11:40:42,670:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:42,670:INFO:Creating metrics dataframe
2024-12-15 11:40:43,490:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-15 11:40:43,585:INFO:Initializing create_model()
2024-12-15 11:40:43,585:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:43,586:INFO:Checking exceptions
2024-12-15 11:40:43,594:INFO:Importing libraries
2024-12-15 11:40:43,599:INFO:Copying training dataset
2024-12-15 11:40:43,615:INFO:Defining folds
2024-12-15 11:40:43,615:INFO:Declaring metric variables
2024-12-15 11:40:43,615:INFO:Importing untrained model
2024-12-15 11:40:43,616:INFO:Declaring custom model
2024-12-15 11:40:43,616:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:40:43,616:INFO:Cross validation set to False
2024-12-15 11:40:43,621:INFO:Fitting Model
2024-12-15 11:40:43,925:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:40:43,926:INFO:create_model() successfully completed......................................
2024-12-15 11:40:44,271:INFO:_master_model_container: 14
2024-12-15 11:40:44,271:INFO:_display_container: 2
2024-12-15 11:40:44,271:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:40:44,277:INFO:compare_models() successfully completed......................................
2024-12-15 11:40:44,370:INFO:Initializing tune_model()
2024-12-15 11:40:44,371:INFO:tune_model(estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>)
2024-12-15 11:40:44,371:INFO:Checking exceptions
2024-12-15 11:40:44,464:INFO:Copying training dataset
2024-12-15 11:40:44,506:INFO:Checking base model
2024-12-15 11:40:44,506:INFO:Base model : K Neighbors Classifier
2024-12-15 11:40:44,531:INFO:Declaring metric variables
2024-12-15 11:40:44,596:INFO:Defining Hyperparameters
2024-12-15 11:40:44,910:INFO:Tuning with n_jobs=-1
2024-12-15 11:40:44,910:INFO:Initializing RandomizedSearchCV
2024-12-15 11:40:56,925:INFO:best_params: {'actual_estimator__weights': 'uniform', 'actual_estimator__n_neighbors': 8, 'actual_estimator__metric': 'manhattan'}
2024-12-15 11:40:56,933:INFO:Hyperparameter search completed
2024-12-15 11:40:56,934:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:56,942:INFO:Initializing create_model()
2024-12-15 11:40:56,942:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002480C452D40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'weights': 'uniform', 'n_neighbors': 8, 'metric': 'manhattan'})
2024-12-15 11:40:56,948:INFO:Checking exceptions
2024-12-15 11:40:56,949:INFO:Importing libraries
2024-12-15 11:40:56,951:INFO:Copying training dataset
2024-12-15 11:40:56,977:INFO:Defining folds
2024-12-15 11:40:56,977:INFO:Declaring metric variables
2024-12-15 11:40:56,992:INFO:Importing untrained model
2024-12-15 11:40:56,992:INFO:Declaring custom model
2024-12-15 11:40:57,012:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:40:57,046:INFO:Starting cross validation
2024-12-15 11:40:57,054:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:57,593:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,593:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,593:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,593:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,593:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,609:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,611:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,646:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,663:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:57,680:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,142:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,145:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,145:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,145:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,156:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,157:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,157:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,157:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,210:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,560:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,574:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:58,621:INFO:Calculating mean and std
2024-12-15 11:40:58,624:INFO:Creating metrics dataframe
2024-12-15 11:40:58,644:INFO:Finalizing model
2024-12-15 11:40:58,859:INFO:Uploading results into container
2024-12-15 11:40:58,863:INFO:Uploading model into container now
2024-12-15 11:40:58,864:INFO:_master_model_container: 15
2024-12-15 11:40:58,864:INFO:_display_container: 3
2024-12-15 11:40:58,864:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='manhattan',
                     metric_params=None, n_jobs=-1, n_neighbors=8, p=2,
                     weights='uniform')
2024-12-15 11:40:58,865:INFO:create_model() successfully completed......................................
2024-12-15 11:40:59,029:INFO:SubProcess create_model() end ==================================
2024-12-15 11:40:59,029:INFO:choose_better activated
2024-12-15 11:40:59,035:INFO:SubProcess create_model() called ==================================
2024-12-15 11:40:59,035:INFO:Initializing create_model()
2024-12-15 11:40:59,035:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:40:59,035:INFO:Checking exceptions
2024-12-15 11:40:59,042:INFO:Importing libraries
2024-12-15 11:40:59,042:INFO:Copying training dataset
2024-12-15 11:40:59,048:INFO:Defining folds
2024-12-15 11:40:59,048:INFO:Declaring metric variables
2024-12-15 11:40:59,049:INFO:Importing untrained model
2024-12-15 11:40:59,049:INFO:Declaring custom model
2024-12-15 11:40:59,052:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:40:59,052:INFO:Starting cross validation
2024-12-15 11:40:59,057:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:40:59,573:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,575:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,584:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:59,584:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,598:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,598:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,615:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,616:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,629:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:40:59,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:40:59,661:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:00,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,158:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,185:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,243:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,243:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,538:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,545:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,546:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,560:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,561:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,574:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:00,589:INFO:Calculating mean and std
2024-12-15 11:41:00,591:INFO:Creating metrics dataframe
2024-12-15 11:41:00,595:INFO:Finalizing model
2024-12-15 11:41:00,743:INFO:Uploading results into container
2024-12-15 11:41:00,743:INFO:Uploading model into container now
2024-12-15 11:41:00,743:INFO:_master_model_container: 16
2024-12-15 11:41:00,743:INFO:_display_container: 4
2024-12-15 11:41:00,743:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:41:00,743:INFO:create_model() successfully completed......................................
2024-12-15 11:41:00,890:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:00,890:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform') result for Accuracy is 0.4667
2024-12-15 11:41:00,892:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='manhattan',
                     metric_params=None, n_jobs=-1, n_neighbors=8, p=2,
                     weights='uniform') result for Accuracy is 0.5567
2024-12-15 11:41:00,893:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='manhattan',
                     metric_params=None, n_jobs=-1, n_neighbors=8, p=2,
                     weights='uniform') is best model
2024-12-15 11:41:00,893:INFO:choose_better completed
2024-12-15 11:41:00,918:INFO:_master_model_container: 16
2024-12-15 11:41:00,918:INFO:_display_container: 3
2024-12-15 11:41:00,919:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='manhattan',
                     metric_params=None, n_jobs=-1, n_neighbors=8, p=2,
                     weights='uniform')
2024-12-15 11:41:00,919:INFO:tune_model() successfully completed......................................
2024-12-15 11:41:50,350:INFO:Initializing compare_models()
2024-12-15 11:41:50,354:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-12-15 11:41:50,355:INFO:Checking exceptions
2024-12-15 11:41:50,361:INFO:Preparing display monitor
2024-12-15 11:41:50,483:INFO:Initializing Logistic Regression
2024-12-15 11:41:50,483:INFO:Total runtime is 0.0 minutes
2024-12-15 11:41:50,502:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:50,503:INFO:Initializing create_model()
2024-12-15 11:41:50,503:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:50,503:INFO:Checking exceptions
2024-12-15 11:41:50,503:INFO:Importing libraries
2024-12-15 11:41:50,503:INFO:Copying training dataset
2024-12-15 11:41:50,542:INFO:Defining folds
2024-12-15 11:41:50,543:INFO:Declaring metric variables
2024-12-15 11:41:50,570:INFO:Importing untrained model
2024-12-15 11:41:50,607:INFO:Logistic Regression Imported successfully
2024-12-15 11:41:50,651:INFO:Starting cross validation
2024-12-15 11:41:50,664:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:41:51,044:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,065:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,096:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,106:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,106:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,114:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,114:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,114:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,124:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,124:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,132:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,140:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,140:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,149:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,155:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,164:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,179:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,191:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,192:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,201:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,572:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,589:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,589:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,589:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,600:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,600:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,607:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,618:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,622:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,631:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,659:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,659:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,675:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,676:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,684:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,942:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,942:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,942:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:51,942:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,942:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:51,957:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:51,990:INFO:Calculating mean and std
2024-12-15 11:41:51,993:INFO:Creating metrics dataframe
2024-12-15 11:41:51,995:INFO:Uploading results into container
2024-12-15 11:41:51,997:INFO:Uploading model into container now
2024-12-15 11:41:51,997:INFO:_master_model_container: 17
2024-12-15 11:41:51,998:INFO:_display_container: 4
2024-12-15 11:41:51,998:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-15 11:41:51,998:INFO:create_model() successfully completed......................................
2024-12-15 11:41:52,151:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:52,152:INFO:Creating metrics dataframe
2024-12-15 11:41:52,178:INFO:Initializing K Neighbors Classifier
2024-12-15 11:41:52,178:INFO:Total runtime is 0.028245425224304198 minutes
2024-12-15 11:41:52,184:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:52,186:INFO:Initializing create_model()
2024-12-15 11:41:52,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:52,188:INFO:Checking exceptions
2024-12-15 11:41:52,190:INFO:Importing libraries
2024-12-15 11:41:52,190:INFO:Copying training dataset
2024-12-15 11:41:52,198:INFO:Defining folds
2024-12-15 11:41:52,199:INFO:Declaring metric variables
2024-12-15 11:41:52,219:INFO:Importing untrained model
2024-12-15 11:41:52,235:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:41:52,260:INFO:Starting cross validation
2024-12-15 11:41:52,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:41:53,007:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,077:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,085:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,093:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,121:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,129:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,129:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:53,133:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,133:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,142:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,254:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:53,271:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:53,271:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,032:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,032:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,049:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,049:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,049:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:54,049:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,049:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,065:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,066:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,066:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,100:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,108:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,474:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,474:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,476:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,476:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:54,506:INFO:Calculating mean and std
2024-12-15 11:41:54,509:INFO:Creating metrics dataframe
2024-12-15 11:41:54,512:INFO:Uploading results into container
2024-12-15 11:41:54,512:INFO:Uploading model into container now
2024-12-15 11:41:54,514:INFO:_master_model_container: 18
2024-12-15 11:41:54,514:INFO:_display_container: 4
2024-12-15 11:41:54,514:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:41:54,514:INFO:create_model() successfully completed......................................
2024-12-15 11:41:54,650:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:54,650:INFO:Creating metrics dataframe
2024-12-15 11:41:54,670:INFO:Initializing Naive Bayes
2024-12-15 11:41:54,676:INFO:Total runtime is 0.06987208525339762 minutes
2024-12-15 11:41:54,685:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:54,686:INFO:Initializing create_model()
2024-12-15 11:41:54,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:54,691:INFO:Checking exceptions
2024-12-15 11:41:54,691:INFO:Importing libraries
2024-12-15 11:41:54,691:INFO:Copying training dataset
2024-12-15 11:41:54,701:INFO:Defining folds
2024-12-15 11:41:54,701:INFO:Declaring metric variables
2024-12-15 11:41:54,716:INFO:Importing untrained model
2024-12-15 11:41:54,735:INFO:Naive Bayes Imported successfully
2024-12-15 11:41:54,761:INFO:Starting cross validation
2024-12-15 11:41:54,766:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:41:55,204:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,224:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,240:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,241:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,241:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,241:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,241:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,241:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,258:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,275:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,280:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,700:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,700:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,700:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,700:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,700:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,735:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:55,735:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:55,741:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,041:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,042:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,042:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,042:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,042:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,042:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,073:INFO:Calculating mean and std
2024-12-15 11:41:56,074:INFO:Creating metrics dataframe
2024-12-15 11:41:56,079:INFO:Uploading results into container
2024-12-15 11:41:56,082:INFO:Uploading model into container now
2024-12-15 11:41:56,086:INFO:_master_model_container: 19
2024-12-15 11:41:56,088:INFO:_display_container: 4
2024-12-15 11:41:56,088:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-12-15 11:41:56,090:INFO:create_model() successfully completed......................................
2024-12-15 11:41:56,226:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:56,226:INFO:Creating metrics dataframe
2024-12-15 11:41:56,260:INFO:Initializing Decision Tree Classifier
2024-12-15 11:41:56,260:INFO:Total runtime is 0.09628094434738159 minutes
2024-12-15 11:41:56,267:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:56,268:INFO:Initializing create_model()
2024-12-15 11:41:56,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:56,270:INFO:Checking exceptions
2024-12-15 11:41:56,271:INFO:Importing libraries
2024-12-15 11:41:56,271:INFO:Copying training dataset
2024-12-15 11:41:56,281:INFO:Defining folds
2024-12-15 11:41:56,283:INFO:Declaring metric variables
2024-12-15 11:41:56,305:INFO:Importing untrained model
2024-12-15 11:41:56,317:INFO:Decision Tree Classifier Imported successfully
2024-12-15 11:41:56,339:INFO:Starting cross validation
2024-12-15 11:41:56,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:41:56,828:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,845:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,860:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:56,861:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:56,879:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,332:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,348:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,350:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,350:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,351:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,351:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,367:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,367:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,367:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,367:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,367:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,384:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,384:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,384:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,695:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,710:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,711:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,711:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,711:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,728:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,728:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:57,728:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:57,757:INFO:Calculating mean and std
2024-12-15 11:41:57,762:INFO:Creating metrics dataframe
2024-12-15 11:41:57,779:INFO:Uploading results into container
2024-12-15 11:41:57,779:INFO:Uploading model into container now
2024-12-15 11:41:57,779:INFO:_master_model_container: 20
2024-12-15 11:41:57,779:INFO:_display_container: 4
2024-12-15 11:41:57,779:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-12-15 11:41:57,779:INFO:create_model() successfully completed......................................
2024-12-15 11:41:57,924:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:57,925:INFO:Creating metrics dataframe
2024-12-15 11:41:57,945:INFO:Initializing SVM - Linear Kernel
2024-12-15 11:41:57,945:INFO:Total runtime is 0.12435871760050456 minutes
2024-12-15 11:41:57,952:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:57,955:INFO:Initializing create_model()
2024-12-15 11:41:57,957:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:57,957:INFO:Checking exceptions
2024-12-15 11:41:57,958:INFO:Importing libraries
2024-12-15 11:41:57,958:INFO:Copying training dataset
2024-12-15 11:41:57,969:INFO:Defining folds
2024-12-15 11:41:57,969:INFO:Declaring metric variables
2024-12-15 11:41:57,983:INFO:Importing untrained model
2024-12-15 11:41:58,005:INFO:SVM - Linear Kernel Imported successfully
2024-12-15 11:41:58,033:INFO:Starting cross validation
2024-12-15 11:41:58,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:41:58,552:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:58,571:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,574:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:58,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:58,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:58,594:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,597:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,598:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:58,604:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,604:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:58,609:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,610:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,610:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,610:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:58,627:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,645:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:58,645:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:58,658:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,051:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,051:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,068:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,068:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,068:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,085:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,086:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,087:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,097:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,097:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,108:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,113:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,113:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,113:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,113:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,131:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,131:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,147:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,147:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,147:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,406:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,407:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,407:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,407:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,407:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,450:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:41:59,450:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,461:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,461:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:41:59,461:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:41:59,489:INFO:Calculating mean and std
2024-12-15 11:41:59,492:INFO:Creating metrics dataframe
2024-12-15 11:41:59,494:INFO:Uploading results into container
2024-12-15 11:41:59,496:INFO:Uploading model into container now
2024-12-15 11:41:59,496:INFO:_master_model_container: 21
2024-12-15 11:41:59,496:INFO:_display_container: 4
2024-12-15 11:41:59,497:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-12-15 11:41:59,497:INFO:create_model() successfully completed......................................
2024-12-15 11:41:59,634:INFO:SubProcess create_model() end ==================================
2024-12-15 11:41:59,634:INFO:Creating metrics dataframe
2024-12-15 11:41:59,749:INFO:Initializing Ridge Classifier
2024-12-15 11:41:59,750:INFO:Total runtime is 0.15445329745610556 minutes
2024-12-15 11:41:59,776:INFO:SubProcess create_model() called ==================================
2024-12-15 11:41:59,777:INFO:Initializing create_model()
2024-12-15 11:41:59,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:41:59,779:INFO:Checking exceptions
2024-12-15 11:41:59,779:INFO:Importing libraries
2024-12-15 11:41:59,780:INFO:Copying training dataset
2024-12-15 11:41:59,798:INFO:Defining folds
2024-12-15 11:41:59,798:INFO:Declaring metric variables
2024-12-15 11:41:59,831:INFO:Importing untrained model
2024-12-15 11:41:59,846:INFO:Ridge Classifier Imported successfully
2024-12-15 11:41:59,866:INFO:Starting cross validation
2024-12-15 11:41:59,874:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:00,257:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.7267e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,257:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.99237e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,291:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.51353e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,300:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.53241e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,387:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,392:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,398:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,415:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,415:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,432:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,432:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,432:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,450:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,463:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,463:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,471:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,477:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,487:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,738:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.618e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,758:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.63923e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,795:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.61002e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,825:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.46256e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:00,884:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,884:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,902:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,903:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,903:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,903:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:00,925:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,934:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,934:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,940:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,940:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,959:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,959:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:00,959:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:00,976:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,976:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,976:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:00,993:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,173:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.4243e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:01,174:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.62625e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-15 11:42:01,263:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:01,263:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,263:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:01,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,291:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:01,306:INFO:Calculating mean and std
2024-12-15 11:42:01,309:INFO:Creating metrics dataframe
2024-12-15 11:42:01,312:INFO:Uploading results into container
2024-12-15 11:42:01,314:INFO:Uploading model into container now
2024-12-15 11:42:01,317:INFO:_master_model_container: 22
2024-12-15 11:42:01,318:INFO:_display_container: 4
2024-12-15 11:42:01,322:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-12-15 11:42:01,322:INFO:create_model() successfully completed......................................
2024-12-15 11:42:01,460:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:01,460:INFO:Creating metrics dataframe
2024-12-15 11:42:01,761:INFO:Initializing Random Forest Classifier
2024-12-15 11:42:01,763:INFO:Total runtime is 0.1879901647567749 minutes
2024-12-15 11:42:01,833:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:01,835:INFO:Initializing create_model()
2024-12-15 11:42:01,836:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:01,836:INFO:Checking exceptions
2024-12-15 11:42:01,837:INFO:Importing libraries
2024-12-15 11:42:01,837:INFO:Copying training dataset
2024-12-15 11:42:01,882:INFO:Defining folds
2024-12-15 11:42:01,883:INFO:Declaring metric variables
2024-12-15 11:42:01,916:INFO:Importing untrained model
2024-12-15 11:42:01,930:INFO:Random Forest Classifier Imported successfully
2024-12-15 11:42:01,968:INFO:Starting cross validation
2024-12-15 11:42:01,979:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:03,104:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,116:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,121:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,126:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:03,126:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,126:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,126:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:03,142:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,143:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:03,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:03,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,064:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,067:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:04,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,113:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:04,136:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,154:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:04,177:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,281:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,281:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:04,298:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:04,298:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,149:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,161:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,163:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,165:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:05,169:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,176:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,180:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:05,184:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,223:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,228:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,228:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:05,228:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:05,256:INFO:Calculating mean and std
2024-12-15 11:42:05,259:INFO:Creating metrics dataframe
2024-12-15 11:42:05,266:INFO:Uploading results into container
2024-12-15 11:42:05,268:INFO:Uploading model into container now
2024-12-15 11:42:05,269:INFO:_master_model_container: 23
2024-12-15 11:42:05,269:INFO:_display_container: 4
2024-12-15 11:42:05,271:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-12-15 11:42:05,274:INFO:create_model() successfully completed......................................
2024-12-15 11:42:05,427:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:05,427:INFO:Creating metrics dataframe
2024-12-15 11:42:05,446:INFO:Initializing Quadratic Discriminant Analysis
2024-12-15 11:42:05,446:INFO:Total runtime is 0.2493723471959432 minutes
2024-12-15 11:42:05,453:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:05,456:INFO:Initializing create_model()
2024-12-15 11:42:05,459:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:05,459:INFO:Checking exceptions
2024-12-15 11:42:05,460:INFO:Importing libraries
2024-12-15 11:42:05,460:INFO:Copying training dataset
2024-12-15 11:42:05,468:INFO:Defining folds
2024-12-15 11:42:05,468:INFO:Declaring metric variables
2024-12-15 11:42:05,484:INFO:Importing untrained model
2024-12-15 11:42:05,500:INFO:Quadratic Discriminant Analysis Imported successfully
2024-12-15 11:42:05,530:INFO:Starting cross validation
2024-12-15 11:42:05,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:05,866:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:05,882:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:05,882:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:05,915:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:05,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:05,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:05,980:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:05,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:05,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:05,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:05,998:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,037:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,037:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,045:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,048:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,051:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,051:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,057:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,058:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,076:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,087:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,361:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,381:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,398:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,448:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-12-15 11:42:06,522:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,539:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,559:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:06,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,591:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,599:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,605:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,758:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,775:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-15 11:42:06,858:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:06,858:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,858:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,875:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:06,905:INFO:Calculating mean and std
2024-12-15 11:42:06,909:INFO:Creating metrics dataframe
2024-12-15 11:42:06,919:INFO:Uploading results into container
2024-12-15 11:42:06,924:INFO:Uploading model into container now
2024-12-15 11:42:06,926:INFO:_master_model_container: 24
2024-12-15 11:42:06,926:INFO:_display_container: 4
2024-12-15 11:42:06,926:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-12-15 11:42:06,927:INFO:create_model() successfully completed......................................
2024-12-15 11:42:07,056:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:07,056:INFO:Creating metrics dataframe
2024-12-15 11:42:07,082:INFO:Initializing Ada Boost Classifier
2024-12-15 11:42:07,082:INFO:Total runtime is 0.27664252519607546 minutes
2024-12-15 11:42:07,092:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:07,093:INFO:Initializing create_model()
2024-12-15 11:42:07,094:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:07,094:INFO:Checking exceptions
2024-12-15 11:42:07,094:INFO:Importing libraries
2024-12-15 11:42:07,094:INFO:Copying training dataset
2024-12-15 11:42:07,101:INFO:Defining folds
2024-12-15 11:42:07,101:INFO:Declaring metric variables
2024-12-15 11:42:07,115:INFO:Importing untrained model
2024-12-15 11:42:07,139:INFO:Ada Boost Classifier Imported successfully
2024-12-15 11:42:07,160:INFO:Starting cross validation
2024-12-15 11:42:07,166:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:07,682:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:07,682:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:07,727:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:07,742:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:08,163:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:08,163:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,182:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,182:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:08,199:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:08,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:08,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:08,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,234:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,259:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:08,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:08,500:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:08,550:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:08,553:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:08,581:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:09,018:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,033:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,034:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,034:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,051:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,059:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,078:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,078:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,078:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,078:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,095:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,095:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,095:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,095:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,116:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,121:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,279:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:09,307:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-15 11:42:09,627:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,631:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,643:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,646:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,646:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,659:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:09,659:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,659:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,674:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:09,674:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:09,690:INFO:Calculating mean and std
2024-12-15 11:42:09,692:INFO:Creating metrics dataframe
2024-12-15 11:42:09,701:INFO:Uploading results into container
2024-12-15 11:42:09,702:INFO:Uploading model into container now
2024-12-15 11:42:09,708:INFO:_master_model_container: 25
2024-12-15 11:42:09,708:INFO:_display_container: 4
2024-12-15 11:42:09,711:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-12-15 11:42:09,711:INFO:create_model() successfully completed......................................
2024-12-15 11:42:09,862:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:09,862:INFO:Creating metrics dataframe
2024-12-15 11:42:09,883:INFO:Initializing Gradient Boosting Classifier
2024-12-15 11:42:09,883:INFO:Total runtime is 0.3233269611994426 minutes
2024-12-15 11:42:09,894:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:09,895:INFO:Initializing create_model()
2024-12-15 11:42:09,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:09,896:INFO:Checking exceptions
2024-12-15 11:42:09,896:INFO:Importing libraries
2024-12-15 11:42:09,896:INFO:Copying training dataset
2024-12-15 11:42:09,907:INFO:Defining folds
2024-12-15 11:42:09,907:INFO:Declaring metric variables
2024-12-15 11:42:09,917:INFO:Importing untrained model
2024-12-15 11:42:09,941:INFO:Gradient Boosting Classifier Imported successfully
2024-12-15 11:42:09,971:INFO:Starting cross validation
2024-12-15 11:42:09,978:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:11,146:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:11,146:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,165:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,165:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:11,182:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,182:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:11,182:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,200:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:11,200:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,200:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,217:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,250:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:11,260:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:11,260:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,332:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:12,332:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,350:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,350:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:12,366:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,397:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:12,397:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:12,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:12,414:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,431:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,431:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,448:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:12,448:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,466:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:12,482:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,482:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:12,499:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:12,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,263:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:13,263:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,277:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,277:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:13,277:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,294:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:13,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:13,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:13,322:INFO:Calculating mean and std
2024-12-15 11:42:13,324:INFO:Creating metrics dataframe
2024-12-15 11:42:13,333:INFO:Uploading results into container
2024-12-15 11:42:13,335:INFO:Uploading model into container now
2024-12-15 11:42:13,336:INFO:_master_model_container: 26
2024-12-15 11:42:13,336:INFO:_display_container: 4
2024-12-15 11:42:13,336:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-12-15 11:42:13,339:INFO:create_model() successfully completed......................................
2024-12-15 11:42:13,491:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:13,491:INFO:Creating metrics dataframe
2024-12-15 11:42:13,513:INFO:Initializing Linear Discriminant Analysis
2024-12-15 11:42:13,513:INFO:Total runtime is 0.3838303923606873 minutes
2024-12-15 11:42:13,519:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:13,521:INFO:Initializing create_model()
2024-12-15 11:42:13,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:13,521:INFO:Checking exceptions
2024-12-15 11:42:13,521:INFO:Importing libraries
2024-12-15 11:42:13,521:INFO:Copying training dataset
2024-12-15 11:42:13,534:INFO:Defining folds
2024-12-15 11:42:13,534:INFO:Declaring metric variables
2024-12-15 11:42:13,551:INFO:Importing untrained model
2024-12-15 11:42:13,568:INFO:Linear Discriminant Analysis Imported successfully
2024-12-15 11:42:13,596:INFO:Starting cross validation
2024-12-15 11:42:13,602:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:14,087:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,098:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,110:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,144:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,144:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,144:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,161:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,161:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,161:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,178:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,592:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,610:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,610:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,621:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:14,629:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,634:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,634:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,634:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:14,651:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,651:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,651:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,669:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,670:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:14,941:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2024-12-15 11:42:16,068:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:16,127:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:16,144:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:16,163:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:16,163:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:16,190:INFO:Calculating mean and std
2024-12-15 11:42:16,193:INFO:Creating metrics dataframe
2024-12-15 11:42:16,195:INFO:Uploading results into container
2024-12-15 11:42:16,197:INFO:Uploading model into container now
2024-12-15 11:42:16,197:INFO:_master_model_container: 27
2024-12-15 11:42:16,198:INFO:_display_container: 4
2024-12-15 11:42:16,199:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-12-15 11:42:16,202:INFO:create_model() successfully completed......................................
2024-12-15 11:42:16,359:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:16,359:INFO:Creating metrics dataframe
2024-12-15 11:42:16,381:INFO:Initializing Extra Trees Classifier
2024-12-15 11:42:16,381:INFO:Total runtime is 0.43162200848261517 minutes
2024-12-15 11:42:16,387:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:16,393:INFO:Initializing create_model()
2024-12-15 11:42:16,393:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:16,394:INFO:Checking exceptions
2024-12-15 11:42:16,394:INFO:Importing libraries
2024-12-15 11:42:16,394:INFO:Copying training dataset
2024-12-15 11:42:16,402:INFO:Defining folds
2024-12-15 11:42:16,402:INFO:Declaring metric variables
2024-12-15 11:42:16,413:INFO:Importing untrained model
2024-12-15 11:42:16,436:INFO:Extra Trees Classifier Imported successfully
2024-12-15 11:42:16,463:INFO:Starting cross validation
2024-12-15 11:42:16,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:17,490:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,513:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,529:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,532:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:17,548:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,541:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,555:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,555:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,562:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:18,562:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:18,562:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,571:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,576:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:18,594:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,691:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,693:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:18,708:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,308:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:19,323:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,323:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:19,339:INFO:Calculating mean and std
2024-12-15 11:42:19,342:INFO:Creating metrics dataframe
2024-12-15 11:42:19,349:INFO:Uploading results into container
2024-12-15 11:42:19,350:INFO:Uploading model into container now
2024-12-15 11:42:19,350:INFO:_master_model_container: 28
2024-12-15 11:42:19,351:INFO:_display_container: 4
2024-12-15 11:42:19,351:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-12-15 11:42:19,351:INFO:create_model() successfully completed......................................
2024-12-15 11:42:19,497:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:19,500:INFO:Creating metrics dataframe
2024-12-15 11:42:19,528:INFO:Initializing Light Gradient Boosting Machine
2024-12-15 11:42:19,529:INFO:Total runtime is 0.4840898990631104 minutes
2024-12-15 11:42:19,536:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:19,538:INFO:Initializing create_model()
2024-12-15 11:42:19,540:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:19,540:INFO:Checking exceptions
2024-12-15 11:42:19,540:INFO:Importing libraries
2024-12-15 11:42:19,540:INFO:Copying training dataset
2024-12-15 11:42:19,551:INFO:Defining folds
2024-12-15 11:42:19,551:INFO:Declaring metric variables
2024-12-15 11:42:19,564:INFO:Importing untrained model
2024-12-15 11:42:19,581:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-15 11:42:19,604:INFO:Starting cross validation
2024-12-15 11:42:19,615:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:20,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,276:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,292:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,295:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,311:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,351:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:20,351:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,077:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,092:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,100:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:21,100:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:21,117:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,133:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:21,133:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,226:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,227:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,227:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:21,246:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,580:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,597:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,649:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,649:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,649:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:21,671:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:21,709:INFO:Calculating mean and std
2024-12-15 11:42:21,710:INFO:Creating metrics dataframe
2024-12-15 11:42:21,721:INFO:Uploading results into container
2024-12-15 11:42:21,725:INFO:Uploading model into container now
2024-12-15 11:42:21,725:INFO:_master_model_container: 29
2024-12-15 11:42:21,725:INFO:_display_container: 4
2024-12-15 11:42:21,725:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-12-15 11:42:21,725:INFO:create_model() successfully completed......................................
2024-12-15 11:42:21,874:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:21,874:INFO:Creating metrics dataframe
2024-12-15 11:42:21,911:INFO:Initializing Dummy Classifier
2024-12-15 11:42:21,911:INFO:Total runtime is 0.5237881501515707 minutes
2024-12-15 11:42:21,917:INFO:SubProcess create_model() called ==================================
2024-12-15 11:42:21,919:INFO:Initializing create_model()
2024-12-15 11:42:21,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024812150C70>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:21,919:INFO:Checking exceptions
2024-12-15 11:42:21,920:INFO:Importing libraries
2024-12-15 11:42:21,921:INFO:Copying training dataset
2024-12-15 11:42:21,931:INFO:Defining folds
2024-12-15 11:42:21,931:INFO:Declaring metric variables
2024-12-15 11:42:21,940:INFO:Importing untrained model
2024-12-15 11:42:21,969:INFO:Dummy Classifier Imported successfully
2024-12-15 11:42:21,994:INFO:Starting cross validation
2024-12-15 11:42:21,999:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-15 11:42:22,482:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,498:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,500:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,504:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,515:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,515:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,515:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,515:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,521:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,526:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,526:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,526:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,526:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,544:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,935:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,935:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,950:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,951:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,951:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,951:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,951:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,951:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,968:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,971:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:22,971:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:22,971:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,002:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,260:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,415:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:23,428:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,428:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,428:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,442:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:23,444:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-15 11:42:23,445:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,445:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Medium') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-15 11:42:23,474:INFO:Calculating mean and std
2024-12-15 11:42:23,477:INFO:Creating metrics dataframe
2024-12-15 11:42:23,480:INFO:Uploading results into container
2024-12-15 11:42:23,481:INFO:Uploading model into container now
2024-12-15 11:42:23,481:INFO:_master_model_container: 30
2024-12-15 11:42:23,481:INFO:_display_container: 4
2024-12-15 11:42:23,482:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-12-15 11:42:23,482:INFO:create_model() successfully completed......................................
2024-12-15 11:42:23,619:INFO:SubProcess create_model() end ==================================
2024-12-15 11:42:23,619:INFO:Creating metrics dataframe
2024-12-15 11:42:23,664:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-15 11:42:23,700:INFO:Initializing create_model()
2024-12-15 11:42:23,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002480BF79CC0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-15 11:42:23,700:INFO:Checking exceptions
2024-12-15 11:42:23,712:INFO:Importing libraries
2024-12-15 11:42:23,712:INFO:Copying training dataset
2024-12-15 11:42:23,713:INFO:Defining folds
2024-12-15 11:42:23,713:INFO:Declaring metric variables
2024-12-15 11:42:23,713:INFO:Importing untrained model
2024-12-15 11:42:23,713:INFO:Declaring custom model
2024-12-15 11:42:23,713:INFO:K Neighbors Classifier Imported successfully
2024-12-15 11:42:23,728:INFO:Cross validation set to False
2024-12-15 11:42:23,728:INFO:Fitting Model
2024-12-15 11:42:23,874:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:42:23,874:INFO:create_model() successfully completed......................................
2024-12-15 11:42:24,127:INFO:_master_model_container: 30
2024-12-15 11:42:24,128:INFO:_display_container: 4
2024-12-15 11:42:24,129:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-15 11:42:24,129:INFO:compare_models() successfully completed......................................
2024-12-17 13:18:53,736:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-17 13:18:53,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-17 13:18:53,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-17 13:18:53,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-17 13:18:59,641:INFO:PyCaret RegressionExperiment
2024-12-17 13:18:59,642:INFO:Logging name: reg-default-name
2024-12-17 13:18:59,643:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-17 13:18:59,644:INFO:version 3.3.2
2024-12-17 13:18:59,644:INFO:Initializing setup()
2024-12-17 13:18:59,644:INFO:self.USI: b7bb
2024-12-17 13:18:59,644:INFO:self._variable_keys: {'gpu_param', 'USI', 'pipeline', '_available_plots', 'fold_shuffle_param', 'transform_target_param', 'idx', 'y_test', 'logging_param', 'log_plots_param', 'y_train', 'n_jobs_param', 'y', 'fold_groups_param', 'seed', 'memory', 'target_param', 'X', 'html_param', 'fold_generator', 'X_train', 'exp_id', 'data', '_ml_usecase', 'exp_name_log', 'X_test', 'gpu_n_jobs_param'}
2024-12-17 13:18:59,644:INFO:Checking environment
2024-12-17 13:18:59,644:INFO:python_version: 3.10.15
2024-12-17 13:18:59,644:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-17 13:18:59,644:INFO:machine: AMD64
2024-12-17 13:18:59,644:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-17 13:18:59,657:INFO:Memory: svmem(total=4207841280, available=440684544, percent=89.5, used=3767156736, free=440684544)
2024-12-17 13:18:59,657:INFO:Physical Core: 2
2024-12-17 13:18:59,657:INFO:Logical Core: 4
2024-12-17 13:18:59,657:INFO:Checking libraries
2024-12-17 13:18:59,657:INFO:System:
2024-12-17 13:18:59,657:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-17 13:18:59,657:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-17 13:18:59,657:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-17 13:18:59,657:INFO:PyCaret required dependencies:
2024-12-17 13:19:01,133:INFO:                 pip: 24.2
2024-12-17 13:19:01,133:INFO:          setuptools: 75.1.0
2024-12-17 13:19:01,135:INFO:             pycaret: 3.3.2
2024-12-17 13:19:01,135:INFO:             IPython: 8.29.0
2024-12-17 13:19:01,135:INFO:          ipywidgets: 8.1.5
2024-12-17 13:19:01,136:INFO:                tqdm: 4.67.0
2024-12-17 13:19:01,136:INFO:               numpy: 1.26.4
2024-12-17 13:19:01,136:INFO:              pandas: 2.1.4
2024-12-17 13:19:01,136:INFO:              jinja2: 3.1.4
2024-12-17 13:19:01,136:INFO:               scipy: 1.11.4
2024-12-17 13:19:01,136:INFO:              joblib: 1.3.2
2024-12-17 13:19:01,136:INFO:             sklearn: 1.4.2
2024-12-17 13:19:01,136:INFO:                pyod: 2.0.2
2024-12-17 13:19:01,136:INFO:            imblearn: 0.12.4
2024-12-17 13:19:01,136:INFO:   category_encoders: 2.6.4
2024-12-17 13:19:01,136:INFO:            lightgbm: 4.5.0
2024-12-17 13:19:01,136:INFO:               numba: 0.60.0
2024-12-17 13:19:01,136:INFO:            requests: 2.32.3
2024-12-17 13:19:01,136:INFO:          matplotlib: 3.7.5
2024-12-17 13:19:01,136:INFO:          scikitplot: 0.3.7
2024-12-17 13:19:01,136:INFO:         yellowbrick: 1.5
2024-12-17 13:19:01,136:INFO:              plotly: 5.24.1
2024-12-17 13:19:01,136:INFO:    plotly-resampler: Not installed
2024-12-17 13:19:01,136:INFO:             kaleido: 0.2.1
2024-12-17 13:19:01,136:INFO:           schemdraw: 0.15
2024-12-17 13:19:01,136:INFO:         statsmodels: 0.14.4
2024-12-17 13:19:01,136:INFO:              sktime: 0.26.0
2024-12-17 13:19:01,136:INFO:               tbats: 1.1.3
2024-12-17 13:19:01,136:INFO:            pmdarima: 2.0.4
2024-12-17 13:19:01,136:INFO:              psutil: 6.1.0
2024-12-17 13:19:01,136:INFO:          markupsafe: 3.0.2
2024-12-17 13:19:01,136:INFO:             pickle5: Not installed
2024-12-17 13:19:01,136:INFO:         cloudpickle: 3.1.0
2024-12-17 13:19:01,136:INFO:         deprecation: 2.1.0
2024-12-17 13:19:01,136:INFO:              xxhash: 3.5.0
2024-12-17 13:19:01,136:INFO:           wurlitzer: Not installed
2024-12-17 13:19:01,136:INFO:PyCaret optional dependencies:
2024-12-17 13:19:01,256:INFO:                shap: Not installed
2024-12-17 13:19:01,256:INFO:           interpret: Not installed
2024-12-17 13:19:01,256:INFO:                umap: Not installed
2024-12-17 13:19:01,266:INFO:     ydata_profiling: Not installed
2024-12-17 13:19:01,267:INFO:  explainerdashboard: Not installed
2024-12-17 13:19:01,267:INFO:             autoviz: Not installed
2024-12-17 13:19:01,267:INFO:           fairlearn: Not installed
2024-12-17 13:19:01,268:INFO:          deepchecks: Not installed
2024-12-17 13:19:01,269:INFO:             xgboost: Not installed
2024-12-17 13:19:01,269:INFO:            catboost: Not installed
2024-12-17 13:19:01,269:INFO:              kmodes: Not installed
2024-12-17 13:19:01,270:INFO:             mlxtend: Not installed
2024-12-17 13:19:01,270:INFO:       statsforecast: Not installed
2024-12-17 13:19:01,270:INFO:        tune_sklearn: Not installed
2024-12-17 13:19:01,270:INFO:                 ray: Not installed
2024-12-17 13:19:01,270:INFO:            hyperopt: Not installed
2024-12-17 13:19:01,270:INFO:              optuna: Not installed
2024-12-17 13:19:01,270:INFO:               skopt: Not installed
2024-12-17 13:19:01,270:INFO:              mlflow: Not installed
2024-12-17 13:19:01,270:INFO:              gradio: Not installed
2024-12-17 13:19:01,270:INFO:             fastapi: Not installed
2024-12-17 13:19:01,270:INFO:             uvicorn: Not installed
2024-12-17 13:19:01,270:INFO:              m2cgen: Not installed
2024-12-17 13:19:01,270:INFO:           evidently: Not installed
2024-12-17 13:19:01,270:INFO:               fugue: Not installed
2024-12-17 13:19:01,270:INFO:           streamlit: 1.40.1
2024-12-17 13:19:01,270:INFO:             prophet: Not installed
2024-12-17 13:19:01,270:INFO:None
2024-12-17 13:19:01,270:INFO:Set up data.
2024-12-17 13:19:01,803:INFO:Set up folding strategy.
2024-12-17 13:19:01,803:INFO:Set up train/test split.
2024-12-17 13:19:01,969:INFO:Set up index.
2024-12-17 13:19:02,018:INFO:Assigning column types.
2024-12-17 13:19:02,018:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-17 13:19:02,018:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,033:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,033:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,187:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,446:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,467:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:02,468:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:02,468:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,526:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,535:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,701:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,817:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,817:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:02,817:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:02,817:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-17 13:19:02,834:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,835:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:02,966:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,090:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,090:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,105:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,116:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,251:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,353:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,367:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-17 13:19:03,387:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,500:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,668:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,669:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,669:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,684:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,850:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,966:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:03,967:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:03,968:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-17 13:19:04,117:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:04,219:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:04,233:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,234:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,402:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:04,518:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-17 13:19:04,518:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,518:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,518:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-17 13:19:04,699:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:04,819:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,819:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:04,969:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-17 13:19:05,183:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,183:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,183:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-17 13:19:05,450:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,450:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,766:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:05,790:INFO:Preparing preprocessing pipeline...
2024-12-17 13:19:05,790:INFO:Set up simple imputation.
2024-12-17 13:19:05,800:INFO:Set up encoding of categorical features.
2024-12-17 13:19:05,800:INFO:Set up column name cleaning.
2024-12-17 13:19:08,121:INFO:Finished creating preprocessing pipeline.
2024-12-17 13:19:08,235:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Size (sqm)', 'Bedrooms',
                                             'Bathrooms',
                                             'Electricity (hours/day)'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Location', 'Property Type'],
                                    transformer=OneHotEncoder(cols=['Location',
                                                                    'Property '
                                                                    'Type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-17 13:19:08,235:INFO:Creating final display dataframe.
2024-12-17 13:19:09,033:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Price (₦)
2                   Target type        Regression
3           Original data shape           (84, 7)
4        Transformed data shape          (84, 15)
5   Transformed train set shape          (58, 15)
6    Transformed test set shape          (26, 15)
7              Numeric features                 4
8          Categorical features                 2
9      Rows with missing values              8.3%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              b7bb
2024-12-17 13:19:09,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:09,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:09,701:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:09,701:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-17 13:19:09,701:INFO:setup() successfully completed in 11.37s...............
2024-12-17 13:19:09,747:INFO:Initializing compare_models()
2024-12-17 13:19:09,747:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2024-12-17 13:19:09,747:INFO:Checking exceptions
2024-12-17 13:19:09,758:INFO:Preparing display monitor
2024-12-17 13:19:09,921:INFO:Initializing Linear Regression
2024-12-17 13:19:09,921:INFO:Total runtime is 1.662572224934896e-05 minutes
2024-12-17 13:19:09,929:INFO:SubProcess create_model() called ==================================
2024-12-17 13:19:09,933:INFO:Initializing create_model()
2024-12-17 13:19:09,933:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:19:09,936:INFO:Checking exceptions
2024-12-17 13:19:09,936:INFO:Importing libraries
2024-12-17 13:19:09,936:INFO:Copying training dataset
2024-12-17 13:19:09,948:INFO:Defining folds
2024-12-17 13:19:09,949:INFO:Declaring metric variables
2024-12-17 13:19:09,968:INFO:Importing untrained model
2024-12-17 13:19:10,010:INFO:Linear Regression Imported successfully
2024-12-17 13:19:10,055:INFO:Starting cross validation
2024-12-17 13:19:10,159:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:11,232:INFO:Calculating mean and std
2024-12-17 13:20:11,235:INFO:Creating metrics dataframe
2024-12-17 13:20:11,261:INFO:Uploading results into container
2024-12-17 13:20:11,266:INFO:Uploading model into container now
2024-12-17 13:20:11,268:INFO:_master_model_container: 1
2024-12-17 13:20:11,268:INFO:_display_container: 2
2024-12-17 13:20:11,272:INFO:LinearRegression(n_jobs=-1)
2024-12-17 13:20:11,272:INFO:create_model() successfully completed......................................
2024-12-17 13:20:11,385:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:11,385:INFO:Creating metrics dataframe
2024-12-17 13:20:11,456:INFO:Initializing Lasso Regression
2024-12-17 13:20:11,457:INFO:Total runtime is 1.0256211519241334 minutes
2024-12-17 13:20:11,477:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:11,480:INFO:Initializing create_model()
2024-12-17 13:20:11,480:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:11,480:INFO:Checking exceptions
2024-12-17 13:20:11,480:INFO:Importing libraries
2024-12-17 13:20:11,480:INFO:Copying training dataset
2024-12-17 13:20:11,507:INFO:Defining folds
2024-12-17 13:20:11,508:INFO:Declaring metric variables
2024-12-17 13:20:11,524:INFO:Importing untrained model
2024-12-17 13:20:11,537:INFO:Lasso Regression Imported successfully
2024-12-17 13:20:11,562:INFO:Starting cross validation
2024-12-17 13:20:11,571:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:12,044:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 5.070e+14, tolerance: 6.272e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,044:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.152e+14, tolerance: 6.605e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,044:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.916e+14, tolerance: 6.764e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,346:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.381e+14, tolerance: 6.650e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,346:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.624e+14, tolerance: 7.080e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,346:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 6.625e+13, tolerance: 6.745e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,378:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 4.795e+14, tolerance: 6.151e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,570:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.509e+14, tolerance: 6.523e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,570:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 2.593e+14, tolerance: 6.609e+11
  model = cd_fast.enet_coordinate_descent(

2024-12-17 13:20:12,683:INFO:Calculating mean and std
2024-12-17 13:20:12,693:INFO:Creating metrics dataframe
2024-12-17 13:20:12,734:INFO:Uploading results into container
2024-12-17 13:20:12,735:INFO:Uploading model into container now
2024-12-17 13:20:12,735:INFO:_master_model_container: 2
2024-12-17 13:20:12,735:INFO:_display_container: 2
2024-12-17 13:20:12,735:INFO:Lasso(random_state=123)
2024-12-17 13:20:12,735:INFO:create_model() successfully completed......................................
2024-12-17 13:20:12,843:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:12,843:INFO:Creating metrics dataframe
2024-12-17 13:20:12,875:INFO:Initializing Ridge Regression
2024-12-17 13:20:12,875:INFO:Total runtime is 1.049244503180186 minutes
2024-12-17 13:20:12,885:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:12,887:INFO:Initializing create_model()
2024-12-17 13:20:12,888:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:12,888:INFO:Checking exceptions
2024-12-17 13:20:12,888:INFO:Importing libraries
2024-12-17 13:20:12,889:INFO:Copying training dataset
2024-12-17 13:20:12,900:INFO:Defining folds
2024-12-17 13:20:12,900:INFO:Declaring metric variables
2024-12-17 13:20:12,908:INFO:Importing untrained model
2024-12-17 13:20:12,935:INFO:Ridge Regression Imported successfully
2024-12-17 13:20:12,978:INFO:Starting cross validation
2024-12-17 13:20:12,986:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:14,315:INFO:Calculating mean and std
2024-12-17 13:20:14,317:INFO:Creating metrics dataframe
2024-12-17 13:20:14,328:INFO:Uploading results into container
2024-12-17 13:20:14,331:INFO:Uploading model into container now
2024-12-17 13:20:14,333:INFO:_master_model_container: 3
2024-12-17 13:20:14,333:INFO:_display_container: 2
2024-12-17 13:20:14,334:INFO:Ridge(random_state=123)
2024-12-17 13:20:14,334:INFO:create_model() successfully completed......................................
2024-12-17 13:20:14,432:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:14,433:INFO:Creating metrics dataframe
2024-12-17 13:20:14,445:INFO:Initializing Elastic Net
2024-12-17 13:20:14,445:INFO:Total runtime is 1.0754260818163555 minutes
2024-12-17 13:20:14,455:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:14,456:INFO:Initializing create_model()
2024-12-17 13:20:14,457:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:14,457:INFO:Checking exceptions
2024-12-17 13:20:14,458:INFO:Importing libraries
2024-12-17 13:20:14,459:INFO:Copying training dataset
2024-12-17 13:20:14,472:INFO:Defining folds
2024-12-17 13:20:14,472:INFO:Declaring metric variables
2024-12-17 13:20:14,490:INFO:Importing untrained model
2024-12-17 13:20:14,512:INFO:Elastic Net Imported successfully
2024-12-17 13:20:14,546:INFO:Starting cross validation
2024-12-17 13:20:14,558:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:15,382:INFO:Calculating mean and std
2024-12-17 13:20:15,384:INFO:Creating metrics dataframe
2024-12-17 13:20:15,388:INFO:Uploading results into container
2024-12-17 13:20:15,389:INFO:Uploading model into container now
2024-12-17 13:20:15,389:INFO:_master_model_container: 4
2024-12-17 13:20:15,389:INFO:_display_container: 2
2024-12-17 13:20:15,390:INFO:ElasticNet(random_state=123)
2024-12-17 13:20:15,390:INFO:create_model() successfully completed......................................
2024-12-17 13:20:15,487:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:15,487:INFO:Creating metrics dataframe
2024-12-17 13:20:15,511:INFO:Initializing Least Angle Regression
2024-12-17 13:20:15,512:INFO:Total runtime is 1.0931796709696453 minutes
2024-12-17 13:20:15,526:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:15,527:INFO:Initializing create_model()
2024-12-17 13:20:15,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:15,527:INFO:Checking exceptions
2024-12-17 13:20:15,528:INFO:Importing libraries
2024-12-17 13:20:15,528:INFO:Copying training dataset
2024-12-17 13:20:15,541:INFO:Defining folds
2024-12-17 13:20:15,541:INFO:Declaring metric variables
2024-12-17 13:20:15,551:INFO:Importing untrained model
2024-12-17 13:20:15,559:INFO:Least Angle Regression Imported successfully
2024-12-17 13:20:15,584:INFO:Starting cross validation
2024-12-17 13:20:15,592:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:16,830:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-17 13:20:16,834:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 13 iterations, i.e. alpha=1.778e+05, with an active set of 12 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-17 13:20:16,899:INFO:Calculating mean and std
2024-12-17 13:20:16,901:INFO:Creating metrics dataframe
2024-12-17 13:20:16,911:INFO:Uploading results into container
2024-12-17 13:20:16,918:INFO:Uploading model into container now
2024-12-17 13:20:16,920:INFO:_master_model_container: 5
2024-12-17 13:20:16,920:INFO:_display_container: 2
2024-12-17 13:20:16,920:INFO:Lars(random_state=123)
2024-12-17 13:20:16,920:INFO:create_model() successfully completed......................................
2024-12-17 13:20:17,019:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:17,020:INFO:Creating metrics dataframe
2024-12-17 13:20:17,039:INFO:Initializing Lasso Least Angle Regression
2024-12-17 13:20:17,039:INFO:Total runtime is 1.1186532417933148 minutes
2024-12-17 13:20:17,046:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:17,049:INFO:Initializing create_model()
2024-12-17 13:20:17,050:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:17,050:INFO:Checking exceptions
2024-12-17 13:20:17,050:INFO:Importing libraries
2024-12-17 13:20:17,050:INFO:Copying training dataset
2024-12-17 13:20:17,060:INFO:Defining folds
2024-12-17 13:20:17,061:INFO:Declaring metric variables
2024-12-17 13:20:17,075:INFO:Importing untrained model
2024-12-17 13:20:17,084:INFO:Lasso Least Angle Regression Imported successfully
2024-12-17 13:20:17,126:INFO:Starting cross validation
2024-12-17 13:20:17,134:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:17,916:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 11 iterations, i.e. alpha=2.598e+05, with an active set of 11 regressors, and the smallest cholesky pivot element being 2.980e-08. Reduce max_iter or increase eps parameters.
  warnings.warn(

2024-12-17 13:20:17,916:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_least_angle.py:718: ConvergenceWarning: Early stopping the lars path, as the residues are small and the current value of alpha is no longer well controlled. 12 iterations, alpha=2.141e+05, previous alpha=1.778e+05, with an active set of 11 regressors.
  warnings.warn(

2024-12-17 13:20:17,975:INFO:Calculating mean and std
2024-12-17 13:20:17,977:INFO:Creating metrics dataframe
2024-12-17 13:20:17,981:INFO:Uploading results into container
2024-12-17 13:20:17,982:INFO:Uploading model into container now
2024-12-17 13:20:17,983:INFO:_master_model_container: 6
2024-12-17 13:20:17,983:INFO:_display_container: 2
2024-12-17 13:20:17,983:INFO:LassoLars(random_state=123)
2024-12-17 13:20:17,983:INFO:create_model() successfully completed......................................
2024-12-17 13:20:18,085:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:18,085:INFO:Creating metrics dataframe
2024-12-17 13:20:18,115:INFO:Initializing Orthogonal Matching Pursuit
2024-12-17 13:20:18,116:INFO:Total runtime is 1.1366039991378787 minutes
2024-12-17 13:20:18,125:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:18,125:INFO:Initializing create_model()
2024-12-17 13:20:18,125:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:18,125:INFO:Checking exceptions
2024-12-17 13:20:18,126:INFO:Importing libraries
2024-12-17 13:20:18,126:INFO:Copying training dataset
2024-12-17 13:20:18,140:INFO:Defining folds
2024-12-17 13:20:18,142:INFO:Declaring metric variables
2024-12-17 13:20:18,156:INFO:Importing untrained model
2024-12-17 13:20:18,188:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-17 13:20:18,213:INFO:Starting cross validation
2024-12-17 13:20:18,224:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:19,016:INFO:Calculating mean and std
2024-12-17 13:20:19,017:INFO:Creating metrics dataframe
2024-12-17 13:20:19,021:INFO:Uploading results into container
2024-12-17 13:20:19,022:INFO:Uploading model into container now
2024-12-17 13:20:19,022:INFO:_master_model_container: 7
2024-12-17 13:20:19,022:INFO:_display_container: 2
2024-12-17 13:20:19,023:INFO:OrthogonalMatchingPursuit()
2024-12-17 13:20:19,023:INFO:create_model() successfully completed......................................
2024-12-17 13:20:19,119:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:19,122:INFO:Creating metrics dataframe
2024-12-17 13:20:19,143:INFO:Initializing Bayesian Ridge
2024-12-17 13:20:19,143:INFO:Total runtime is 1.1537141402562463 minutes
2024-12-17 13:20:19,152:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:19,155:INFO:Initializing create_model()
2024-12-17 13:20:19,156:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:19,157:INFO:Checking exceptions
2024-12-17 13:20:19,157:INFO:Importing libraries
2024-12-17 13:20:19,158:INFO:Copying training dataset
2024-12-17 13:20:19,167:INFO:Defining folds
2024-12-17 13:20:19,167:INFO:Declaring metric variables
2024-12-17 13:20:19,176:INFO:Importing untrained model
2024-12-17 13:20:19,198:INFO:Bayesian Ridge Imported successfully
2024-12-17 13:20:19,240:INFO:Starting cross validation
2024-12-17 13:20:19,248:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:20,917:INFO:Calculating mean and std
2024-12-17 13:20:20,919:INFO:Creating metrics dataframe
2024-12-17 13:20:20,922:INFO:Uploading results into container
2024-12-17 13:20:20,923:INFO:Uploading model into container now
2024-12-17 13:20:20,923:INFO:_master_model_container: 8
2024-12-17 13:20:20,923:INFO:_display_container: 2
2024-12-17 13:20:20,924:INFO:BayesianRidge()
2024-12-17 13:20:20,924:INFO:create_model() successfully completed......................................
2024-12-17 13:20:21,023:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:21,024:INFO:Creating metrics dataframe
2024-12-17 13:20:21,055:INFO:Initializing Passive Aggressive Regressor
2024-12-17 13:20:21,055:INFO:Total runtime is 1.1855885545412703 minutes
2024-12-17 13:20:21,061:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:21,066:INFO:Initializing create_model()
2024-12-17 13:20:21,066:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:21,067:INFO:Checking exceptions
2024-12-17 13:20:21,067:INFO:Importing libraries
2024-12-17 13:20:21,068:INFO:Copying training dataset
2024-12-17 13:20:21,077:INFO:Defining folds
2024-12-17 13:20:21,077:INFO:Declaring metric variables
2024-12-17 13:20:21,088:INFO:Importing untrained model
2024-12-17 13:20:21,106:INFO:Passive Aggressive Regressor Imported successfully
2024-12-17 13:20:21,142:INFO:Starting cross validation
2024-12-17 13:20:21,155:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:22,749:INFO:Calculating mean and std
2024-12-17 13:20:22,751:INFO:Creating metrics dataframe
2024-12-17 13:20:22,762:INFO:Uploading results into container
2024-12-17 13:20:22,766:INFO:Uploading model into container now
2024-12-17 13:20:22,767:INFO:_master_model_container: 9
2024-12-17 13:20:22,767:INFO:_display_container: 2
2024-12-17 13:20:22,768:INFO:PassiveAggressiveRegressor(random_state=123)
2024-12-17 13:20:22,768:INFO:create_model() successfully completed......................................
2024-12-17 13:20:22,866:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:22,866:INFO:Creating metrics dataframe
2024-12-17 13:20:22,883:INFO:Initializing Huber Regressor
2024-12-17 13:20:22,883:INFO:Total runtime is 1.2160479744275414 minutes
2024-12-17 13:20:22,889:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:22,890:INFO:Initializing create_model()
2024-12-17 13:20:22,891:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:22,892:INFO:Checking exceptions
2024-12-17 13:20:22,893:INFO:Importing libraries
2024-12-17 13:20:22,894:INFO:Copying training dataset
2024-12-17 13:20:22,904:INFO:Defining folds
2024-12-17 13:20:22,904:INFO:Declaring metric variables
2024-12-17 13:20:22,915:INFO:Importing untrained model
2024-12-17 13:20:22,930:INFO:Huber Regressor Imported successfully
2024-12-17 13:20:23,005:INFO:Starting cross validation
2024-12-17 13:20:23,023:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:23,618:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-17 13:20:24,001:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-17 13:20:24,232:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2024-12-17 13:20:24,299:INFO:Calculating mean and std
2024-12-17 13:20:24,301:INFO:Creating metrics dataframe
2024-12-17 13:20:24,305:INFO:Uploading results into container
2024-12-17 13:20:24,305:INFO:Uploading model into container now
2024-12-17 13:20:24,306:INFO:_master_model_container: 10
2024-12-17 13:20:24,306:INFO:_display_container: 2
2024-12-17 13:20:24,306:INFO:HuberRegressor()
2024-12-17 13:20:24,306:INFO:create_model() successfully completed......................................
2024-12-17 13:20:24,404:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:24,405:INFO:Creating metrics dataframe
2024-12-17 13:20:24,438:INFO:Initializing K Neighbors Regressor
2024-12-17 13:20:24,438:INFO:Total runtime is 1.2419755061467492 minutes
2024-12-17 13:20:24,448:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:24,451:INFO:Initializing create_model()
2024-12-17 13:20:24,452:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:24,452:INFO:Checking exceptions
2024-12-17 13:20:24,454:INFO:Importing libraries
2024-12-17 13:20:24,454:INFO:Copying training dataset
2024-12-17 13:20:24,461:INFO:Defining folds
2024-12-17 13:20:24,462:INFO:Declaring metric variables
2024-12-17 13:20:24,476:INFO:Importing untrained model
2024-12-17 13:20:24,487:INFO:K Neighbors Regressor Imported successfully
2024-12-17 13:20:24,532:INFO:Starting cross validation
2024-12-17 13:20:24,539:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:25,649:INFO:Calculating mean and std
2024-12-17 13:20:25,651:INFO:Creating metrics dataframe
2024-12-17 13:20:25,655:INFO:Uploading results into container
2024-12-17 13:20:25,656:INFO:Uploading model into container now
2024-12-17 13:20:25,656:INFO:_master_model_container: 11
2024-12-17 13:20:25,656:INFO:_display_container: 2
2024-12-17 13:20:25,657:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-17 13:20:25,657:INFO:create_model() successfully completed......................................
2024-12-17 13:20:25,759:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:25,760:INFO:Creating metrics dataframe
2024-12-17 13:20:25,789:INFO:Initializing Decision Tree Regressor
2024-12-17 13:20:25,790:INFO:Total runtime is 1.2644974549611414 minutes
2024-12-17 13:20:25,802:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:25,802:INFO:Initializing create_model()
2024-12-17 13:20:25,803:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:25,803:INFO:Checking exceptions
2024-12-17 13:20:25,803:INFO:Importing libraries
2024-12-17 13:20:25,803:INFO:Copying training dataset
2024-12-17 13:20:25,810:INFO:Defining folds
2024-12-17 13:20:25,810:INFO:Declaring metric variables
2024-12-17 13:20:25,823:INFO:Importing untrained model
2024-12-17 13:20:25,855:INFO:Decision Tree Regressor Imported successfully
2024-12-17 13:20:25,884:INFO:Starting cross validation
2024-12-17 13:20:25,893:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:26,882:INFO:Calculating mean and std
2024-12-17 13:20:26,885:INFO:Creating metrics dataframe
2024-12-17 13:20:26,888:INFO:Uploading results into container
2024-12-17 13:20:26,889:INFO:Uploading model into container now
2024-12-17 13:20:26,890:INFO:_master_model_container: 12
2024-12-17 13:20:26,890:INFO:_display_container: 2
2024-12-17 13:20:26,894:INFO:DecisionTreeRegressor(random_state=123)
2024-12-17 13:20:26,894:INFO:create_model() successfully completed......................................
2024-12-17 13:20:27,002:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:27,002:INFO:Creating metrics dataframe
2024-12-17 13:20:27,027:INFO:Initializing Random Forest Regressor
2024-12-17 13:20:27,027:INFO:Total runtime is 1.2851150353749599 minutes
2024-12-17 13:20:27,036:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:27,038:INFO:Initializing create_model()
2024-12-17 13:20:27,038:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:27,039:INFO:Checking exceptions
2024-12-17 13:20:27,039:INFO:Importing libraries
2024-12-17 13:20:27,039:INFO:Copying training dataset
2024-12-17 13:20:27,053:INFO:Defining folds
2024-12-17 13:20:27,053:INFO:Declaring metric variables
2024-12-17 13:20:27,066:INFO:Importing untrained model
2024-12-17 13:20:27,094:INFO:Random Forest Regressor Imported successfully
2024-12-17 13:20:27,133:INFO:Starting cross validation
2024-12-17 13:20:27,138:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:29,500:INFO:Calculating mean and std
2024-12-17 13:20:29,502:INFO:Creating metrics dataframe
2024-12-17 13:20:29,505:INFO:Uploading results into container
2024-12-17 13:20:29,506:INFO:Uploading model into container now
2024-12-17 13:20:29,507:INFO:_master_model_container: 13
2024-12-17 13:20:29,507:INFO:_display_container: 2
2024-12-17 13:20:29,507:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2024-12-17 13:20:29,507:INFO:create_model() successfully completed......................................
2024-12-17 13:20:29,608:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:29,609:INFO:Creating metrics dataframe
2024-12-17 13:20:29,643:INFO:Initializing Extra Trees Regressor
2024-12-17 13:20:29,643:INFO:Total runtime is 1.3287120103836065 minutes
2024-12-17 13:20:29,653:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:29,654:INFO:Initializing create_model()
2024-12-17 13:20:29,655:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:29,655:INFO:Checking exceptions
2024-12-17 13:20:29,656:INFO:Importing libraries
2024-12-17 13:20:29,656:INFO:Copying training dataset
2024-12-17 13:20:29,669:INFO:Defining folds
2024-12-17 13:20:29,670:INFO:Declaring metric variables
2024-12-17 13:20:29,686:INFO:Importing untrained model
2024-12-17 13:20:29,700:INFO:Extra Trees Regressor Imported successfully
2024-12-17 13:20:29,740:INFO:Starting cross validation
2024-12-17 13:20:29,749:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:31,647:INFO:Calculating mean and std
2024-12-17 13:20:31,650:INFO:Creating metrics dataframe
2024-12-17 13:20:31,658:INFO:Uploading results into container
2024-12-17 13:20:31,660:INFO:Uploading model into container now
2024-12-17 13:20:31,661:INFO:_master_model_container: 14
2024-12-17 13:20:31,661:INFO:_display_container: 2
2024-12-17 13:20:31,662:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2024-12-17 13:20:31,662:INFO:create_model() successfully completed......................................
2024-12-17 13:20:31,770:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:31,770:INFO:Creating metrics dataframe
2024-12-17 13:20:31,789:INFO:Initializing AdaBoost Regressor
2024-12-17 13:20:31,790:INFO:Total runtime is 1.3644809007644658 minutes
2024-12-17 13:20:31,806:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:31,806:INFO:Initializing create_model()
2024-12-17 13:20:31,806:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:31,806:INFO:Checking exceptions
2024-12-17 13:20:31,806:INFO:Importing libraries
2024-12-17 13:20:31,806:INFO:Copying training dataset
2024-12-17 13:20:31,824:INFO:Defining folds
2024-12-17 13:20:31,824:INFO:Declaring metric variables
2024-12-17 13:20:31,855:INFO:Importing untrained model
2024-12-17 13:20:31,882:INFO:AdaBoost Regressor Imported successfully
2024-12-17 13:20:31,933:INFO:Starting cross validation
2024-12-17 13:20:31,947:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:33,832:INFO:Calculating mean and std
2024-12-17 13:20:33,836:INFO:Creating metrics dataframe
2024-12-17 13:20:33,839:INFO:Uploading results into container
2024-12-17 13:20:33,842:INFO:Uploading model into container now
2024-12-17 13:20:33,849:INFO:_master_model_container: 15
2024-12-17 13:20:33,849:INFO:_display_container: 2
2024-12-17 13:20:33,853:INFO:AdaBoostRegressor(random_state=123)
2024-12-17 13:20:33,853:INFO:create_model() successfully completed......................................
2024-12-17 13:20:33,951:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:33,952:INFO:Creating metrics dataframe
2024-12-17 13:20:33,972:INFO:Initializing Gradient Boosting Regressor
2024-12-17 13:20:33,972:INFO:Total runtime is 1.4008719682693487 minutes
2024-12-17 13:20:33,979:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:33,983:INFO:Initializing create_model()
2024-12-17 13:20:33,983:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:33,984:INFO:Checking exceptions
2024-12-17 13:20:33,984:INFO:Importing libraries
2024-12-17 13:20:33,984:INFO:Copying training dataset
2024-12-17 13:20:33,994:INFO:Defining folds
2024-12-17 13:20:33,994:INFO:Declaring metric variables
2024-12-17 13:20:34,007:INFO:Importing untrained model
2024-12-17 13:20:34,018:INFO:Gradient Boosting Regressor Imported successfully
2024-12-17 13:20:34,057:INFO:Starting cross validation
2024-12-17 13:20:34,065:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:35,747:INFO:Calculating mean and std
2024-12-17 13:20:36,978:INFO:Creating metrics dataframe
2024-12-17 13:20:37,009:INFO:Uploading results into container
2024-12-17 13:20:37,012:INFO:Uploading model into container now
2024-12-17 13:20:37,016:INFO:_master_model_container: 16
2024-12-17 13:20:37,017:INFO:_display_container: 2
2024-12-17 13:20:37,018:INFO:GradientBoostingRegressor(random_state=123)
2024-12-17 13:20:37,018:INFO:create_model() successfully completed......................................
2024-12-17 13:20:37,150:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:37,150:INFO:Creating metrics dataframe
2024-12-17 13:20:37,195:INFO:Initializing Light Gradient Boosting Machine
2024-12-17 13:20:37,195:INFO:Total runtime is 1.4545805493990585 minutes
2024-12-17 13:20:37,206:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:37,206:INFO:Initializing create_model()
2024-12-17 13:20:37,207:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:37,207:INFO:Checking exceptions
2024-12-17 13:20:37,207:INFO:Importing libraries
2024-12-17 13:20:37,208:INFO:Copying training dataset
2024-12-17 13:20:37,220:INFO:Defining folds
2024-12-17 13:20:37,220:INFO:Declaring metric variables
2024-12-17 13:20:37,227:INFO:Importing untrained model
2024-12-17 13:20:37,250:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-17 13:20:37,290:INFO:Starting cross validation
2024-12-17 13:20:37,294:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:39,640:INFO:Calculating mean and std
2024-12-17 13:20:39,641:INFO:Creating metrics dataframe
2024-12-17 13:20:39,654:INFO:Uploading results into container
2024-12-17 13:20:39,654:INFO:Uploading model into container now
2024-12-17 13:20:39,654:INFO:_master_model_container: 17
2024-12-17 13:20:39,654:INFO:_display_container: 2
2024-12-17 13:20:39,654:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2024-12-17 13:20:39,654:INFO:create_model() successfully completed......................................
2024-12-17 13:20:39,767:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:39,767:INFO:Creating metrics dataframe
2024-12-17 13:20:39,803:INFO:Initializing Dummy Regressor
2024-12-17 13:20:39,803:INFO:Total runtime is 1.498045893510183 minutes
2024-12-17 13:20:39,808:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:39,809:INFO:Initializing create_model()
2024-12-17 13:20:39,810:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B92BB310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:39,812:INFO:Checking exceptions
2024-12-17 13:20:39,812:INFO:Importing libraries
2024-12-17 13:20:39,815:INFO:Copying training dataset
2024-12-17 13:20:39,824:INFO:Defining folds
2024-12-17 13:20:39,824:INFO:Declaring metric variables
2024-12-17 13:20:39,834:INFO:Importing untrained model
2024-12-17 13:20:39,857:INFO:Dummy Regressor Imported successfully
2024-12-17 13:20:39,884:INFO:Starting cross validation
2024-12-17 13:20:39,892:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:40,698:INFO:Calculating mean and std
2024-12-17 13:20:40,701:INFO:Creating metrics dataframe
2024-12-17 13:20:40,705:INFO:Uploading results into container
2024-12-17 13:20:40,706:INFO:Uploading model into container now
2024-12-17 13:20:40,710:INFO:_master_model_container: 18
2024-12-17 13:20:40,710:INFO:_display_container: 2
2024-12-17 13:20:40,711:INFO:DummyRegressor()
2024-12-17 13:20:40,711:INFO:create_model() successfully completed......................................
2024-12-17 13:20:40,799:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:40,799:INFO:Creating metrics dataframe
2024-12-17 13:20:40,935:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-17 13:20:40,988:INFO:Initializing create_model()
2024-12-17 13:20:40,989:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:40,989:INFO:Checking exceptions
2024-12-17 13:20:40,993:INFO:Importing libraries
2024-12-17 13:20:40,993:INFO:Copying training dataset
2024-12-17 13:20:41,020:INFO:Defining folds
2024-12-17 13:20:41,020:INFO:Declaring metric variables
2024-12-17 13:20:41,020:INFO:Importing untrained model
2024-12-17 13:20:41,020:INFO:Declaring custom model
2024-12-17 13:20:41,025:INFO:Bayesian Ridge Imported successfully
2024-12-17 13:20:41,025:INFO:Cross validation set to False
2024-12-17 13:20:41,025:INFO:Fitting Model
2024-12-17 13:20:41,117:INFO:BayesianRidge()
2024-12-17 13:20:41,117:INFO:create_model() successfully completed......................................
2024-12-17 13:20:41,335:INFO:_master_model_container: 18
2024-12-17 13:20:41,336:INFO:_display_container: 2
2024-12-17 13:20:41,337:INFO:BayesianRidge()
2024-12-17 13:20:41,337:INFO:compare_models() successfully completed......................................
2024-12-17 13:20:41,451:INFO:Initializing tune_model()
2024-12-17 13:20:41,452:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>)
2024-12-17 13:20:41,453:INFO:Checking exceptions
2024-12-17 13:20:41,557:INFO:Copying training dataset
2024-12-17 13:20:41,572:INFO:Checking base model
2024-12-17 13:20:41,572:INFO:Base model : Bayesian Ridge
2024-12-17 13:20:41,592:INFO:Declaring metric variables
2024-12-17 13:20:41,619:INFO:Defining Hyperparameters
2024-12-17 13:20:41,809:INFO:Tuning with n_jobs=-1
2024-12-17 13:20:41,809:INFO:Initializing RandomizedSearchCV
2024-12-17 13:20:49,552:INFO:best_params: {'actual_estimator__lambda_2': 1e-07, 'actual_estimator__lambda_1': 0.0005, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 0.2, 'actual_estimator__alpha_1': 0.1}
2024-12-17 13:20:49,555:INFO:Hyperparameter search completed
2024-12-17 13:20:49,557:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:49,558:INFO:Initializing create_model()
2024-12-17 13:20:49,559:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D9B912F0D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 1e-07, 'lambda_1': 0.0005, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 0.2, 'alpha_1': 0.1})
2024-12-17 13:20:49,559:INFO:Checking exceptions
2024-12-17 13:20:49,559:INFO:Importing libraries
2024-12-17 13:20:49,559:INFO:Copying training dataset
2024-12-17 13:20:49,606:INFO:Defining folds
2024-12-17 13:20:49,606:INFO:Declaring metric variables
2024-12-17 13:20:49,619:INFO:Importing untrained model
2024-12-17 13:20:49,620:INFO:Declaring custom model
2024-12-17 13:20:49,639:INFO:Bayesian Ridge Imported successfully
2024-12-17 13:20:49,657:INFO:Starting cross validation
2024-12-17 13:20:49,663:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:50,432:INFO:Calculating mean and std
2024-12-17 13:20:50,434:INFO:Creating metrics dataframe
2024-12-17 13:20:50,446:INFO:Finalizing model
2024-12-17 13:20:50,559:INFO:Uploading results into container
2024-12-17 13:20:50,561:INFO:Uploading model into container now
2024-12-17 13:20:50,566:INFO:_master_model_container: 19
2024-12-17 13:20:50,568:INFO:_display_container: 3
2024-12-17 13:20:50,569:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07)
2024-12-17 13:20:50,569:INFO:create_model() successfully completed......................................
2024-12-17 13:20:50,665:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:50,665:INFO:choose_better activated
2024-12-17 13:20:50,673:INFO:SubProcess create_model() called ==================================
2024-12-17 13:20:50,674:INFO:Initializing create_model()
2024-12-17 13:20:50,674:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9B92BB520>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-17 13:20:50,675:INFO:Checking exceptions
2024-12-17 13:20:50,677:INFO:Importing libraries
2024-12-17 13:20:50,677:INFO:Copying training dataset
2024-12-17 13:20:50,687:INFO:Defining folds
2024-12-17 13:20:50,687:INFO:Declaring metric variables
2024-12-17 13:20:50,687:INFO:Importing untrained model
2024-12-17 13:20:50,687:INFO:Declaring custom model
2024-12-17 13:20:50,687:INFO:Bayesian Ridge Imported successfully
2024-12-17 13:20:50,687:INFO:Starting cross validation
2024-12-17 13:20:50,687:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-17 13:20:51,547:INFO:Calculating mean and std
2024-12-17 13:20:51,549:INFO:Creating metrics dataframe
2024-12-17 13:20:51,550:INFO:Finalizing model
2024-12-17 13:20:51,631:INFO:Uploading results into container
2024-12-17 13:20:51,631:INFO:Uploading model into container now
2024-12-17 13:20:51,631:INFO:_master_model_container: 20
2024-12-17 13:20:51,631:INFO:_display_container: 4
2024-12-17 13:20:51,631:INFO:BayesianRidge()
2024-12-17 13:20:51,631:INFO:create_model() successfully completed......................................
2024-12-17 13:20:51,732:INFO:SubProcess create_model() end ==================================
2024-12-17 13:20:51,732:INFO:BayesianRidge() result for R2 is -0.2391
2024-12-17 13:20:51,732:INFO:BayesianRidge(alpha_1=0.1, alpha_2=0.2, lambda_1=0.0005, lambda_2=1e-07) result for R2 is -0.2391
2024-12-17 13:20:51,732:INFO:BayesianRidge() is best model
2024-12-17 13:20:51,732:INFO:choose_better completed
2024-12-17 13:20:51,732:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-12-17 13:20:51,771:INFO:_master_model_container: 20
2024-12-17 13:20:51,771:INFO:_display_container: 3
2024-12-17 13:20:51,772:INFO:BayesianRidge()
2024-12-17 13:20:51,773:INFO:tune_model() successfully completed......................................
2024-12-18 23:30:29,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-18 23:30:29,167:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-18 23:30:29,168:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-18 23:30:29,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-18 23:30:36,852:INFO:PyCaret RegressionExperiment
2024-12-18 23:30:36,853:INFO:Logging name: reg-default-name
2024-12-18 23:30:36,853:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-18 23:30:36,853:INFO:version 3.3.2
2024-12-18 23:30:36,855:INFO:Initializing setup()
2024-12-18 23:30:36,855:INFO:self.USI: 3277
2024-12-18 23:30:36,855:INFO:self._variable_keys: {'pipeline', 'log_plots_param', 'gpu_param', 'memory', 'X_train', 'fold_shuffle_param', '_ml_usecase', 'y', 'y_test', 'X', 'X_test', 'seed', 'y_train', 'data', 'transform_target_param', 'fold_generator', 'fold_groups_param', 'exp_name_log', 'exp_id', 'idx', 'html_param', 'gpu_n_jobs_param', 'USI', 'logging_param', 'target_param', '_available_plots', 'n_jobs_param'}
2024-12-18 23:30:36,856:INFO:Checking environment
2024-12-18 23:30:36,856:INFO:python_version: 3.10.15
2024-12-18 23:30:36,856:INFO:python_build: ('main', 'Oct  3 2024 07:22:19')
2024-12-18 23:30:36,856:INFO:machine: AMD64
2024-12-18 23:30:36,856:INFO:platform: Windows-10-10.0.19045-SP0
2024-12-18 23:30:36,862:INFO:Memory: svmem(total=4207841280, available=252174336, percent=94.0, used=3955666944, free=252174336)
2024-12-18 23:30:36,862:INFO:Physical Core: 2
2024-12-18 23:30:36,862:INFO:Logical Core: 4
2024-12-18 23:30:36,862:INFO:Checking libraries
2024-12-18 23:30:36,869:INFO:System:
2024-12-18 23:30:36,869:INFO:    python: 3.10.15 | packaged by Anaconda, Inc. | (main, Oct  3 2024, 07:22:19) [MSC v.1929 64 bit (AMD64)]
2024-12-18 23:30:36,869:INFO:executable: c:\Users\joy\anaconda3\envs\tcm_venv\python.exe
2024-12-18 23:30:36,869:INFO:   machine: Windows-10-10.0.19045-SP0
2024-12-18 23:30:36,869:INFO:PyCaret required dependencies:
2024-12-18 23:30:37,871:INFO:                 pip: 24.2
2024-12-18 23:30:37,871:INFO:          setuptools: 75.1.0
2024-12-18 23:30:37,871:INFO:             pycaret: 3.3.2
2024-12-18 23:30:37,871:INFO:             IPython: 8.29.0
2024-12-18 23:30:37,871:INFO:          ipywidgets: 8.1.5
2024-12-18 23:30:37,871:INFO:                tqdm: 4.67.0
2024-12-18 23:30:37,871:INFO:               numpy: 1.26.4
2024-12-18 23:30:37,871:INFO:              pandas: 2.1.4
2024-12-18 23:30:37,871:INFO:              jinja2: 3.1.4
2024-12-18 23:30:37,871:INFO:               scipy: 1.11.4
2024-12-18 23:30:37,871:INFO:              joblib: 1.3.2
2024-12-18 23:30:37,871:INFO:             sklearn: 1.4.2
2024-12-18 23:30:37,871:INFO:                pyod: 2.0.2
2024-12-18 23:30:37,871:INFO:            imblearn: 0.12.4
2024-12-18 23:30:37,871:INFO:   category_encoders: 2.6.4
2024-12-18 23:30:37,871:INFO:            lightgbm: 4.5.0
2024-12-18 23:30:37,871:INFO:               numba: 0.60.0
2024-12-18 23:30:37,871:INFO:            requests: 2.32.3
2024-12-18 23:30:37,871:INFO:          matplotlib: 3.7.5
2024-12-18 23:30:37,871:INFO:          scikitplot: 0.3.7
2024-12-18 23:30:37,871:INFO:         yellowbrick: 1.5
2024-12-18 23:30:37,871:INFO:              plotly: 5.24.1
2024-12-18 23:30:37,871:INFO:    plotly-resampler: Not installed
2024-12-18 23:30:37,871:INFO:             kaleido: 0.2.1
2024-12-18 23:30:37,871:INFO:           schemdraw: 0.15
2024-12-18 23:30:37,871:INFO:         statsmodels: 0.14.4
2024-12-18 23:30:37,871:INFO:              sktime: 0.26.0
2024-12-18 23:30:37,871:INFO:               tbats: 1.1.3
2024-12-18 23:30:37,871:INFO:            pmdarima: 2.0.4
2024-12-18 23:30:37,881:INFO:              psutil: 6.1.0
2024-12-18 23:30:37,881:INFO:          markupsafe: 3.0.2
2024-12-18 23:30:37,881:INFO:             pickle5: Not installed
2024-12-18 23:30:37,882:INFO:         cloudpickle: 3.1.0
2024-12-18 23:30:37,882:INFO:         deprecation: 2.1.0
2024-12-18 23:30:37,882:INFO:              xxhash: 3.5.0
2024-12-18 23:30:37,882:INFO:           wurlitzer: Not installed
2024-12-18 23:30:37,882:INFO:PyCaret optional dependencies:
2024-12-18 23:30:37,935:INFO:                shap: Not installed
2024-12-18 23:30:37,935:INFO:           interpret: Not installed
2024-12-18 23:30:37,935:INFO:                umap: Not installed
2024-12-18 23:30:37,935:INFO:     ydata_profiling: Not installed
2024-12-18 23:30:37,935:INFO:  explainerdashboard: Not installed
2024-12-18 23:30:37,935:INFO:             autoviz: Not installed
2024-12-18 23:30:37,935:INFO:           fairlearn: Not installed
2024-12-18 23:30:37,935:INFO:          deepchecks: Not installed
2024-12-18 23:30:37,935:INFO:             xgboost: Not installed
2024-12-18 23:30:37,935:INFO:            catboost: Not installed
2024-12-18 23:30:37,935:INFO:              kmodes: Not installed
2024-12-18 23:30:37,935:INFO:             mlxtend: Not installed
2024-12-18 23:30:37,935:INFO:       statsforecast: Not installed
2024-12-18 23:30:37,935:INFO:        tune_sklearn: Not installed
2024-12-18 23:30:37,935:INFO:                 ray: Not installed
2024-12-18 23:30:37,935:INFO:            hyperopt: Not installed
2024-12-18 23:30:37,935:INFO:              optuna: Not installed
2024-12-18 23:30:37,935:INFO:               skopt: Not installed
2024-12-18 23:30:37,935:INFO:              mlflow: Not installed
2024-12-18 23:30:37,935:INFO:              gradio: Not installed
2024-12-18 23:30:37,935:INFO:             fastapi: Not installed
2024-12-18 23:30:37,935:INFO:             uvicorn: Not installed
2024-12-18 23:30:37,935:INFO:              m2cgen: Not installed
2024-12-18 23:30:37,935:INFO:           evidently: Not installed
2024-12-18 23:30:37,935:INFO:               fugue: Not installed
2024-12-18 23:30:37,935:INFO:           streamlit: 1.40.1
2024-12-18 23:30:37,935:INFO:             prophet: Not installed
2024-12-18 23:30:37,935:INFO:None
2024-12-18 23:30:37,935:INFO:Set up data.
2024-12-18 23:30:38,751:INFO:Set up folding strategy.
2024-12-18 23:30:38,751:INFO:Set up train/test split.
2024-12-18 23:30:38,984:INFO:Set up index.
2024-12-18 23:30:39,016:INFO:Assigning column types.
2024-12-18 23:30:39,052:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-18 23:30:39,052:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,138:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,169:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,354:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,439:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,439:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,439:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,439:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,452:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,457:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,565:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,664:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,664:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,664:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,664:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-18 23:30:39,664:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,683:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,798:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,884:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,885:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:39,885:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-18 23:30:39,903:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,017:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,099:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,099:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,099:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,099:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-18 23:30:40,115:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,234:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,332:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,332:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,332:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,347:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,449:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,547:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,548:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,548:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-18 23:30:40,676:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,765:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,766:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,900:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,983:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-18 23:30:40,983:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,983:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:40,983:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-18 23:30:41,115:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:41,217:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,217:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,352:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-18 23:30:41,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,535:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-18 23:30:41,764:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,981:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:41,981:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:42,032:INFO:Preparing preprocessing pipeline...
2024-12-18 23:30:42,032:INFO:Set up simple imputation.
2024-12-18 23:30:42,136:INFO:Set up encoding of categorical features.
2024-12-18 23:30:48,807:INFO:Finished creating preprocessing pipeline.
2024-12-18 23:30:48,884:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\joy\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['bedrooms', 'bathrooms', 'toilets',
                                             'parking_space'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['title', 'town', 'state'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['title', 'state'],
                                    transformer=OneHotEncoder(cols=['title',
                                                                    'state'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['town'],
                                    transformer=TargetEncoder(cols=['town'],
                                                              handle_missing='return_nan')))])
2024-12-18 23:30:48,884:INFO:Creating final display dataframe.
2024-12-18 23:30:50,900:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             price
2                   Target type        Regression
3           Original data shape        (19461, 8)
4        Transformed data shape       (19461, 38)
5   Transformed train set shape       (13622, 38)
6    Transformed test set shape        (5839, 38)
7              Numeric features                 4
8          Categorical features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              3277
2024-12-18 23:30:51,202:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:51,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:51,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:51,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-18 23:30:51,431:INFO:setup() successfully completed in 16.13s...............
2024-12-18 23:30:51,460:INFO:Initializing compare_models()
2024-12-18 23:30:51,461:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2024-12-18 23:30:51,465:INFO:Checking exceptions
2024-12-18 23:30:51,476:INFO:Preparing display monitor
2024-12-18 23:30:51,631:INFO:Initializing Linear Regression
2024-12-18 23:30:51,632:INFO:Total runtime is 1.665353775024414e-05 minutes
2024-12-18 23:30:51,640:INFO:SubProcess create_model() called ==================================
2024-12-18 23:30:51,641:INFO:Initializing create_model()
2024-12-18 23:30:51,641:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:30:51,641:INFO:Checking exceptions
2024-12-18 23:30:51,641:INFO:Importing libraries
2024-12-18 23:30:51,641:INFO:Copying training dataset
2024-12-18 23:30:51,652:INFO:Defining folds
2024-12-18 23:30:51,652:INFO:Declaring metric variables
2024-12-18 23:30:51,668:INFO:Importing untrained model
2024-12-18 23:30:51,675:INFO:Linear Regression Imported successfully
2024-12-18 23:30:51,698:INFO:Starting cross validation
2024-12-18 23:30:51,904:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:31:59,314:INFO:Calculating mean and std
2024-12-18 23:31:59,337:INFO:Creating metrics dataframe
2024-12-18 23:31:59,340:INFO:Uploading results into container
2024-12-18 23:31:59,342:INFO:Uploading model into container now
2024-12-18 23:31:59,344:INFO:_master_model_container: 1
2024-12-18 23:31:59,347:INFO:_display_container: 2
2024-12-18 23:31:59,350:INFO:LinearRegression(n_jobs=-1)
2024-12-18 23:31:59,350:INFO:create_model() successfully completed......................................
2024-12-18 23:31:59,466:INFO:SubProcess create_model() end ==================================
2024-12-18 23:31:59,466:INFO:Creating metrics dataframe
2024-12-18 23:31:59,523:INFO:Initializing Lasso Regression
2024-12-18 23:31:59,523:INFO:Total runtime is 1.131535518169403 minutes
2024-12-18 23:31:59,533:INFO:SubProcess create_model() called ==================================
2024-12-18 23:31:59,535:INFO:Initializing create_model()
2024-12-18 23:31:59,535:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:31:59,536:INFO:Checking exceptions
2024-12-18 23:31:59,536:INFO:Importing libraries
2024-12-18 23:31:59,536:INFO:Copying training dataset
2024-12-18 23:31:59,560:INFO:Defining folds
2024-12-18 23:31:59,562:INFO:Declaring metric variables
2024-12-18 23:31:59,586:INFO:Importing untrained model
2024-12-18 23:31:59,602:INFO:Lasso Regression Imported successfully
2024-12-18 23:31:59,633:INFO:Starting cross validation
2024-12-18 23:31:59,640:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:04,054:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.620e+24, tolerance: 3.284e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:04,054:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.629e+24, tolerance: 3.288e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:04,069:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.638e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:04,115:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.626e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:08,146:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.817e+21, tolerance: 2.295e+18
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:08,219:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.634e+24, tolerance: 3.285e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:08,298:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.626e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:08,365:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.629e+24, tolerance: 3.272e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:10,681:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.626e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:10,718:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.635e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:10,813:INFO:Calculating mean and std
2024-12-18 23:32:10,817:INFO:Creating metrics dataframe
2024-12-18 23:32:10,822:INFO:Uploading results into container
2024-12-18 23:32:10,823:INFO:Uploading model into container now
2024-12-18 23:32:10,823:INFO:_master_model_container: 2
2024-12-18 23:32:10,823:INFO:_display_container: 2
2024-12-18 23:32:10,824:INFO:Lasso(random_state=123)
2024-12-18 23:32:10,824:INFO:create_model() successfully completed......................................
2024-12-18 23:32:10,920:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:10,921:INFO:Creating metrics dataframe
2024-12-18 23:32:11,035:INFO:Initializing Ridge Regression
2024-12-18 23:32:11,035:INFO:Total runtime is 1.323394457499186 minutes
2024-12-18 23:32:11,052:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:11,054:INFO:Initializing create_model()
2024-12-18 23:32:11,055:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:11,056:INFO:Checking exceptions
2024-12-18 23:32:11,056:INFO:Importing libraries
2024-12-18 23:32:11,056:INFO:Copying training dataset
2024-12-18 23:32:11,118:INFO:Defining folds
2024-12-18 23:32:11,119:INFO:Declaring metric variables
2024-12-18 23:32:11,132:INFO:Importing untrained model
2024-12-18 23:32:11,144:INFO:Ridge Regression Imported successfully
2024-12-18 23:32:11,165:INFO:Starting cross validation
2024-12-18 23:32:11,172:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:14,375:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.56407e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:14,375:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.56159e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:14,375:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.56451e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:14,406:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.55414e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,019:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.54577e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.52325e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,031:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.29197e-21): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,105:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.52931e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,482:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.54735e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,482:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.57266e-22): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-12-18 23:32:15,579:INFO:Calculating mean and std
2024-12-18 23:32:15,582:INFO:Creating metrics dataframe
2024-12-18 23:32:15,585:INFO:Uploading results into container
2024-12-18 23:32:15,586:INFO:Uploading model into container now
2024-12-18 23:32:15,586:INFO:_master_model_container: 3
2024-12-18 23:32:15,587:INFO:_display_container: 2
2024-12-18 23:32:15,587:INFO:Ridge(random_state=123)
2024-12-18 23:32:15,587:INFO:create_model() successfully completed......................................
2024-12-18 23:32:15,692:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:15,692:INFO:Creating metrics dataframe
2024-12-18 23:32:15,707:INFO:Initializing Elastic Net
2024-12-18 23:32:15,707:INFO:Total runtime is 1.401261822382609 minutes
2024-12-18 23:32:15,716:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:15,718:INFO:Initializing create_model()
2024-12-18 23:32:15,718:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:15,719:INFO:Checking exceptions
2024-12-18 23:32:15,719:INFO:Importing libraries
2024-12-18 23:32:15,721:INFO:Copying training dataset
2024-12-18 23:32:15,745:INFO:Defining folds
2024-12-18 23:32:15,745:INFO:Declaring metric variables
2024-12-18 23:32:15,761:INFO:Importing untrained model
2024-12-18 23:32:15,787:INFO:Elastic Net Imported successfully
2024-12-18 23:32:15,811:INFO:Starting cross validation
2024-12-18 23:32:15,820:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:19,550:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.635e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:19,720:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.638e+24, tolerance: 3.288e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:20,693:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.637e+24, tolerance: 3.285e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:21,964:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.635e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:23,184:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 9.401e+21, tolerance: 2.295e+18
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:23,450:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.630e+24, tolerance: 3.272e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:24,330:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_coordinate_descent.py:678: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.638e+24, tolerance: 3.287e+20
  model = cd_fast.enet_coordinate_descent(

2024-12-18 23:32:24,413:INFO:Calculating mean and std
2024-12-18 23:32:24,416:INFO:Creating metrics dataframe
2024-12-18 23:32:24,420:INFO:Uploading results into container
2024-12-18 23:32:24,421:INFO:Uploading model into container now
2024-12-18 23:32:24,421:INFO:_master_model_container: 4
2024-12-18 23:32:24,421:INFO:_display_container: 2
2024-12-18 23:32:24,422:INFO:ElasticNet(random_state=123)
2024-12-18 23:32:24,422:INFO:create_model() successfully completed......................................
2024-12-18 23:32:24,519:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:24,520:INFO:Creating metrics dataframe
2024-12-18 23:32:24,543:INFO:Initializing Least Angle Regression
2024-12-18 23:32:24,549:INFO:Total runtime is 1.5486193180084227 minutes
2024-12-18 23:32:24,557:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:24,557:INFO:Initializing create_model()
2024-12-18 23:32:24,557:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:24,557:INFO:Checking exceptions
2024-12-18 23:32:24,558:INFO:Importing libraries
2024-12-18 23:32:24,558:INFO:Copying training dataset
2024-12-18 23:32:24,589:INFO:Defining folds
2024-12-18 23:32:24,590:INFO:Declaring metric variables
2024-12-18 23:32:24,607:INFO:Importing untrained model
2024-12-18 23:32:24,627:INFO:Least Angle Regression Imported successfully
2024-12-18 23:32:24,652:INFO:Starting cross validation
2024-12-18 23:32:24,661:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:26,879:INFO:Calculating mean and std
2024-12-18 23:32:26,882:INFO:Creating metrics dataframe
2024-12-18 23:32:26,885:INFO:Uploading results into container
2024-12-18 23:32:26,886:INFO:Uploading model into container now
2024-12-18 23:32:26,886:INFO:_master_model_container: 5
2024-12-18 23:32:26,886:INFO:_display_container: 2
2024-12-18 23:32:26,888:INFO:Lars(random_state=123)
2024-12-18 23:32:26,888:INFO:create_model() successfully completed......................................
2024-12-18 23:32:26,985:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:26,985:INFO:Creating metrics dataframe
2024-12-18 23:32:27,006:INFO:Initializing Lasso Least Angle Regression
2024-12-18 23:32:27,006:INFO:Total runtime is 1.5895816802978513 minutes
2024-12-18 23:32:27,024:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:27,025:INFO:Initializing create_model()
2024-12-18 23:32:27,026:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:27,026:INFO:Checking exceptions
2024-12-18 23:32:27,030:INFO:Importing libraries
2024-12-18 23:32:27,030:INFO:Copying training dataset
2024-12-18 23:32:27,115:INFO:Defining folds
2024-12-18 23:32:27,115:INFO:Declaring metric variables
2024-12-18 23:32:27,132:INFO:Importing untrained model
2024-12-18 23:32:27,142:INFO:Lasso Least Angle Regression Imported successfully
2024-12-18 23:32:27,170:INFO:Starting cross validation
2024-12-18 23:32:27,175:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:29,080:INFO:Calculating mean and std
2024-12-18 23:32:29,082:INFO:Creating metrics dataframe
2024-12-18 23:32:29,085:INFO:Uploading results into container
2024-12-18 23:32:29,087:INFO:Uploading model into container now
2024-12-18 23:32:29,087:INFO:_master_model_container: 6
2024-12-18 23:32:29,088:INFO:_display_container: 2
2024-12-18 23:32:29,088:INFO:LassoLars(random_state=123)
2024-12-18 23:32:29,088:INFO:create_model() successfully completed......................................
2024-12-18 23:32:29,187:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:29,187:INFO:Creating metrics dataframe
2024-12-18 23:32:29,215:INFO:Initializing Orthogonal Matching Pursuit
2024-12-18 23:32:29,215:INFO:Total runtime is 1.626403760910034 minutes
2024-12-18 23:32:29,237:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:29,238:INFO:Initializing create_model()
2024-12-18 23:32:29,238:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:29,241:INFO:Checking exceptions
2024-12-18 23:32:29,241:INFO:Importing libraries
2024-12-18 23:32:29,241:INFO:Copying training dataset
2024-12-18 23:32:29,288:INFO:Defining folds
2024-12-18 23:32:29,291:INFO:Declaring metric variables
2024-12-18 23:32:29,305:INFO:Importing untrained model
2024-12-18 23:32:29,323:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-18 23:32:29,357:INFO:Starting cross validation
2024-12-18 23:32:29,362:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:31,330:INFO:Calculating mean and std
2024-12-18 23:32:31,333:INFO:Creating metrics dataframe
2024-12-18 23:32:31,336:INFO:Uploading results into container
2024-12-18 23:32:31,337:INFO:Uploading model into container now
2024-12-18 23:32:31,337:INFO:_master_model_container: 7
2024-12-18 23:32:31,337:INFO:_display_container: 2
2024-12-18 23:32:31,338:INFO:OrthogonalMatchingPursuit()
2024-12-18 23:32:31,338:INFO:create_model() successfully completed......................................
2024-12-18 23:32:31,439:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:31,441:INFO:Creating metrics dataframe
2024-12-18 23:32:31,461:INFO:Initializing Bayesian Ridge
2024-12-18 23:32:31,462:INFO:Total runtime is 1.663840067386627 minutes
2024-12-18 23:32:31,472:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:31,472:INFO:Initializing create_model()
2024-12-18 23:32:31,472:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:31,472:INFO:Checking exceptions
2024-12-18 23:32:31,472:INFO:Importing libraries
2024-12-18 23:32:31,472:INFO:Copying training dataset
2024-12-18 23:32:31,504:INFO:Defining folds
2024-12-18 23:32:31,505:INFO:Declaring metric variables
2024-12-18 23:32:31,515:INFO:Importing untrained model
2024-12-18 23:32:31,538:INFO:Bayesian Ridge Imported successfully
2024-12-18 23:32:31,572:INFO:Starting cross validation
2024-12-18 23:32:31,582:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:34,298:INFO:Calculating mean and std
2024-12-18 23:32:34,300:INFO:Creating metrics dataframe
2024-12-18 23:32:34,302:INFO:Uploading results into container
2024-12-18 23:32:34,304:INFO:Uploading model into container now
2024-12-18 23:32:34,304:INFO:_master_model_container: 8
2024-12-18 23:32:34,304:INFO:_display_container: 2
2024-12-18 23:32:34,305:INFO:BayesianRidge()
2024-12-18 23:32:34,305:INFO:create_model() successfully completed......................................
2024-12-18 23:32:34,400:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:34,403:INFO:Creating metrics dataframe
2024-12-18 23:32:34,433:INFO:Initializing Passive Aggressive Regressor
2024-12-18 23:32:34,433:INFO:Total runtime is 1.7133579532305396 minutes
2024-12-18 23:32:34,438:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:34,440:INFO:Initializing create_model()
2024-12-18 23:32:34,441:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:34,441:INFO:Checking exceptions
2024-12-18 23:32:34,442:INFO:Importing libraries
2024-12-18 23:32:34,442:INFO:Copying training dataset
2024-12-18 23:32:34,460:INFO:Defining folds
2024-12-18 23:32:34,460:INFO:Declaring metric variables
2024-12-18 23:32:34,478:INFO:Importing untrained model
2024-12-18 23:32:34,502:INFO:Passive Aggressive Regressor Imported successfully
2024-12-18 23:32:34,528:INFO:Starting cross validation
2024-12-18 23:32:34,540:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:37,613:INFO:Calculating mean and std
2024-12-18 23:32:37,616:INFO:Creating metrics dataframe
2024-12-18 23:32:37,621:INFO:Uploading results into container
2024-12-18 23:32:37,622:INFO:Uploading model into container now
2024-12-18 23:32:37,622:INFO:_master_model_container: 9
2024-12-18 23:32:37,622:INFO:_display_container: 2
2024-12-18 23:32:37,623:INFO:PassiveAggressiveRegressor(random_state=123)
2024-12-18 23:32:37,623:INFO:create_model() successfully completed......................................
2024-12-18 23:32:37,718:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:37,718:INFO:Creating metrics dataframe
2024-12-18 23:32:37,752:INFO:Initializing Huber Regressor
2024-12-18 23:32:37,753:INFO:Total runtime is 1.7686912973721818 minutes
2024-12-18 23:32:37,759:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:37,762:INFO:Initializing create_model()
2024-12-18 23:32:37,762:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:37,764:INFO:Checking exceptions
2024-12-18 23:32:37,764:INFO:Importing libraries
2024-12-18 23:32:37,764:INFO:Copying training dataset
2024-12-18 23:32:37,784:INFO:Defining folds
2024-12-18 23:32:37,784:INFO:Declaring metric variables
2024-12-18 23:32:37,790:INFO:Importing untrained model
2024-12-18 23:32:37,813:INFO:Huber Regressor Imported successfully
2024-12-18 23:32:37,855:INFO:Starting cross validation
2024-12-18 23:32:37,861:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:42,014:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
2 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
2 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\sklearn\linear_model\_huber.py", line 338, in fit
    raise ValueError(
ValueError: HuberRegressor convergence failed: l-BFGS-b solver terminated with ABNORMAL_TERMINATION_IN_LNSRCH

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-12-18 23:32:42,014:INFO:Calculating mean and std
2024-12-18 23:32:42,018:INFO:Creating metrics dataframe
2024-12-18 23:32:42,021:INFO:Uploading results into container
2024-12-18 23:32:42,022:INFO:Uploading model into container now
2024-12-18 23:32:42,023:INFO:_master_model_container: 10
2024-12-18 23:32:42,023:INFO:_display_container: 2
2024-12-18 23:32:42,025:INFO:HuberRegressor()
2024-12-18 23:32:42,025:INFO:create_model() successfully completed......................................
2024-12-18 23:32:42,131:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:42,131:INFO:Creating metrics dataframe
2024-12-18 23:32:42,159:INFO:Initializing K Neighbors Regressor
2024-12-18 23:32:42,159:INFO:Total runtime is 1.8421366373697912 minutes
2024-12-18 23:32:42,171:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:42,172:INFO:Initializing create_model()
2024-12-18 23:32:42,172:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:42,174:INFO:Checking exceptions
2024-12-18 23:32:42,174:INFO:Importing libraries
2024-12-18 23:32:42,175:INFO:Copying training dataset
2024-12-18 23:32:42,201:INFO:Defining folds
2024-12-18 23:32:42,202:INFO:Declaring metric variables
2024-12-18 23:32:42,227:INFO:Importing untrained model
2024-12-18 23:32:42,241:INFO:K Neighbors Regressor Imported successfully
2024-12-18 23:32:42,303:INFO:Starting cross validation
2024-12-18 23:32:42,314:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:48,396:INFO:Calculating mean and std
2024-12-18 23:32:48,398:INFO:Creating metrics dataframe
2024-12-18 23:32:48,402:INFO:Uploading results into container
2024-12-18 23:32:48,403:INFO:Uploading model into container now
2024-12-18 23:32:48,403:INFO:_master_model_container: 11
2024-12-18 23:32:48,403:INFO:_display_container: 2
2024-12-18 23:32:48,404:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-18 23:32:48,404:INFO:create_model() successfully completed......................................
2024-12-18 23:32:48,501:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:48,502:INFO:Creating metrics dataframe
2024-12-18 23:32:48,526:INFO:Initializing Decision Tree Regressor
2024-12-18 23:32:48,526:INFO:Total runtime is 1.9482443451881404 minutes
2024-12-18 23:32:48,547:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:48,548:INFO:Initializing create_model()
2024-12-18 23:32:48,549:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:48,550:INFO:Checking exceptions
2024-12-18 23:32:48,550:INFO:Importing libraries
2024-12-18 23:32:48,550:INFO:Copying training dataset
2024-12-18 23:32:48,571:INFO:Defining folds
2024-12-18 23:32:48,572:INFO:Declaring metric variables
2024-12-18 23:32:48,582:INFO:Importing untrained model
2024-12-18 23:32:48,612:INFO:Decision Tree Regressor Imported successfully
2024-12-18 23:32:48,640:INFO:Starting cross validation
2024-12-18 23:32:48,651:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:32:51,596:INFO:Calculating mean and std
2024-12-18 23:32:51,598:INFO:Creating metrics dataframe
2024-12-18 23:32:51,601:INFO:Uploading results into container
2024-12-18 23:32:51,603:INFO:Uploading model into container now
2024-12-18 23:32:51,603:INFO:_master_model_container: 12
2024-12-18 23:32:51,603:INFO:_display_container: 2
2024-12-18 23:32:51,604:INFO:DecisionTreeRegressor(random_state=123)
2024-12-18 23:32:51,604:INFO:create_model() successfully completed......................................
2024-12-18 23:32:51,698:INFO:SubProcess create_model() end ==================================
2024-12-18 23:32:51,699:INFO:Creating metrics dataframe
2024-12-18 23:32:51,726:INFO:Initializing Random Forest Regressor
2024-12-18 23:32:51,726:INFO:Total runtime is 2.0015750010808304 minutes
2024-12-18 23:32:51,737:INFO:SubProcess create_model() called ==================================
2024-12-18 23:32:51,738:INFO:Initializing create_model()
2024-12-18 23:32:51,738:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:32:51,739:INFO:Checking exceptions
2024-12-18 23:32:51,739:INFO:Importing libraries
2024-12-18 23:32:51,739:INFO:Copying training dataset
2024-12-18 23:32:51,758:INFO:Defining folds
2024-12-18 23:32:51,758:INFO:Declaring metric variables
2024-12-18 23:32:51,772:INFO:Importing untrained model
2024-12-18 23:32:51,788:INFO:Random Forest Regressor Imported successfully
2024-12-18 23:32:51,859:INFO:Starting cross validation
2024-12-18 23:32:51,869:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:33:16,529:INFO:Calculating mean and std
2024-12-18 23:33:16,533:INFO:Creating metrics dataframe
2024-12-18 23:33:16,536:INFO:Uploading results into container
2024-12-18 23:33:16,538:INFO:Uploading model into container now
2024-12-18 23:33:16,538:INFO:_master_model_container: 13
2024-12-18 23:33:16,539:INFO:_display_container: 2
2024-12-18 23:33:16,539:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2024-12-18 23:33:16,539:INFO:create_model() successfully completed......................................
2024-12-18 23:33:16,637:INFO:SubProcess create_model() end ==================================
2024-12-18 23:33:16,637:INFO:Creating metrics dataframe
2024-12-18 23:33:16,669:INFO:Initializing Extra Trees Regressor
2024-12-18 23:33:16,669:INFO:Total runtime is 2.4172924081484473 minutes
2024-12-18 23:33:16,677:INFO:SubProcess create_model() called ==================================
2024-12-18 23:33:16,679:INFO:Initializing create_model()
2024-12-18 23:33:16,680:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:33:16,680:INFO:Checking exceptions
2024-12-18 23:33:16,682:INFO:Importing libraries
2024-12-18 23:33:16,682:INFO:Copying training dataset
2024-12-18 23:33:16,706:INFO:Defining folds
2024-12-18 23:33:16,706:INFO:Declaring metric variables
2024-12-18 23:33:16,717:INFO:Importing untrained model
2024-12-18 23:33:16,735:INFO:Extra Trees Regressor Imported successfully
2024-12-18 23:33:16,757:INFO:Starting cross validation
2024-12-18 23:33:16,762:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:33:42,248:INFO:Calculating mean and std
2024-12-18 23:33:42,250:INFO:Creating metrics dataframe
2024-12-18 23:33:42,256:INFO:Uploading results into container
2024-12-18 23:33:42,257:INFO:Uploading model into container now
2024-12-18 23:33:42,258:INFO:_master_model_container: 14
2024-12-18 23:33:42,258:INFO:_display_container: 2
2024-12-18 23:33:42,259:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2024-12-18 23:33:42,259:INFO:create_model() successfully completed......................................
2024-12-18 23:33:42,369:INFO:SubProcess create_model() end ==================================
2024-12-18 23:33:42,370:INFO:Creating metrics dataframe
2024-12-18 23:33:42,401:INFO:Initializing AdaBoost Regressor
2024-12-18 23:33:42,402:INFO:Total runtime is 2.8461833834648127 minutes
2024-12-18 23:33:42,415:INFO:SubProcess create_model() called ==================================
2024-12-18 23:33:42,417:INFO:Initializing create_model()
2024-12-18 23:33:42,417:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:33:42,417:INFO:Checking exceptions
2024-12-18 23:33:42,418:INFO:Importing libraries
2024-12-18 23:33:42,418:INFO:Copying training dataset
2024-12-18 23:33:42,506:INFO:Defining folds
2024-12-18 23:33:42,506:INFO:Declaring metric variables
2024-12-18 23:33:42,524:INFO:Importing untrained model
2024-12-18 23:33:42,569:INFO:AdaBoost Regressor Imported successfully
2024-12-18 23:33:42,604:INFO:Starting cross validation
2024-12-18 23:33:42,623:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:33:46,046:INFO:Calculating mean and std
2024-12-18 23:33:46,049:INFO:Creating metrics dataframe
2024-12-18 23:33:46,054:INFO:Uploading results into container
2024-12-18 23:33:46,056:INFO:Uploading model into container now
2024-12-18 23:33:46,057:INFO:_master_model_container: 15
2024-12-18 23:33:46,059:INFO:_display_container: 2
2024-12-18 23:33:46,061:INFO:AdaBoostRegressor(random_state=123)
2024-12-18 23:33:46,061:INFO:create_model() successfully completed......................................
2024-12-18 23:33:46,183:INFO:SubProcess create_model() end ==================================
2024-12-18 23:33:46,184:INFO:Creating metrics dataframe
2024-12-18 23:33:46,206:INFO:Initializing Gradient Boosting Regressor
2024-12-18 23:33:46,206:INFO:Total runtime is 2.9095818956693007 minutes
2024-12-18 23:33:46,216:INFO:SubProcess create_model() called ==================================
2024-12-18 23:33:46,217:INFO:Initializing create_model()
2024-12-18 23:33:46,218:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:33:46,218:INFO:Checking exceptions
2024-12-18 23:33:46,218:INFO:Importing libraries
2024-12-18 23:33:46,218:INFO:Copying training dataset
2024-12-18 23:33:46,237:INFO:Defining folds
2024-12-18 23:33:46,238:INFO:Declaring metric variables
2024-12-18 23:33:46,249:INFO:Importing untrained model
2024-12-18 23:33:46,262:INFO:Gradient Boosting Regressor Imported successfully
2024-12-18 23:33:46,301:INFO:Starting cross validation
2024-12-18 23:33:46,318:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:33:56,081:INFO:Calculating mean and std
2024-12-18 23:33:56,084:INFO:Creating metrics dataframe
2024-12-18 23:33:56,088:INFO:Uploading results into container
2024-12-18 23:33:56,089:INFO:Uploading model into container now
2024-12-18 23:33:56,090:INFO:_master_model_container: 16
2024-12-18 23:33:56,090:INFO:_display_container: 2
2024-12-18 23:33:56,094:INFO:GradientBoostingRegressor(random_state=123)
2024-12-18 23:33:56,094:INFO:create_model() successfully completed......................................
2024-12-18 23:33:56,200:INFO:SubProcess create_model() end ==================================
2024-12-18 23:33:56,200:INFO:Creating metrics dataframe
2024-12-18 23:33:56,222:INFO:Initializing Light Gradient Boosting Machine
2024-12-18 23:33:56,222:INFO:Total runtime is 3.0765203237533565 minutes
2024-12-18 23:33:56,231:INFO:SubProcess create_model() called ==================================
2024-12-18 23:33:56,233:INFO:Initializing create_model()
2024-12-18 23:33:56,234:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:33:56,234:INFO:Checking exceptions
2024-12-18 23:33:56,235:INFO:Importing libraries
2024-12-18 23:33:56,235:INFO:Copying training dataset
2024-12-18 23:33:56,258:INFO:Defining folds
2024-12-18 23:33:56,259:INFO:Declaring metric variables
2024-12-18 23:33:56,272:INFO:Importing untrained model
2024-12-18 23:33:56,307:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-18 23:33:56,333:INFO:Starting cross validation
2024-12-18 23:33:56,341:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:34:00,613:INFO:Calculating mean and std
2024-12-18 23:34:00,613:INFO:Creating metrics dataframe
2024-12-18 23:34:00,624:INFO:Uploading results into container
2024-12-18 23:34:00,627:INFO:Uploading model into container now
2024-12-18 23:34:00,628:INFO:_master_model_container: 17
2024-12-18 23:34:00,628:INFO:_display_container: 2
2024-12-18 23:34:00,628:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2024-12-18 23:34:00,628:INFO:create_model() successfully completed......................................
2024-12-18 23:34:00,762:INFO:SubProcess create_model() end ==================================
2024-12-18 23:34:00,763:INFO:Creating metrics dataframe
2024-12-18 23:34:00,786:INFO:Initializing Dummy Regressor
2024-12-18 23:34:00,787:INFO:Total runtime is 3.1525834004084263 minutes
2024-12-18 23:34:00,791:INFO:SubProcess create_model() called ==================================
2024-12-18 23:34:00,793:INFO:Initializing create_model()
2024-12-18 23:34:00,794:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEB1609CC0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:34:00,795:INFO:Checking exceptions
2024-12-18 23:34:00,795:INFO:Importing libraries
2024-12-18 23:34:00,795:INFO:Copying training dataset
2024-12-18 23:34:00,822:INFO:Defining folds
2024-12-18 23:34:00,822:INFO:Declaring metric variables
2024-12-18 23:34:00,835:INFO:Importing untrained model
2024-12-18 23:34:00,875:INFO:Dummy Regressor Imported successfully
2024-12-18 23:34:00,899:INFO:Starting cross validation
2024-12-18 23:34:00,905:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:34:02,713:INFO:Calculating mean and std
2024-12-18 23:34:02,715:INFO:Creating metrics dataframe
2024-12-18 23:34:02,720:INFO:Uploading results into container
2024-12-18 23:34:02,720:INFO:Uploading model into container now
2024-12-18 23:34:02,720:INFO:_master_model_container: 18
2024-12-18 23:34:02,728:INFO:_display_container: 2
2024-12-18 23:34:02,728:INFO:DummyRegressor()
2024-12-18 23:34:02,728:INFO:create_model() successfully completed......................................
2024-12-18 23:34:02,918:INFO:SubProcess create_model() end ==================================
2024-12-18 23:34:02,918:INFO:Creating metrics dataframe
2024-12-18 23:34:02,995:WARNING:c:\Users\joy\anaconda3\envs\tcm_venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-12-18 23:34:03,042:INFO:Initializing create_model()
2024-12-18 23:34:03,043:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=KNeighborsRegressor(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:34:03,043:INFO:Checking exceptions
2024-12-18 23:34:03,054:INFO:Importing libraries
2024-12-18 23:34:03,054:INFO:Copying training dataset
2024-12-18 23:34:03,074:INFO:Defining folds
2024-12-18 23:34:03,074:INFO:Declaring metric variables
2024-12-18 23:34:03,074:INFO:Importing untrained model
2024-12-18 23:34:03,074:INFO:Declaring custom model
2024-12-18 23:34:03,074:INFO:K Neighbors Regressor Imported successfully
2024-12-18 23:34:03,082:INFO:Cross validation set to False
2024-12-18 23:34:03,082:INFO:Fitting Model
2024-12-18 23:34:03,333:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-18 23:34:03,333:INFO:create_model() successfully completed......................................
2024-12-18 23:34:03,505:INFO:_master_model_container: 18
2024-12-18 23:34:03,505:INFO:_display_container: 2
2024-12-18 23:34:03,505:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-18 23:34:03,506:INFO:compare_models() successfully completed......................................
2024-12-18 23:34:03,733:INFO:Initializing tune_model()
2024-12-18 23:34:03,734:INFO:tune_model(estimator=KNeighborsRegressor(n_jobs=-1), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>)
2024-12-18 23:34:03,735:INFO:Checking exceptions
2024-12-18 23:34:03,777:INFO:Copying training dataset
2024-12-18 23:34:03,786:INFO:Checking base model
2024-12-18 23:34:03,786:INFO:Base model : K Neighbors Regressor
2024-12-18 23:34:03,797:INFO:Declaring metric variables
2024-12-18 23:34:03,804:INFO:Defining Hyperparameters
2024-12-18 23:34:03,904:INFO:Tuning with n_jobs=-1
2024-12-18 23:34:03,904:INFO:Initializing RandomizedSearchCV
2024-12-18 23:34:44,765:INFO:best_params: {'actual_estimator__weights': 'distance', 'actual_estimator__n_neighbors': 9, 'actual_estimator__metric': 'minkowski'}
2024-12-18 23:34:44,776:INFO:Hyperparameter search completed
2024-12-18 23:34:44,776:INFO:SubProcess create_model() called ==================================
2024-12-18 23:34:44,777:INFO:Initializing create_model()
2024-12-18 23:34:44,777:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=KNeighborsRegressor(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DEC608C0A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'weights': 'distance', 'n_neighbors': 9, 'metric': 'minkowski'})
2024-12-18 23:34:44,778:INFO:Checking exceptions
2024-12-18 23:34:44,780:INFO:Importing libraries
2024-12-18 23:34:44,780:INFO:Copying training dataset
2024-12-18 23:34:44,798:INFO:Defining folds
2024-12-18 23:34:44,798:INFO:Declaring metric variables
2024-12-18 23:34:44,804:INFO:Importing untrained model
2024-12-18 23:34:44,804:INFO:Declaring custom model
2024-12-18 23:34:44,819:INFO:K Neighbors Regressor Imported successfully
2024-12-18 23:34:44,870:INFO:Starting cross validation
2024-12-18 23:34:44,899:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:34:48,263:INFO:Calculating mean and std
2024-12-18 23:34:48,266:INFO:Creating metrics dataframe
2024-12-18 23:34:48,274:INFO:Finalizing model
2024-12-18 23:34:48,525:INFO:Uploading results into container
2024-12-18 23:34:48,529:INFO:Uploading model into container now
2024-12-18 23:34:48,531:INFO:_master_model_container: 19
2024-12-18 23:34:48,531:INFO:_display_container: 3
2024-12-18 23:34:48,532:INFO:KNeighborsRegressor(n_jobs=-1, n_neighbors=9, weights='distance')
2024-12-18 23:34:48,532:INFO:create_model() successfully completed......................................
2024-12-18 23:34:48,716:INFO:SubProcess create_model() end ==================================
2024-12-18 23:34:48,716:INFO:choose_better activated
2024-12-18 23:34:48,722:INFO:SubProcess create_model() called ==================================
2024-12-18 23:34:48,723:INFO:Initializing create_model()
2024-12-18 23:34:48,723:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEB17989D0>, estimator=KNeighborsRegressor(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-18 23:34:48,723:INFO:Checking exceptions
2024-12-18 23:34:48,726:INFO:Importing libraries
2024-12-18 23:34:48,726:INFO:Copying training dataset
2024-12-18 23:34:48,734:INFO:Defining folds
2024-12-18 23:34:48,734:INFO:Declaring metric variables
2024-12-18 23:34:48,734:INFO:Importing untrained model
2024-12-18 23:34:48,734:INFO:Declaring custom model
2024-12-18 23:34:48,746:INFO:K Neighbors Regressor Imported successfully
2024-12-18 23:34:48,747:INFO:Starting cross validation
2024-12-18 23:34:48,749:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-18 23:34:53,263:INFO:Calculating mean and std
2024-12-18 23:34:53,265:INFO:Creating metrics dataframe
2024-12-18 23:34:53,270:INFO:Finalizing model
2024-12-18 23:34:53,609:INFO:Uploading results into container
2024-12-18 23:34:53,611:INFO:Uploading model into container now
2024-12-18 23:34:53,613:INFO:_master_model_container: 20
2024-12-18 23:34:53,613:INFO:_display_container: 4
2024-12-18 23:34:53,614:INFO:KNeighborsRegressor(n_jobs=-1)
2024-12-18 23:34:53,614:INFO:create_model() successfully completed......................................
2024-12-18 23:34:53,735:INFO:SubProcess create_model() end ==================================
2024-12-18 23:34:53,736:INFO:KNeighborsRegressor(n_jobs=-1) result for R2 is 0.1682
2024-12-18 23:34:53,737:INFO:KNeighborsRegressor(n_jobs=-1, n_neighbors=9, weights='distance') result for R2 is 0.1792
2024-12-18 23:34:53,738:INFO:KNeighborsRegressor(n_jobs=-1, n_neighbors=9, weights='distance') is best model
2024-12-18 23:34:53,738:INFO:choose_better completed
2024-12-18 23:34:53,766:INFO:_master_model_container: 20
2024-12-18 23:34:53,766:INFO:_display_container: 3
2024-12-18 23:34:53,766:INFO:KNeighborsRegressor(n_jobs=-1, n_neighbors=9, weights='distance')
2024-12-18 23:34:53,767:INFO:tune_model() successfully completed......................................
